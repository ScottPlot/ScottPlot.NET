{
  "version": "5.0.55",
  "dateUtc": "2025-01-26T21:59:52",
  "recipeCount": 324,
  "jsonSizeKb": 436,
  "chapters": [
    "General",
    "Plot Types"
  ],
  "categories": [
    {
      "chapter": "General",
      "name": "Quickstart",
      "description": "A survey of basic functionality in ScottPlot 5",
      "url": "/cookbook/5.0/ScottPlotQuickstart"
    },
    {
      "chapter": "Plot Types",
      "name": "Annotation",
      "description": "Annotations are always-visible text labels positioned over the data area.",
      "url": "/cookbook/5.0/Annotation"
    },
    {
      "chapter": "Plot Types",
      "name": "Arrow",
      "description": "Arrows point to a location in coordinate space.",
      "url": "/cookbook/5.0/ArrowCoordinated"
    },
    {
      "chapter": "Plot Types",
      "name": "Axis Lines",
      "description": "Axis lines indicate a position on an axis.",
      "url": "/cookbook/5.0/AxisLines"
    },
    {
      "chapter": "Plot Types",
      "name": "Axis Spans",
      "description": "Axis spans indicate a range of an axis.",
      "url": "/cookbook/5.0/AxisSpans"
    },
    {
      "chapter": "Plot Types",
      "name": "Bar Plot",
      "description": "Bar plots represent values as horizontal or vertical rectangles",
      "url": "/cookbook/5.0/Bar"
    },
    {
      "chapter": "Plot Types",
      "name": "Box Plot",
      "description": "Box plots show a distribution at a glance",
      "url": "/cookbook/5.0/Box"
    },
    {
      "chapter": "Plot Types",
      "name": "Bracket",
      "description": "Brackets annotate a range along a line in coordinate space",
      "url": "/cookbook/5.0/Bracket"
    },
    {
      "chapter": "Plot Types",
      "name": "Callout",
      "description": "Callouts display a label and are connected with an arrow that marks a point on the plot.",
      "url": "/cookbook/5.0/Callout"
    },
    {
      "chapter": "Plot Types",
      "name": "Contour Plot",
      "description": "A contour plot is a graphical representation that shows the three-dimensional surface of a function on a two-dimensional plane by connecting points of equal value with contour lines",
      "url": "/cookbook/5.0/Contour"
    },
    {
      "chapter": "Plot Types",
      "name": "Coxcomb Plot",
      "description": "A Coxcomb chart is a pie graph where the angle of slices is constant but the radii are not.",
      "url": "/cookbook/5.0/Coxcomb"
    },
    {
      "chapter": "Plot Types",
      "name": "Crosshair",
      "description": "A Crosshair combines a horizontal axis line and vertical axis line to mark a location in coordinate space.",
      "url": "/cookbook/5.0/Crosshair"
    },
    {
      "chapter": "Plot Types",
      "name": "Ellipse",
      "description": "Ellipses are curves with a defined center and distinct X and Y radii. A circle is an ellipse with an X radius equal to its Y radius.",
      "url": "/cookbook/5.0/Ellipse"
    },
    {
      "chapter": "Plot Types",
      "name": "Error Bars",
      "description": "Error Bars communicate the range of possible values for a measurement",
      "url": "/cookbook/5.0/ErrorBar"
    },
    {
      "chapter": "Plot Types",
      "name": "FillY plot",
      "description": "FillY plots display the vertical range between two Y values at defined X positions",
      "url": "/cookbook/5.0/FillY"
    },
    {
      "chapter": "Plot Types",
      "name": "Financial Plot",
      "description": "Finance plots display price data binned into time ranges",
      "url": "/cookbook/5.0/Finance"
    },
    {
      "chapter": "Plot Types",
      "name": "Function",
      "description": "Function plots are a type of line plot where Y positions are defined by a function that depends on X rather than a collection of discrete data points.",
      "url": "/cookbook/5.0/Function"
    },
    {
      "chapter": "Plot Types",
      "name": "Heatmap",
      "description": "Heatmaps display values from 2D data as an image with cells of different intensities",
      "url": "/cookbook/5.0/Heatmap"
    },
    {
      "chapter": "Plot Types",
      "name": "Images",
      "description": "Images can be placed on plots in a variety of ways",
      "url": "/cookbook/5.0/Images"
    },
    {
      "chapter": "Plot Types",
      "name": "Line Plot",
      "description": "Line plots can be placed on the plot in coordinate space using a Start, End, and an optional LineStyle.",
      "url": "/cookbook/5.0/LinePlot"
    },
    {
      "chapter": "Plot Types",
      "name": "Live Data",
      "description": "Plottables like DataLogger and DataStreamer are designed for displaying datasets that change in real time. They have the ability to control axis limits to ensure the latest data is always in view. See the ScottPlot Demo for live example of these plot types.",
      "url": "/cookbook/5.0/LiveData"
    },
    {
      "chapter": "Plot Types",
      "name": "Lollipop Plot",
      "description": "A lollipop chart is a variation of a bar chart that uses a line (stem) extending from a baseline to a marker (head) to represent data points. Lollipop highlight individual data points with less visual clutter than to traditional bar charts.",
      "url": "/cookbook/5.0/Lollipop"
    },
    {
      "chapter": "Plot Types",
      "name": "Marker",
      "description": "Markers can be placed on the plot in coordinate space.",
      "url": "/cookbook/5.0/Marker"
    },
    {
      "chapter": "Plot Types",
      "name": "Phasor Plot",
      "description": "Phasor plots display vectors on a radial axis centered at the origin",
      "url": "/cookbook/5.0/Phasor"
    },
    {
      "chapter": "Plot Types",
      "name": "Pie",
      "description": "Pie charts illustrate numerical proportions as slices of a circle.",
      "url": "/cookbook/5.0/Pie"
    },
    {
      "chapter": "Plot Types",
      "name": "Polar Axis",
      "description": "Create a polar axis and add it to the plot to display data on a circular coordinate system.",
      "url": "/cookbook/5.0/PolarAxis"
    },
    {
      "chapter": "Plot Types",
      "name": "Population Plot",
      "description": "Population plots display collections of individual values.",
      "url": "/cookbook/5.0/Population"
    },
    {
      "chapter": "Plot Types",
      "name": "Radar Plot",
      "description": "Radar charts (also called a spider charts or star charts) represent multi-axis data as a 2D shape on axes arranged circularly around a center point.",
      "url": "/cookbook/5.0/Radar"
    },
    {
      "chapter": "Plot Types",
      "name": "Radial gauge",
      "description": "A radial gauge chart displays scalar data as circular gauges.",
      "url": "/cookbook/5.0/RadialGauge"
    },
    {
      "chapter": "Plot Types",
      "name": "Scale Bar",
      "description": "Scalebars display a horizontal and/or vertical range using a line segment and may be used to convey axis scale as a minimal alternative to using axis frames, ticks, and tick labels.",
      "url": "/cookbook/5.0/ScaleBar"
    },
    {
      "chapter": "Plot Types",
      "name": "Scatter Plot",
      "description": "Scatter plots display points at X/Y locations in coordinate space.",
      "url": "/cookbook/5.0/Scatter"
    },
    {
      "chapter": "Plot Types",
      "name": "Shapes",
      "description": "Basic shapes that can be added to plots",
      "url": "/cookbook/5.0/Shapes"
    },
    {
      "chapter": "Plot Types",
      "name": "Signal Plot",
      "description": "Signal plots display evenly-spaced data",
      "url": "/cookbook/5.0/Signal"
    },
    {
      "chapter": "Plot Types",
      "name": "SignalConst",
      "description": "SignalConst is a type of signal plot which contains immutable data points and occupies more memory but offers greater performance for extremely large datasets. It is rarely needed, but best use for plotting data containing millions of points.",
      "url": "/cookbook/5.0/SignalConst"
    },
    {
      "chapter": "Plot Types",
      "name": "SignalXY Plot",
      "description": "SignalXY are a high performance plot type optimized for X/Y pairs where the X values are always ascending. For large datasets SignalXY plots are much more performant than Scatter plots (which allow unordered X points) but not as performant as Signal plots (which require fixed spacing between X points).",
      "url": "/cookbook/5.0/SignalXY"
    },
    {
      "chapter": "Plot Types",
      "name": "Smith Chart",
      "description": "Create a Smith chart axis and add it to the plot to display impedance of RF signals using a horizontal axis indicating resistance and vertical axis indicating reactance.",
      "url": "/cookbook/5.0/SmithChart"
    },
    {
      "chapter": "Plot Types",
      "name": "Text",
      "description": "Text labels can be placed on the plot in coordinate space",
      "url": "/cookbook/5.0/Text"
    },
    {
      "chapter": "Plot Types",
      "name": "Triangular Axis",
      "description": "Create a triangular axis and add it to the plot to display data on a triangular coordinate system.",
      "url": "/cookbook/5.0/TriangularAxis"
    },
    {
      "chapter": "Plot Types",
      "name": "Vector Field",
      "description": "Vector fields display a collection of vectors rooted at points in coordinate space",
      "url": "/cookbook/5.0/VectorField"
    },
    {
      "chapter": "General",
      "name": "Plottable Management",
      "description": "How to add, remove, and reorder items in plots",
      "url": "/cookbook/5.0/PlottableManagement"
    },
    {
      "chapter": "General",
      "name": "Layout",
      "description": "How to customize data area size and figure padding",
      "url": "/cookbook/5.0/Layout"
    },
    {
      "chapter": "General",
      "name": "Multiplot",
      "description": "Use Multiplot to create figures with multiple subplots",
      "url": "/cookbook/5.0/MultiplotRecipes"
    },
    {
      "chapter": "General",
      "name": "Sample Data",
      "description": "ScottPlot has many built-in utilities for generating sample data.",
      "url": "/cookbook/5.0/DataGen"
    },
    {
      "chapter": "General",
      "name": "Histogram",
      "description": "Histograms graphically represent the distribution of numerical data by grouping values into ranges (bins) and displaying the frequency or count of points in each bin.",
      "url": "/cookbook/5.0/Histograms"
    },
    {
      "chapter": "General",
      "name": "Internationalization",
      "description": "Using ScottPlot across cultures with different text and numeric requirements.",
      "url": "/cookbook/5.0/Internationalization"
    },
    {
      "chapter": "General",
      "name": "Regression",
      "description": "Statistical operations to fit lines to data",
      "url": "/cookbook/5.0/Regression"
    },
    {
      "chapter": "General",
      "name": "Customizing Grids",
      "description": "Advanced customization of grid lines",
      "url": "/cookbook/5.0/CustomizingGrids"
    },
    {
      "chapter": "General",
      "name": "Miscellaneous",
      "description": "Miscellaneous features and customization options",
      "url": "/cookbook/5.0/Miscellaneous"
    },
    {
      "chapter": "General",
      "name": "Multiple Axes",
      "description": "Tick mark customization and creation of multi-Axis plots",
      "url": "/cookbook/5.0/MultiAxis"
    },
    {
      "chapter": "General",
      "name": "Customizing Ticks",
      "description": "Advanced customization of tick marks and tick labels",
      "url": "/cookbook/5.0/CustomizingTicks"
    },
    {
      "chapter": "General",
      "name": "Axis and Ticks",
      "description": "Examples of common customizations for axis labels and ticks",
      "url": "/cookbook/5.0/AxisAndTicks"
    },
    {
      "chapter": "General",
      "name": "Legends",
      "description": "A legend is a key typically displayed in the corner of a plot",
      "url": "/cookbook/5.0/Legend"
    },
    {
      "chapter": "General",
      "name": "Styling Plots",
      "description": "How to customize appearance of plots",
      "url": "/cookbook/5.0/Styling"
    }
  ],
  "recipes": [
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Set Axis Limits",
      "description": "Axis Limits can be set by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.SetLimits(-100, 150, -5, 5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "SetAxisLimits",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#SetAxisLimits",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/SetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/SetAxisLimits.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Read Axis Limits",
      "description": "Use GetLimits() to obtain the current axis limits.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nAxisLimits limits = myPlot.Axes.GetLimits();\ndouble xMin = limits.Left;\ndouble xMax = limits.Right;\ndouble yMin = limits.Bottom;\ndouble yMax = limits.Top;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "GetAxisLimits",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#GetAxisLimits",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/GetAxisLimits",
      "imageUrl": "/cookbook/5.0/images/GetAxisLimits.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "AutoScale Axis Limits to Fit Data",
      "description": "The axis limits can be automatically adjusted to fit the data. Optional arguments allow users to define the amount of whitespace around the edges of the data.In older versions of ScottPlot this functionality was achieved by a method named AxisAuto().",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// set limits that do not fit the data\nmyPlot.Axes.SetLimits(-100, 150, -5, 5);\n\n// reset limits to fit the data\nmyPlot.Axes.AutoScale();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "AutoScale",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#AutoScale",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/AutoScale",
      "imageUrl": "/cookbook/5.0/images/AutoScale.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Inverted Axis",
      "description": "Users can display data on an inverted axis by setting axis limits setting the lower edge to a value more positive than the upper edge.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.SetLimitsY(bottom: 1.5, top: -1.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "InvertedAxis",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#InvertedAxis",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/InvertedAxis",
      "imageUrl": "/cookbook/5.0/images/InvertedAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Inverted Auto-Axis",
      "description": "Customize the logic for the automatic axis scaler to ensure that axis limits for a particular axis are always inverted when autoscaled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.AutoScaler.InvertedY = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "InvertedAutoAxis",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#InvertedAutoAxis",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/InvertedAutoAxis",
      "imageUrl": "/cookbook/5.0/images/InvertedAutoAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Square Axis Units",
      "description": "Axis rules can be put in place which force the vertical scale (units per pixel) to match the horizontal scale so circles always appear as circles and not stretched ellipses.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Circle(0, 0, 10);\n\n// force pixels to have a 1:1 scale ratio\nmyPlot.Axes.SquareUnits();\n\n// even if you try to \u0022stretch\u0022 the axis, it will adjust the axis limits automatically\nmyPlot.Axes.SetLimits(-10, 10, -20, 20);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "SquareAxisUnits",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#SquareAxisUnits",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/SquareAxisUnits",
      "imageUrl": "/cookbook/5.0/images/SquareAxisUnits.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Axis with Subtitle",
      "description": "Users can create their own fully custom axes to replace the default ones (as demonstrated in the demo app). Some experimental axes are available for users who may be interested in alternative axis display styles.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Plot some sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// Instantiate a custom axis and customize it as desired\nScottPlot.AxisPanels.Experimental.LeftAxisWithSubtitle customAxisY = new()\n{\n    LabelText = \u0022My Custom Y Axis\u0022,\n    SubLabelText = \u0022It comes with a subtitle for the axis\u0022\n};\n\n// Remove the default Y axis and add the custom one to the plot\nmyPlot.Axes.Remove(myPlot.Axes.Left);\nmyPlot.Axes.AddLeftAxis(customAxisY);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "ExperimentalAxisWithSubtitle",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#ExperimentalAxisWithSubtitle",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/ExperimentalAxisWithSubtitle",
      "imageUrl": "/cookbook/5.0/images/ExperimentalAxisWithSubtitle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Axis AntiAliasing",
      "description": "To improve crispness of straight vertical and horizontal lines, Anti-aliasing is disabled by default for axis frames, tick marks, and grid lines. Anti-aliasing can be enabled for all these objects by calling the AntiAlias helper method.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] dataX = { 1, 2, 3, 4, 5 };\ndouble[] dataY = { 1, 4, 9, 16, 25 };\nmyPlot.Add.Scatter(dataX, dataY);\n\nmyPlot.Axes.AntiAlias(true);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "AxisAntiAliasing",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#AxisAntiAliasing",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/AxisAntiAliasing",
      "imageUrl": "/cookbook/5.0/images/AxisAntiAliasing.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Hide Axis and Turn frame lines on/off",
      "description": "Demonstrates how to hide axis ticks and turn frame lines on and off.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// Hide axis label and tick\nmyPlot.Axes.Bottom.TickLabelStyle.IsVisible = false;\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.Axes.Bottom.MinorTickStyle.Length = 0;\n\n// Hide axis edge line\nmyPlot.Axes.Bottom.FrameLineStyle.Width = 0;\nmyPlot.Axes.Right.FrameLineStyle.Width = 0;\nmyPlot.Axes.Top.FrameLineStyle.Width = 0;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "HideAxis",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#HideAxis",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/HideAxis",
      "imageUrl": "/cookbook/5.0/images/HideAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "DateTime Axis Quickstart",
      "description": "Axis tick labels can be displayed using a time format.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot data using DateTime units\nDateTime[] dates = Generate.ConsecutiveDays(100);\ndouble[] ys = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(dates, ys);\n\n// tell the plot to display dates on the bottom axis\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "DateTimeAxisQuickstart",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#DateTimeAxisQuickstart",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/DateTimeAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "DateTime Axis Values",
      "description": "DateTime axes are achieved using Microsoft\u0027s DateTime.ToOADate() and DateTime.FromOADate() methods to convert between dates and numeric values. Advanced users who wish to display data on DateTime axes may prefer to work with collections of doubles rather than collections of DateTimes.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create an array of DateTimes one hour apart\nint numberOfHours = 24;\nDateTime[] dateTimes = new DateTime[numberOfHours];\nDateTime startDateTime = new(2024, 1, 1);\nTimeSpan deltaTimeSpan = TimeSpan.FromHours(1);\nfor (int i = 0; i \u003C numberOfHours; i\u002B\u002B)\n{\n    dateTimes[i] = startDateTime \u002B i * deltaTimeSpan;\n}\n\n// create an array of doubles representing the same DateTimes one hour apart\ndouble[] dateDoubles = new double[numberOfHours];\ndouble startDouble = startDateTime.ToOADate(); // days since 1900\ndouble deltaDouble = 1.0 / 24.0; // an hour is 1/24 of a day\nfor (int i = 0; i \u003C numberOfHours; i\u002B\u002B)\n{\n    dateDoubles[i] = startDouble \u002B i * deltaDouble;\n}\n\n// now both arrays represent the same dates\nmyPlot.Add.Scatter(dateTimes, Generate.Sin(numberOfHours));\nmyPlot.Add.Scatter(dateDoubles, Generate.Cos(numberOfHours));\nmyPlot.Axes.DateTimeTicksBottom();\n\n// add padding on the right to make room for wide tick labels\nmyPlot.Axes.Right.MinimumSize = 50;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "DateTimeAxisMixed",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#DateTimeAxisMixed",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/DateTimeAxisMixed",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisMixed.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Custom DateTime Label Format",
      "description": "Users can provide their own logic for customizing DateTime tick labels",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample DateTime data\nDateTime[] dates = Generate.ConsecutiveDays(100);\ndouble[] ys = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(dates, ys);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// add logic into the RenderStarting event to customize tick labels\nmyPlot.RenderManager.RenderStarting \u002B= (s, e) =\u003E\n{\n    Tick[] ticks = myPlot.Axes.Bottom.TickGenerator.Ticks;\n    for (int i = 0; i \u003C ticks.Length; i\u002B\u002B)\n    {\n        DateTime dt = DateTime.FromOADate(ticks[i].Position);\n        string label = $\u0022{dt:MMM} \u0027{dt:yy}\u0022;\n        ticks[i] = new Tick(ticks[i].Position, label);\n    }\n};\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "DateTimeAxisCustomFormatter",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#DateTimeAxisCustomFormatter",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/DateTimeAxisCustomFormatter",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisCustomFormatter.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "DateTime Axis Fixed Interval Ticks",
      "description": "Make ticks render at fixed intervals. Optionally make the ticks render from a custom start date, rather than using the start date of the plot (e.g. to draw ticks on the hour every hour, or on the first of every month, etc).",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Plot 24 hours sample DateTime data (1 point every minute)\nDateTime[] dates = Generate.ConsecutiveMinutes(24 * 60, new DateTime(2000, 1, 1, 2, 12, 0));\ndouble[] ys = Generate.RandomWalk(24 * 60);\nmyPlot.Add.Scatter(dates, ys);\nvar dtAx = myPlot.Axes.DateTimeTicksBottom();\n\n// Create fixed-intervals ticks, major ticks every 6 hours, minor ticks every hour\ndtAx.TickGenerator = new ScottPlot.TickGenerators.DateTimeFixedInterval(\n    new ScottPlot.TickGenerators.TimeUnits.Hour(), 6,\n    new ScottPlot.TickGenerators.TimeUnits.Hour(), 1,\n    // Here we provide a delegate to override when the ticks start. In this case, we want the majors to be\n    // 00:00, 06:00, 12:00, etc. and the minors to be on the hour, every hour, so we start at midnight.\n    // If you do not provide this delegate, the ticks will start at whatever the Min on the x-axis is.\n    // The major ticks might end up as 1:30am, 7:30am, etc, and the tick positions will be fixed on the plot\n    // when it is panned around.\n    dt =\u003E new DateTime(dt.Year, dt.Month, dt.Day));\n\n// Customise gridlines to make the ticks easier to see\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Color = Colors.Black.WithOpacity();\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Width = 2;\n\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Color = Colors.Gray.WithOpacity(0.25);\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Width = 1;\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Pattern = LinePattern.DenselyDashed;\n\n// Remove labels on minor ticks, otherwise there is a lot of tick label overlap\nmyPlot.RenderManager.RenderStarting \u002B= (s, e) =\u003E\n{\n    Tick[] ticks = myPlot.Axes.Bottom.TickGenerator.Ticks;\n    for (int i = 0; i \u003C ticks.Length; i\u002B\u002B)\n    {\n        if (ticks[i].IsMajor)\n        {\n            continue;\n        }\n\n        ticks[i] = new Tick(ticks[i].Position, \u0022\u0022, ticks[i].IsMajor);\n    }\n};\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "DateTimeAxisFixedIntervalTicks",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#DateTimeAxisFixedIntervalTicks",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/DateTimeAxisFixedIntervalTicks",
      "imageUrl": "/cookbook/5.0/images/DateTimeAxisFixedIntervalTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Floating Axis",
      "description": "A floating or centered axis may be realized by hiding the default axes which appear at the edges of the plot and creating a new floating axis and adding it to the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create floating X and Y axes using one of the existing axes for reference\nScottPlot.Plottables.FloatingAxis floatingX = new(myPlot.Axes.Bottom);\nScottPlot.Plottables.FloatingAxis floatingY = new(myPlot.Axes.Left);\n\n// hide the default axes and add the custom ones to the plot\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\nmyPlot.Add.Plottable(floatingX);\nmyPlot.Add.Plottable(floatingY);\n\n// add sample data last so it appears on top\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "FloatingAxis",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#FloatingAxis",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/FloatingAxis",
      "imageUrl": "/cookbook/5.0/images/FloatingAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Grid Line Style",
      "description": "Grid lines have many options to allow extensive customization.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Grid.LineColor = Colors.Blue.WithAlpha(.2);\nmyPlot.Grid.LinePattern = LinePattern.Dotted;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "CustomGridLineStyle",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#CustomGridLineStyle",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/CustomGridLineStyle",
      "imageUrl": "/cookbook/5.0/images/CustomGridLineStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Image Axis Label",
      "description": "For cases where axis label font styling does not provide the desired level of customization, a bitmap image may be displayed as an axis label. This strategy allows rich text to be realized using any third party tool that can render that text as a bitmap. It also enables users to place icons or images in their axis labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// This array holds the bytes of a bitmap. Here it\u0027s generated,\n// but it could be a byte array read from a bitmap file on disk.\nbyte[] bytes1 = SampleImages.NoisyText(\u0022Horiz\u0022, 150, 50).GetImageBytes();\nbyte[] bytes2 = SampleImages.NoisyText(\u0022Vert\u0022, 150, 50).GetImageBytes();\n\n// Create a ScottPlot.Image from the bitmap bytes\nScottPlot.Image img1 = new(bytes1);\nScottPlot.Image img2 = new(bytes2);\n\n// Display the image for the bottom axis label\nmyPlot.Axes.Bottom.Label.Image = img1;\nmyPlot.Axes.Left.Label.Image = img2;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "ImageAxisLabel",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#ImageAxisLabel",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/ImageAxisLabel",
      "imageUrl": "/cookbook/5.0/images/ImageAxisLabel.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Axis and Ticks",
      "name": "Multiplier Notation",
      "description": "Numeric tick labels may be displayed using multiplier notation (where tick labels are displayed using scientific notation with the eponent displayed in the corner of the plot). A helper method is available to set-up multiplier notation with a single statement, but users can interact with the object this method returns (not shown here) or inspect the code inside of that method to learn how to achieve enhanced customization abilities.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data with extremely large values\ndouble[] xs = Generate.RandomSample(50, -1e10, 1e10);\ndouble[] ys = Generate.RandomSample(50, -1e20, 1e20);\nmyPlot.Add.Scatter(xs, ys);\n\n// enable multiplier notation on both primary axes\nmyPlot.Axes.SetupMultiplierNotation(myPlot.Axes.Left);\nmyPlot.Axes.SetupMultiplierNotation(myPlot.Axes.Bottom);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisAndTicks",
      "recipeClassName": "MultiplierNotation",
      "anchorUrl": "/cookbook/5.0/AxisAndTicks#MultiplierNotation",
      "categoryUrl": "/cookbook/5.0/AxisAndTicks",
      "recipeUrl": "/cookbook/5.0/AxisAndTicks/MultiplierNotation",
      "imageUrl": "/cookbook/5.0/images/MultiplierNotation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/AxisRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Hide Grid",
      "description": "Grid lines can be hidden.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "HideGrid",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#HideGrid",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/HideGrid",
      "imageUrl": "/cookbook/5.0/images/HideGrid.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Grid Customization",
      "description": "Grid lines can be customized. Custom grid systems can be created to give developers full control of grid rendering, but the default grid can be interacted with to customize its appearance.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Grid.MajorLineColor = Colors.Green.WithOpacity(.3);\nmyPlot.Grid.MajorLineWidth = 2;\n\nmyPlot.Grid.MinorLineColor = Colors.Gray.WithOpacity(.1);\nmyPlot.Grid.MinorLineWidth = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridCustom",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridCustom",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridCustom",
      "imageUrl": "/cookbook/5.0/images/GridCustom.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Axis Specific Grid Customization",
      "description": "Axis-specific styling properties are available for extensive axis-specific customization of grid line styling.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Color = Colors.Magenta.WithAlpha(.1);\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Width = 5;\n\nmyPlot.Grid.YAxisStyle.MajorLineStyle.Color = Colors.Green.WithAlpha(.3);\nmyPlot.Grid.YAxisStyle.MajorLineStyle.Width = 2;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridCustomAxis",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridCustomAxis",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridCustomAxis",
      "imageUrl": "/cookbook/5.0/images/GridCustomAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Grid Above Data",
      "description": "Grid lines are typically drawn beneath data, but grids can be configured to render on top of plottables too.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig = myPlot.Add.Signal(ScottPlot.Generate.Sin());\nsig.LineWidth = 10;\n\nmyPlot.Grid.MajorLineWidth = 3;\nmyPlot.Grid.MajorLineColor = Colors.Black.WithAlpha(.2);\nmyPlot.Grid.IsBeneathPlottables = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridAbove",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridAbove",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridAbove",
      "imageUrl": "/cookbook/5.0/images/GridAbove.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Grid with Top Axis",
      "description": "Grid lines use the bottom and left axes by default, but this behavior can be customized for plots which use other axes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig = myPlot.Add.Signal(ScottPlot.Generate.Sin());\nsig.Axes.XAxis = myPlot.Axes.Top;\nmyPlot.Grid.XAxis = myPlot.Axes.Top;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridWithTopAxis",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridWithTopAxis",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridWithTopAxis",
      "imageUrl": "/cookbook/5.0/images/GridWithTopAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Grid Fill Colors",
      "description": "Regions between alternating pairs of major grid lines may be filled with a color specified by the user",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// shade regions between major grid lines\nmyPlot.Grid.XAxisStyle.FillColor1 = Colors.Gray.WithOpacity(0.1);\nmyPlot.Grid.XAxisStyle.FillColor2 = Colors.Gray.WithOpacity(0.2);\nmyPlot.Grid.YAxisStyle.FillColor1 = Colors.Gray.WithOpacity(0.1);\nmyPlot.Grid.YAxisStyle.FillColor2 = Colors.Gray.WithOpacity(0.2);\n\n// show minor grid lines too\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Width = 1;\nmyPlot.Grid.YAxisStyle.MinorLineStyle.Width = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridAlternatingColors",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridAlternatingColors",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridAlternatingColors",
      "imageUrl": "/cookbook/5.0/images/GridAlternatingColors.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Grids",
      "name": "Grid Fill Color in Dark Mode",
      "description": "Grid and plot styling can be customize to achieve a pleasing effect in dark mode",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a green data line\nvar sig = myPlot.Add.Signal(Generate.SquareWaveFromSines());\nsig.LineWidth = 3;\nsig.Color = new(\u0022#2b9433\u0022);\nsig.AlwaysUseLowDensityMode = true;\n\n// give the plot a dark background with light text\nmyPlot.FigureBackground.Color = new(\u0022#1c1c1e\u0022);\nmyPlot.Axes.Color(new(\u0022#888888\u0022));\n\n// shade regions between major grid lines\nmyPlot.Grid.XAxisStyle.FillColor1 = new Color(\u0022#888888\u0022).WithAlpha(10);\nmyPlot.Grid.YAxisStyle.FillColor1 = new Color(\u0022#888888\u0022).WithAlpha(10);\n\n// set grid line colors\nmyPlot.Grid.XAxisStyle.MajorLineStyle.Color = Colors.White.WithAlpha(15);\nmyPlot.Grid.YAxisStyle.MajorLineStyle.Color = Colors.White.WithAlpha(15);\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Color = Colors.White.WithAlpha(5);\nmyPlot.Grid.YAxisStyle.MinorLineStyle.Color = Colors.White.WithAlpha(5);\n\n// enable minor grid lines by defining a positive width\nmyPlot.Grid.XAxisStyle.MinorLineStyle.Width = 1;\nmyPlot.Grid.YAxisStyle.MinorLineStyle.Width = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingGrids",
      "recipeClassName": "GridAlternatingDarkMode",
      "anchorUrl": "/cookbook/5.0/CustomizingGrids#GridAlternatingDarkMode",
      "categoryUrl": "/cookbook/5.0/CustomizingGrids",
      "recipeUrl": "/cookbook/5.0/CustomizingGrids/GridAlternatingDarkMode",
      "imageUrl": "/cookbook/5.0/images/GridAlternatingDarkMode.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/GridRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Layout",
      "name": "Frameless Plot",
      "description": "How to create a plot containing only the data area and no axes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// make the data area cover the full figure\nmyPlot.Layout.Frameless();\n\n// set the data area background so we can observe its size\nmyPlot.DataBackground.Color = Colors.WhiteSmoke;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Layout",
      "recipeClassName": "Frameless",
      "anchorUrl": "/cookbook/5.0/Layout#Frameless",
      "categoryUrl": "/cookbook/5.0/Layout",
      "recipeUrl": "/cookbook/5.0/Layout/Frameless",
      "imageUrl": "/cookbook/5.0/images/Frameless.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/LayoutRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Layout",
      "name": "Fixed Padding",
      "description": "The plot can be arranged to achieve a fixed amount of padding on each side of the data area",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add sample data to the plot\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// use a fixed amount of of pixel padding on each side\nPixelPadding padding = new(100, 50, 100, 50);\nmyPlot.Layout.Fixed(padding);\n\n// darken the figure background so we can observe its dimensions\nmyPlot.FigureBackground.Color = Colors.LightBlue;\nmyPlot.DataBackground.Color = Colors.White;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Layout",
      "recipeClassName": "FixedPadding",
      "anchorUrl": "/cookbook/5.0/Layout#FixedPadding",
      "categoryUrl": "/cookbook/5.0/Layout",
      "recipeUrl": "/cookbook/5.0/Layout/FixedPadding",
      "imageUrl": "/cookbook/5.0/images/FixedPadding.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/LayoutRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Layout",
      "name": "Fixed Rectangle",
      "description": "The plot can be arranged so the data is drawn inside a fixed rectangle defined in pixel units",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add sample data to the plot\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// set the data area to render inside a fixed rectangle\nPixelSize size = new(300, 200);\nPixel offset = new(50, 50);\nPixelRect rect = new(size, offset);\nmyPlot.Layout.Fixed(rect);\n\n// darken the figure background so we can observe its dimensions\nmyPlot.FigureBackground.Color = Colors.LightBlue;\nmyPlot.DataBackground.Color = Colors.White;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Layout",
      "recipeClassName": "FixedRectangle",
      "anchorUrl": "/cookbook/5.0/Layout#FixedRectangle",
      "categoryUrl": "/cookbook/5.0/Layout",
      "recipeUrl": "/cookbook/5.0/Layout/FixedRectangle",
      "imageUrl": "/cookbook/5.0/images/FixedRectangle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/LayoutRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Legend Quickstart",
      "description": "Many plottables have a Label property that can be set so they appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022Cos\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendQuickstart",
      "anchorUrl": "/cookbook/5.0/Legend#LegendQuickstart",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendQuickstart",
      "imageUrl": "/cookbook/5.0/images/LegendQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Right To Left (RTL) text support",
      "description": "Enabling Right To Left (RTL) support correctly renders text in RTL languages.",
      "source": "ScottPlot.Plot myPlot = new();\n\nLabelStyle.RTLSupport = true; // enable right-to-left text support\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022\u05D0\u05DE\u05EA\u0022; // example right-to-left text\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022English\u0022; // example left-to-right text\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendWithRTLText",
      "anchorUrl": "/cookbook/5.0/Legend#LegendWithRTLText",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendWithRTLText",
      "imageUrl": "/cookbook/5.0/images/LegendWithRTLText.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Manual Legend Items",
      "description": "Legends may be constructed manually.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\nmyPlot.Legend.IsVisible = true;\n\nLegendItem item1 = new()\n{\n    LineColor = Colors.Magenta,\n    MarkerFillColor = Colors.Magenta,\n    MarkerLineColor = Colors.Magenta,\n    LineWidth = 2,\n    LabelText = \u0022Alpha\u0022\n};\n\nLegendItem item2 = new()\n{\n    LineColor = Colors.Green,\n    MarkerFillColor = Colors.Green,\n    MarkerLineColor = Colors.Green,\n    LineWidth = 4,\n    LabelText = \u0022Beta\u0022\n};\n\nLegendItem[] items = { item1, item2 };\nmyPlot.ShowLegend(items);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "ManualLegend",
      "anchorUrl": "/cookbook/5.0/Legend#ManualLegend",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/ManualLegend",
      "imageUrl": "/cookbook/5.0/images/ManualLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Legend Customization",
      "description": "Access the Legend object directly for advanced customization options.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022Cos\u0022;\n\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Alignment = Alignment.UpperCenter;\n\nmyPlot.Legend.OutlineColor = Colors.Navy;\nmyPlot.Legend.OutlineWidth = 5;\nmyPlot.Legend.BackgroundColor = Colors.LightBlue;\n\nmyPlot.Legend.ShadowColor = Colors.Blue.WithOpacity(.2);\nmyPlot.Legend.ShadowOffset = new(10, 10);\n\nmyPlot.Legend.FontSize = 32;\nmyPlot.Legend.FontName = Fonts.Serif;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendStyle",
      "anchorUrl": "/cookbook/5.0/Legend#LegendStyle",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendStyle",
      "imageUrl": "/cookbook/5.0/images/LegendStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Legend Orientation",
      "description": "Legend items may be arranged horizontally instead of vertically",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51, phase: .2));\nvar sig2 = myPlot.Add.Signal(Generate.Sin(51, phase: .4));\nvar sig3 = myPlot.Add.Signal(Generate.Sin(51, phase: .6));\n\nsig1.LegendText = \u0022Signal 1\u0022;\nsig2.LegendText = \u0022Signal 2\u0022;\nsig3.LegendText = \u0022Signal 3\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperLeft, Orientation.Horizontal);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendOrientation",
      "anchorUrl": "/cookbook/5.0/Legend#LegendOrientation",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendOrientation",
      "imageUrl": "/cookbook/5.0/images/LegendOrientation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Legend Wrapping",
      "description": "Legend items may wrap to improve display for a large number of items",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 1; i \u003C= 10; i\u002B\u002B)\n{\n    double[] data = Generate.Sin(51, phase: .02 * i);\n    var sig = myPlot.Add.Signal(data);\n    sig.LegendText = $\u0022#{i}\u0022;\n}\n\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Orientation = Orientation.Horizontal;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendWrapping",
      "anchorUrl": "/cookbook/5.0/Legend#LegendWrapping",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendWrapping",
      "imageUrl": "/cookbook/5.0/images/LegendWrapping.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Multiple Legends",
      "description": "Multiple legends may be added to a plot",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 1; i \u003C= 5; i\u002B\u002B)\n{\n    double[] data = Generate.Sin(51, phase: .02 * i);\n    var sig = myPlot.Add.Signal(data);\n    sig.LegendText = $\u0022Signal #{i}\u0022;\n    sig.LineWidth = 2;\n}\n\n// default legend\nvar leg1 = myPlot.ShowLegend();\nleg1.Alignment = Alignment.LowerRight;\nleg1.Orientation = Orientation.Vertical;\n\n// additional legend\nvar leg2 = myPlot.Add.Legend();\nleg2.Alignment = Alignment.UpperCenter;\nleg2.Orientation = Orientation.Horizontal;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendMultiple",
      "anchorUrl": "/cookbook/5.0/Legend#LegendMultiple",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendMultiple",
      "imageUrl": "/cookbook/5.0/images/LegendMultiple.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Legend Outside the Plot",
      "description": "Use the ShowLegend() overload that accepts an Edge to display the legend outside the data area.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\n\nsig1.LegendText = \u0022Sine\u0022;\nsig2.LegendText = \u0022Cosine\u0022;\n\nmyPlot.ShowLegend(Edge.Right);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendOutside",
      "anchorUrl": "/cookbook/5.0/Legend#LegendOutside",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendOutside",
      "imageUrl": "/cookbook/5.0/images/LegendOutside.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Automatic Legend Items Custom Font",
      "description": "Use custom fonts from TTF files in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nFonts.AddFontFile(\u0022Alumni Sans\u0022, Path.Combine(GetFontsBasePath(), @\u0022AlumniSans/AlumniSans-Regular.ttf\u0022), bold: false, italic: false);\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022Cos\u0022;\n\nmyPlot.Legend.FontName = \u0022Alumni Sans\u0022;\nmyPlot.Legend.FontSize = 48;\nmyPlot.Legend.FontColor = Colors.Red;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendCustomFontAutomaticItems",
      "anchorUrl": "/cookbook/5.0/Legend#LegendCustomFontAutomaticItems",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendCustomFontAutomaticItems",
      "imageUrl": "/cookbook/5.0/images/LegendCustomFontAutomaticItems.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Legends",
      "name": "Manual Legend Items Custom Font",
      "description": "Use custom fonts from TTF files in the legend (manual legend items).",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Add a font file to use its typeface for fonts with a given name\nFonts.AddFontFile(\n    name: \u0022Alumni Sans\u0022,\n    path: Path.Combine(Paths.FontFolder, @\u0022AlumniSans/AlumniSans-Regular.ttf\u0022));\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022Sin\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022Cos\u0022;\n\nmyPlot.Legend.ManualItems.Add(new LegendItem()\n{\n    LabelText = \u0022Custom\u0022,\n    LabelFontName = \u0022Alumni Sans\u0022,\n    LabelFontSize = 18,\n    LabelFontColor = Colors.Magenta,\n    LinePattern = LinePattern.Dotted,\n    LineWidth = 2,\n    LineColor = Colors.Magenta,\n});\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Legend",
      "recipeClassName": "LegendCustomFontManualItems",
      "anchorUrl": "/cookbook/5.0/Legend#LegendCustomFontManualItems",
      "categoryUrl": "/cookbook/5.0/Legend",
      "recipeUrl": "/cookbook/5.0/Legend/LegendCustomFontManualItems",
      "imageUrl": "/cookbook/5.0/images/LegendCustomFontManualItems.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Legend.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Miscellaneous",
      "name": "Data Area Background Image",
      "description": "An image can be used for the background of the data area.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig1.LineWidth = 3;\nsig2.LineWidth = 3;\n\n// One could load an image from a file...\n// Image bgImage = new(\u0022background.png\u0022);\n\n// But in this example we will use a sample image:\nImage bgImage = SampleImages.ScottPlotLogo();\nmyPlot.DataBackground.Image = bgImage;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Miscellaneous",
      "recipeClassName": "DataBackgroundImage",
      "anchorUrl": "/cookbook/5.0/Miscellaneous#DataBackgroundImage",
      "categoryUrl": "/cookbook/5.0/Miscellaneous",
      "recipeUrl": "/cookbook/5.0/Miscellaneous/DataBackgroundImage",
      "imageUrl": "/cookbook/5.0/images/DataBackgroundImage.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Miscellaneous.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Miscellaneous",
      "name": "Figure Background Image",
      "description": "An image can be used for the background of a figure.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\n\n// One could load an image from a file...\n// Image bgImage = new(\u0022background.png\u0022);\n\n// But in this example we will use a sample image:\nImage bgImage = SampleImages.MonaLisa();\nmyPlot.FigureBackground.Image = bgImage;\n\n// Color the axes and data so they stand out against the dark background\nmyPlot.Axes.Color(Colors.White);\nsig1.Color = sig1.Color.Lighten(.2);\nsig2.Color = sig2.Color.Lighten(.2);\nsig1.LineWidth = 3;\nsig2.LineWidth = 3;\n\n// Shade the data area to make it stand out\nmyPlot.DataBackground.Color = Colors.Black.WithAlpha(.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Miscellaneous",
      "recipeClassName": "FigureBackgroundImage",
      "anchorUrl": "/cookbook/5.0/Miscellaneous#FigureBackgroundImage",
      "categoryUrl": "/cookbook/5.0/Miscellaneous",
      "recipeUrl": "/cookbook/5.0/Miscellaneous/FigureBackgroundImage",
      "imageUrl": "/cookbook/5.0/images/FigureBackgroundImage.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Miscellaneous.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Miscellaneous",
      "name": "Color Interpolation",
      "description": "Colors can be mixed to createa range of colors. This strategy uses linear RGB interpolation.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C= 10; i\u002B\u002B)\n{\n    double fraction = (double)i / 10;\n    double x = i;\n    double y = Math.Sin(Math.PI * 2 * fraction);\n    var circle = myPlot.Add.Circle(x, y, 2);\n    circle.FillColor = Colors.Blue.MixedWith(Colors.Green, fraction);\n    circle.LineColor = Colors.Black.WithAlpha(.5);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Miscellaneous",
      "recipeClassName": "ColorInterpolation",
      "anchorUrl": "/cookbook/5.0/Miscellaneous#ColorInterpolation",
      "categoryUrl": "/cookbook/5.0/Miscellaneous",
      "recipeUrl": "/cookbook/5.0/Miscellaneous/ColorInterpolation",
      "imageUrl": "/cookbook/5.0/images/ColorInterpolation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Miscellaneous.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Miscellaneous",
      "name": "Custom Font Files",
      "description": "Users can apply custom typefaces by loaded from font files.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Add a font file to use its typeface for fonts with a given name\nFonts.AddFontFile(\n    name: \u0022Alumni Sans\u0022,\n    path: Path.Combine(Paths.FontFolder, @\u0022AlumniSans/AlumniSans-Regular.ttf\u0022));\n\n// plot sample data\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51));\nsig1.LegendText = \u0022Sin\u0022;\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51));\nsig2.LegendText = \u0022Cos\u0022;\n\n// custom fonts may be used in legends\nmyPlot.Legend.FontName = \u0022Alumni Sans\u0022;\nmyPlot.Legend.FontSize = 24;\n\n// custom fonts may be used in plottables that contain text\nvar text = myPlot.Add.Text(\u0022Hello\u0022, 25, 0.5);\ntext.LabelStyle.FontName = \u0022Alumni Sans\u0022;\ntext.LabelStyle.FontSize = 24;\n\n// Custom fonts may be used for axis labels.\n// Note that bold is disabled because support for\n// bold would require loading an additional font file.\nmyPlot.Title(\u0022Custom Font Demo\u0022);\nmyPlot.Axes.Title.Label.FontName = \u0022Alumni Sans\u0022;\nmyPlot.Axes.Title.Label.FontSize = 36;\nmyPlot.Axes.Title.Label.Bold = false;\n\nmyPlot.XLabel(\u0022Horizontal Axis\u0022);\nmyPlot.Axes.Bottom.Label.FontName = \u0022Alumni Sans\u0022;\nmyPlot.Axes.Bottom.Label.FontSize = 24;\nmyPlot.Axes.Bottom.Label.Bold = false;\n\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\nmyPlot.Axes.Left.Label.FontName = \u0022Alumni Sans\u0022;\nmyPlot.Axes.Left.Label.FontSize = 24;\nmyPlot.Axes.Left.Label.Bold = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Miscellaneous",
      "recipeClassName": "CustomFontFiles",
      "anchorUrl": "/cookbook/5.0/Miscellaneous#CustomFontFiles",
      "categoryUrl": "/cookbook/5.0/Miscellaneous",
      "recipeUrl": "/cookbook/5.0/Miscellaneous/CustomFontFiles",
      "imageUrl": "/cookbook/5.0/images/CustomFontFiles.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Miscellaneous.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiple Axes",
      "name": "Right Axis",
      "description": "New plots have one axis on every side. Axes on the right and top are invisible by default. To use the right axis, make it visible, then tell a plottable to use it. ",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot data with very different scales\nvar sig1 = myPlot.Add.Signal(Generate.Sin(mult: 0.01));\nvar sig2 = myPlot.Add.Signal(Generate.Cos(mult: 100));\n\n// tell each signal plot to use a different axis\nsig1.Axes.YAxis = myPlot.Axes.Left;\nsig2.Axes.YAxis = myPlot.Axes.Right;\n\n// add additional styling options to each axis\nmyPlot.Axes.Left.Label.Text = \u0022Left Axis\u0022;\nmyPlot.Axes.Right.Label.Text = \u0022Right Axis\u0022;\nmyPlot.Axes.Left.Label.ForeColor = sig1.Color;\nmyPlot.Axes.Right.Label.ForeColor = sig2.Color;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "MultiAxis",
      "recipeClassName": "RightAxis",
      "anchorUrl": "/cookbook/5.0/MultiAxis#RightAxis",
      "categoryUrl": "/cookbook/5.0/MultiAxis",
      "recipeUrl": "/cookbook/5.0/MultiAxis/RightAxis",
      "imageUrl": "/cookbook/5.0/images/RightAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiAxis.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiple Axes",
      "name": "Multi-Axis",
      "description": "Additional axes may be added to plots. Plottables are displayed using the coordinate system of the primary axes by default, but any plottable can be displayed using any X and Y axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plottables use the standard X and Y axes by default\nvar sig1 = myPlot.Add.Signal(Generate.Sin(51, mult: 0.01));\nsig1.Axes.XAxis = myPlot.Axes.Bottom; // standard X axis\nsig1.Axes.YAxis = myPlot.Axes.Left; // standard Y axis\nmyPlot.Axes.Left.Label.Text = \u0022Primary Y Axis\u0022;\n\n// create a second axis and add it to the plot\nvar yAxis2 = myPlot.Axes.AddLeftAxis();\n\n// add a new plottable and tell it to use the custom Y axis\nvar sig2 = myPlot.Add.Signal(Generate.Cos(51, mult: 100));\nsig2.Axes.XAxis = myPlot.Axes.Bottom; // standard X axis\nsig2.Axes.YAxis = yAxis2; // custom Y axis\nyAxis2.LabelText = \u0022Secondary Y Axis\u0022;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "MultiAxis",
      "recipeClassName": "MultiAxisQuickstart",
      "anchorUrl": "/cookbook/5.0/MultiAxis#MultiAxisQuickstart",
      "categoryUrl": "/cookbook/5.0/MultiAxis",
      "recipeUrl": "/cookbook/5.0/MultiAxis/MultiAxisQuickstart",
      "imageUrl": "/cookbook/5.0/images/MultiAxisQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiAxis.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiple Axes",
      "name": "Right Axis Only",
      "description": "The default Y axis is the one on the left of the plot, but the right Y axis may be used instead.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a plottable to the plot\nvar sig = myPlot.Add.Signal(Generate.Sin());\n\n// configure the plottable to use the right Y axis\nsig.Axes.YAxis = myPlot.Axes.Right;\n\n// configure the grid to display ticks from the right Y axis\nmyPlot.Grid.YAxis = myPlot.Axes.Right;\n\n// style the right axis as desired\nmyPlot.Axes.Right.Label.Text = \u0022Hello, Right Axis\u0022;\nmyPlot.Axes.Right.Label.FontSize = 18;\n\n// it is recommended to remove tick generators from unused axes\nmyPlot.Axes.Left.RemoveTickGenerator();\n\n// pass in the custom axis when calling SetLimits()\nmyPlot.Axes.SetLimitsY(bottom: -2, top: 2, yAxis: myPlot.Axes.Right);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "MultiAxis",
      "recipeClassName": "RightAxisOnly",
      "anchorUrl": "/cookbook/5.0/MultiAxis#RightAxisOnly",
      "categoryUrl": "/cookbook/5.0/MultiAxis",
      "recipeUrl": "/cookbook/5.0/MultiAxis/RightAxisOnly",
      "imageUrl": "/cookbook/5.0/images/RightAxisOnly.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiAxis.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiplot",
      "name": "Multiplot Quickstart",
      "description": "Use the Multiplot class to create figures with multiple subplots.",
      "source": "ScottPlot.Multiplot multiplot = new();\n\n// configure the multiplot to use 2 subplots\nmultiplot.AddPlots(2);\nPlot plot1 = multiplot.Subplots.GetPlot(0);\nPlot plot2 = multiplot.Subplots.GetPlot(1);\n\n// add sample data to each subplot\nplot1.Add.Signal(Generate.Sin());\nplot2.Add.Signal(Generate.Cos());\n\nmultiplot.SavePng(\u0022demo.png\u0022, 400, 400);\n",
      "categoryClassName": "MultiplotRecipes",
      "recipeClassName": "MultiplotQuickstart",
      "anchorUrl": "/cookbook/5.0/MultiplotRecipes#MultiplotQuickstart",
      "categoryUrl": "/cookbook/5.0/MultiplotRecipes",
      "recipeUrl": "/cookbook/5.0/MultiplotRecipes/MultiplotQuickstart",
      "imageUrl": "/cookbook/5.0/images/MultiplotQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiplotRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiplot",
      "name": "Multiplot Columns",
      "description": "The Multiplot\u0027s Layout property may be customized to achieve a column layout.",
      "source": "ScottPlot.Multiplot multiplot = new();\n\n// configure the multiplot to use 2 subplots\nmultiplot.AddPlots(2);\nPlot plot1 = multiplot.Subplots.GetPlot(0);\nPlot plot2 = multiplot.Subplots.GetPlot(1);\n\n// add sample data to each subplot\nplot1.Add.Signal(Generate.Sin());\nplot2.Add.Signal(Generate.Cos());\n\n// apply a custom layout\nmultiplot.Layout = new ScottPlot.MultiplotLayouts.Columns();\n\nmultiplot.SavePng(\u0022demo.png\u0022, 400, 400);\n",
      "categoryClassName": "MultiplotRecipes",
      "recipeClassName": "MultiplotColumns",
      "anchorUrl": "/cookbook/5.0/MultiplotRecipes#MultiplotColumns",
      "categoryUrl": "/cookbook/5.0/MultiplotRecipes",
      "recipeUrl": "/cookbook/5.0/MultiplotRecipes/MultiplotColumns",
      "imageUrl": "/cookbook/5.0/images/MultiplotColumns.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiplotRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiplot",
      "name": "Multiplot Grid",
      "description": "The Multiplot\u0027s Layout property may be customized to achieve a grid layout.",
      "source": "ScottPlot.Multiplot multiplot = new();\n\n// configure the multiplot to have 6 subplots\nmultiplot.AddPlots(6);\n\n// add sample data to each subplot\nfor (int i = 0; i \u003C multiplot.Subplots.Count; i\u002B\u002B)\n{\n    Plot plot = multiplot.GetPlot(i);\n    double[] ys = Generate.Sin(oscillations: i \u002B 1);\n    plot.Add.Signal(ys);\n}\n\n// configure the multiplot to use a grid layout\nmultiplot.Layout = new ScottPlot.MultiplotLayouts.Grid(rows: 2, columns: 3);\n\nmultiplot.SavePng(\u0022demo.png\u0022, 400, 400);\n",
      "categoryClassName": "MultiplotRecipes",
      "recipeClassName": "MultiplotGrid",
      "anchorUrl": "/cookbook/5.0/MultiplotRecipes#MultiplotGrid",
      "categoryUrl": "/cookbook/5.0/MultiplotRecipes",
      "recipeUrl": "/cookbook/5.0/MultiplotRecipes/MultiplotGrid",
      "imageUrl": "/cookbook/5.0/images/MultiplotGrid.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiplotRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Multiplot",
      "name": "Multiplot Custom Layout",
      "description": "The Multiplot\u0027s Layout property may be configured to achieve a fully custom layout.",
      "source": "ScottPlot.Multiplot multiplot = new();\n\n// configure the multiplot to have 3 subplots\nmultiplot.AddPlots(3);\n\n// add sample data to each subplot\nfor (int i = 0; i \u003C multiplot.Subplots.Count; i\u002B\u002B)\n{\n    Plot plot = multiplot.GetPlot(i);\n    double[] ys = Generate.Sin(oscillations: i \u002B 1);\n    plot.Add.Signal(ys);\n}\n\n// create a custom grid layout and define the position of each subplot\nScottPlot.MultiplotLayouts.CustomGrid gridLayout = new();\ngridLayout.Set(multiplot.GetPlot(0), new GridCell(0, 0, 2, 1)); // double wide\ngridLayout.Set(multiplot.GetPlot(1), new GridCell(1, 0, 2, 2)); // bottom left\ngridLayout.Set(multiplot.GetPlot(2), new GridCell(1, 1, 2, 2)); // bottom right\n\n// user the custom layout in our multiplot\nmultiplot.Layout = gridLayout;\n\nmultiplot.SavePng(\u0022demo.png\u0022, 400, 400);\n",
      "categoryClassName": "MultiplotRecipes",
      "recipeClassName": "MultiplotCustom",
      "anchorUrl": "/cookbook/5.0/MultiplotRecipes#MultiplotCustom",
      "categoryUrl": "/cookbook/5.0/MultiplotRecipes",
      "recipeUrl": "/cookbook/5.0/MultiplotRecipes/MultiplotCustom",
      "imageUrl": "/cookbook/5.0/images/MultiplotCustom.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/MultiplotRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Plottable Management",
      "name": "Add Plottables Manually",
      "description": "Although the Plot.Add class has many helpful methods for creating plottable objects and adding them to the plot, users can instantiate plottable objects themselves and use Add.Plottable() to place it on the plot. This strategy allows users to create their own plottables (implementing IPlottable) with custom appearance or behavior.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a plottable and modify it as desired\nScottPlot.Plottables.LinePlot line = new()\n{\n    Start = new Coordinates(1, 2),\n    End = new Coordinates(3, 4),\n};\n\n// add the custom plottable to the plot\nmyPlot.Add.Plottable(line);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PlottableManagement",
      "recipeClassName": "AddPlottablesManually",
      "anchorUrl": "/cookbook/5.0/PlottableManagement#AddPlottablesManually",
      "categoryUrl": "/cookbook/5.0/PlottableManagement",
      "recipeUrl": "/cookbook/5.0/PlottableManagement/AddPlottablesManually",
      "imageUrl": "/cookbook/5.0/images/AddPlottablesManually.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/PlottableManagement.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Plottable Management",
      "name": "Clearing Plots",
      "description": "Use Clear() to remove all plottables.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add plottables\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// remove all plottables\nmyPlot.Clear();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PlottableManagement",
      "recipeClassName": "Clear",
      "anchorUrl": "/cookbook/5.0/PlottableManagement#Clear",
      "categoryUrl": "/cookbook/5.0/PlottableManagement",
      "recipeUrl": "/cookbook/5.0/PlottableManagement/Clear",
      "imageUrl": "/cookbook/5.0/images/Clear.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/PlottableManagement.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Plottable Management",
      "name": "Removing a Plottable",
      "description": "Individual items may be removed from the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add plottables\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\n\n// remove a specific plottable\nmyPlot.Remove(sig1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PlottableManagement",
      "recipeClassName": "Remove",
      "anchorUrl": "/cookbook/5.0/PlottableManagement#Remove",
      "categoryUrl": "/cookbook/5.0/PlottableManagement",
      "recipeUrl": "/cookbook/5.0/PlottableManagement/Remove",
      "imageUrl": "/cookbook/5.0/images/Remove.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/PlottableManagement.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Plottable Management",
      "name": "Removing all Plottables of a Type",
      "description": "All plottables of a given type may be removed from a plot with a single command.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Scatter(Generate.Consecutive(51), Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos());\nmyPlot.Add.HorizontalLine(0.75);\n\n// remove every instance of a specific plottable type\nmyPlot.Remove\u003CScottPlot.Plottables.Signal\u003E();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PlottableManagement",
      "recipeClassName": "RemoveAll",
      "anchorUrl": "/cookbook/5.0/PlottableManagement#RemoveAll",
      "categoryUrl": "/cookbook/5.0/PlottableManagement",
      "recipeUrl": "/cookbook/5.0/PlottableManagement/RemoveAll",
      "imageUrl": "/cookbook/5.0/images/RemoveAll.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/PlottableManagement.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Plottable Management",
      "name": "Moving plottables",
      "description": "The plottable list contains all plottables which will be rendered in order. Helper methods are available to move plottables to the front.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinateRect wideRect = new(-2, 2, -1, 1);\nCoordinateRect tallRect = new(-1, 1, -2, 2);\n\n// rect1 is added first, so plottables added later will appear on top\nvar rect1 = myPlot.Add.Rectangle(wideRect);\nvar rect2 = myPlot.Add.Rectangle(tallRect);\n\n// plottables may be moved to the front so they always appear on top\nmyPlot.MoveToTop(rect1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PlottableManagement",
      "recipeClassName": "ChangeOrder",
      "anchorUrl": "/cookbook/5.0/PlottableManagement#ChangeOrder",
      "categoryUrl": "/cookbook/5.0/PlottableManagement",
      "recipeUrl": "/cookbook/5.0/PlottableManagement/ChangeOrder",
      "imageUrl": "/cookbook/5.0/images/ChangeOrder.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/PlottableManagement.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Quickstart",
      "name": "Scatter Plot",
      "description": "A scatter plot can be used to display X/Y data points.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample data\ndouble[] dataX = { 1, 2, 3, 4, 5 };\ndouble[] dataY = { 1, 4, 9, 16, 25 };\n\n// add a scatter plot to the plot\nmyPlot.Add.Scatter(dataX, dataY);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartScatter",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartScatter",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartScatter",
      "imageUrl": "/cookbook/5.0/images/QuickstartScatter.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Quickstart.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Quickstart",
      "name": "Customizing Plottables",
      "description": "Most methods which add items to plots return the item the was added. Save the object that is returned and set its properties to customize it.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample data\ndouble[] dataX = { 1, 2, 3, 4, 5 };\ndouble[] dataY = { 1, 4, 9, 16, 25 };\n\n// add a scatter plot to the plot (and save what is returned)\nvar myScatter = myPlot.Add.Scatter(dataX, dataY);\n\n// customize the scatter plot\nmyScatter.Color = Colors.Green;\nmyScatter.LineWidth = 5;\nmyScatter.MarkerSize = 15;\nmyScatter.MarkerShape = MarkerShape.FilledDiamond;\nmyScatter.LinePattern = LinePattern.DenselyDashed;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "CustomizingPlottables",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#CustomizingPlottables",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/CustomizingPlottables",
      "imageUrl": "/cookbook/5.0/images/CustomizingPlottables.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Quickstart.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Quickstart",
      "name": "Signal Plot",
      "description": "Signal plots display Y values at evenly spaced X positions. Signal plots should be used instead of Scatter plots whenever possible.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample data\ndouble[] sin = Generate.Sin(51);\n\n// add a signal plot to the plot\nmyPlot.Add.Signal(sin);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartSignal",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartSignal",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartSignal",
      "imageUrl": "/cookbook/5.0/images/QuickstartSignal.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Quickstart.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Quickstart",
      "name": "Signal Plot Performance",
      "description": "Signal plots are so performant that they can interactively display millions of data points in real time.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample data with one million points\ndouble[] data = Generate.RandomWalk(1_000_000);\n\n// add a signal plot to the plot\nmyPlot.Add.Signal(data);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "SignalPerformance",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#SignalPerformance",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/SignalPerformance",
      "imageUrl": "/cookbook/5.0/images/SignalPerformance.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Quickstart.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Quickstart",
      "name": "Axis Labels",
      "description": "Plots have helper methods for quickly setting axis labels. Refer to other cookbook pages for additional axis customization options.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\n// customize axis labels\nmyPlot.XLabel(\u0022Horizonal Axis\u0022);\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\nmyPlot.Title(\u0022Plot Title\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScottPlotQuickstart",
      "recipeClassName": "QuickstartAxisLabels",
      "anchorUrl": "/cookbook/5.0/ScottPlotQuickstart#QuickstartAxisLabels",
      "categoryUrl": "/cookbook/5.0/ScottPlotQuickstart",
      "recipeUrl": "/cookbook/5.0/ScottPlotQuickstart/QuickstartAxisLabels",
      "imageUrl": "/cookbook/5.0/images/QuickstartAxisLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Quickstart.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Background Colors",
      "description": "Background color for the entire figure or just the data area may be individually controlled. When using dark figure backgrounds it may be necessary to configure axes to use light colors",
      "source": "ScottPlot.Plot myPlot = new();\n\n// setup a plot with sample data\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\nmyPlot.XLabel(\u0022Horizontal Axis\u0022);\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\n\n// some items must be styled directly\nmyPlot.FigureBackground.Color = Colors.Navy;\nmyPlot.DataBackground.Color = Colors.Navy.Darken(0.1);\nmyPlot.Grid.MajorLineColor = Colors.Navy.Lighten(0.1);\n\n// some items have helper methods to configure multiple properties at once\nmyPlot.Axes.Color(Colors.Navy.Lighten(0.8));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "BackgroundColors",
      "anchorUrl": "/cookbook/5.0/Styling#BackgroundColors",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/BackgroundColors",
      "imageUrl": "/cookbook/5.0/images/BackgroundColors.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Axis Customization",
      "description": "Axis labels, tick marks, and frame can all be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.Title.Label.Text = \u0022Plot Title\u0022;\nmyPlot.Axes.Title.Label.ForeColor = Colors.RebeccaPurple;\nmyPlot.Axes.Title.Label.FontSize = 32;\nmyPlot.Axes.Title.Label.FontName = Fonts.Serif;\nmyPlot.Axes.Title.Label.Rotation = -5;\nmyPlot.Axes.Title.Label.Bold = false;\n\nmyPlot.Axes.Left.Label.Text = \u0022Vertical Axis\u0022;\nmyPlot.Axes.Left.Label.ForeColor = Colors.Magenta;\nmyPlot.Axes.Left.Label.Italic = true;\n\nmyPlot.Axes.Bottom.Label.Text = \u0022Horizontal Axis\u0022;\nmyPlot.Axes.Bottom.Label.Bold = false;\nmyPlot.Axes.Bottom.Label.FontName = Fonts.Monospace;\n\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 10;\nmyPlot.Axes.Bottom.MajorTickStyle.Width = 3;\nmyPlot.Axes.Bottom.MajorTickStyle.Color = Colors.Magenta;\nmyPlot.Axes.Bottom.MinorTickStyle.Length = 5;\nmyPlot.Axes.Bottom.MinorTickStyle.Width = 0.5f;\nmyPlot.Axes.Bottom.MinorTickStyle.Color = Colors.Green;\nmyPlot.Axes.Bottom.FrameLineStyle.Color = Colors.Blue;\nmyPlot.Axes.Bottom.FrameLineStyle.Width = 3;\n\nmyPlot.Axes.Right.FrameLineStyle.Width = 0;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "AxisCustom",
      "anchorUrl": "/cookbook/5.0/Styling#AxisCustom",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/AxisCustom",
      "imageUrl": "/cookbook/5.0/images/AxisCustom.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Palettes",
      "description": "A palette is a set of colors, and the Plot\u0027s palette defines the default colors to use when adding new plottables. ScottPlot comes with many standard palettes, but users may also create their own.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// change the default palette used when adding new plottables\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] data = Generate.Sin(100, phase: -i / 20.0f);\n    var sig = myPlot.Add.Signal(data);\n    sig.LineWidth = 3;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Palette",
      "anchorUrl": "/cookbook/5.0/Styling#Palette",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Palette",
      "imageUrl": "/cookbook/5.0/images/Palette.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Arrow Shapes",
      "description": "Many standard arrow shapes are available",
      "source": "ScottPlot.Plot myPlot = new();\n\nArrowShape[] arrowShapes = Enum.GetValues\u003CArrowShape\u003E().ToArray();\n\nfor (int i = 0; i \u003C arrowShapes.Length; i\u002B\u002B)\n{\n    Coordinates arrowTip = new(0, -i);\n    Coordinates arrowBase = arrowTip.WithDelta(1, 0);\n\n    var arrow = myPlot.Add.Arrow(arrowBase, arrowTip);\n    arrow.ArrowShape = arrowShapes[i].GetShape();\n\n    var txt = myPlot.Add.Text(arrowShapes[i].ToString(), arrowBase.WithDelta(.1, 0));\n    txt.LabelFontColor = arrow.ArrowLineColor;\n    txt.LabelAlignment = Alignment.MiddleLeft;\n    txt.LabelFontSize = 18;\n}\n\nmyPlot.Axes.SetLimits(-1, 3, -arrowShapes.Length, 1);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "ArrowShapeNames",
      "anchorUrl": "/cookbook/5.0/Styling#ArrowShapeNames",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/ArrowShapeNames",
      "imageUrl": "/cookbook/5.0/images/ArrowShapeNames.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Line Styles",
      "description": "Many plot types have a LineStyle which can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CLinePattern\u003E patterns = [];\npatterns.AddRange(LinePattern.GetAllPatterns());\npatterns.Add(new([2, 2, 5, 10], 0, \u0022Custom\u0022));\n\nfor (int i = 0; i \u003C patterns.Count; i\u002B\u002B)\n{\n    LinePattern pattern = patterns[i];\n\n    var line = myPlot.Add.Line(0, -i, 1, -i);\n    line.LinePattern = pattern;\n    line.LineWidth = 2;\n    line.Color = Colors.Black;\n\n    var txt = myPlot.Add.Text(patterns[i].Name, 1.1, -i);\n    txt.LabelFontSize = 18;\n    txt.LabelBold = true;\n    txt.LabelFontColor = Colors.Black;\n    txt.LabelAlignment = Alignment.MiddleLeft;\n}\n\nmyPlot.Axes.Margins(right: 1);\nmyPlot.HideGrid();\nmyPlot.Layout.Frameless();\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "LineStyles",
      "anchorUrl": "/cookbook/5.0/Styling#LineStyles",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/LineStyles",
      "imageUrl": "/cookbook/5.0/images/LineStyles.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Scale Factor",
      "description": "All components of an image can be scaled up or down in size by adjusting the ScaleFactor property. This is very useful for creating images that look nice on high DPI displays with display scaling enabled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.ScaleFactor = 2;\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Scaling",
      "anchorUrl": "/cookbook/5.0/Styling#Scaling",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Scaling",
      "imageUrl": "/cookbook/5.0/images/Scaling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Hairline Mode",
      "description": "Hairline mode allows axis frames, tick marks, and grid lines to always be rendered a single pixel wide regardless of scale factor. Enable hairline mode to allow interactive plots to feel smoother when a large scale factor is in use.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.ScaleFactor = 2;\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.Hairline(true);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "Hairline",
      "anchorUrl": "/cookbook/5.0/Styling#Hairline",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/Hairline",
      "imageUrl": "/cookbook/5.0/images/Hairline.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Dark Mode",
      "description": "Plots can be created using dark mode by setting the colors of major plot components to ones consistent with a dark theme.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// set the color palette used when coloring new items added to the plot\nmyPlot.Add.Palette = new ScottPlot.Palettes.Penumbra();\n\n// add things to the plot\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    var sig = myPlot.Add.Signal(Generate.Sin(51, phase: -.05 * i));\n    sig.LineWidth = 3;\n    sig.LegendText = $\u0022Line {i \u002B 1}\u0022;\n}\nmyPlot.XLabel(\u0022Horizontal Axis\u0022);\nmyPlot.YLabel(\u0022Vertical Axis\u0022);\nmyPlot.Title(\u0022ScottPlot 5 in Dark Mode\u0022);\nmyPlot.ShowLegend();\n\n// change figure colors\nmyPlot.FigureBackground.Color = Color.FromHex(\u0022#181818\u0022);\nmyPlot.DataBackground.Color = Color.FromHex(\u0022#1f1f1f\u0022);\n\n// change axis and grid colors\nmyPlot.Axes.Color(Color.FromHex(\u0022#d7d7d7\u0022));\nmyPlot.Grid.MajorLineColor = Color.FromHex(\u0022#404040\u0022);\n\n// change legend colors\nmyPlot.Legend.BackgroundColor = Color.FromHex(\u0022#404040\u0022);\nmyPlot.Legend.FontColor = Color.FromHex(\u0022#d7d7d7\u0022);\nmyPlot.Legend.OutlineColor = Color.FromHex(\u0022#d7d7d7\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "DarkMode",
      "anchorUrl": "/cookbook/5.0/Styling#DarkMode",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/DarkMode",
      "imageUrl": "/cookbook/5.0/images/DarkMode.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Colormap Steps",
      "description": "Colormaps can be used to generate a collection of discrete colors that can be applied to plottable objects.",
      "source": "ScottPlot.Plot myPlot = new();\n\nIColormap colormap = new ScottPlot.Colormaps.Turbo();\n\nfor (int count = 1; count \u003C 10; count\u002B\u002B)\n{\n    double[] xs = Generate.Consecutive(count);\n    double[] ys = Generate.Repeating(count, count);\n    Color[] colors = colormap.GetColors(count);\n\n    for (int i = 0; i \u003C count; i\u002B\u002B)\n    {\n        var circle = myPlot.Add.Circle(xs[i], ys[i], 0.45);\n        circle.FillColor = colors[i];\n        circle.LineWidth = 0;\n    }\n}\n\nmyPlot.YLabel(\u0022number of colors\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "ColormapColorSteps",
      "anchorUrl": "/cookbook/5.0/Styling#ColormapColorSteps",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/ColormapColorSteps",
      "imageUrl": "/cookbook/5.0/images/ColormapColorSteps.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Colormap Gradient from Colors",
      "description": "Colormaps can be created as a gradient between a collection of colors.",
      "source": "ScottPlot.Plot myPlot = new();\n\nColor[] colors = [Colors.Red, Colors.Magenta, Colors.DarkGreen];\nIColormap myColormap = Colormap.FromColors(colors);\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\nvar markers = myPlot.Add.Markers(xs, ys);\nmarkers.Colormap = myColormap;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "ColormapFromColors",
      "anchorUrl": "/cookbook/5.0/Styling#ColormapFromColors",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/ColormapFromColors",
      "imageUrl": "/cookbook/5.0/images/ColormapFromColors.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Hand Drawn Line Style",
      "description": "Enabling hand-drawn line style allows creation of charts that mimic XKCD style graphs which use squiggly lines for comedic effect.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(100);\ndouble[] values1 = Generate.Sigmoidal(xs.Length, -1, 2);\n\n// create a hand drawn scatter plot\nvar sp = myPlot.Add.ScatterLine(xs, values1);\nsp.LineStyle.HandDrawn = true;\nsp.LineStyle.HandDrawnJitter = 2;\nsp.LineWidth = 3;\nsp.LineColor = Colors.Black;\n\n// configure axis frames to appear hand drawn\nmyPlot.HideGrid();\nmyPlot.Axes.GetAxes().ToList().ForEach(x =\u003E x.FrameLineStyle.HandDrawn = true);\n\n// use a comedic font for axis titles and tick labels\nmyPlot.Title(\u0022Answers\u0022);\nmyPlot.YLabel(\u0022Utility\u0022);\nmyPlot.XLabel(\u0022Time Taken to Respond\u0022);\nmyPlot.Axes.Title.Label.FontName = \u0022Comic Sans MS\u0022;\nmyPlot.Axes.Left.Label.FontName = \u0022Comic Sans MS\u0022;\nmyPlot.Axes.Bottom.Label.FontName = \u0022Comic Sans MS\u0022;\nmyPlot.Axes.Bottom.TickLabelStyle.FontName = \u0022Comic Sans MS\u0022;\n\n// use manually placed horizontal axis ticks\nmyPlot.Axes.Left.TickGenerator = new ScottPlot.TickGenerators.EmptyTickGenerator();\nmyPlot.Axes.Bottom.SetTicks([10, 50, 75], [\u0022Minutes\u0022, \u0022Days\u0022, \u0022Weeks\u0022]);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "HandDrawn",
      "anchorUrl": "/cookbook/5.0/Styling#HandDrawn",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/HandDrawn",
      "imageUrl": "/cookbook/5.0/images/HandDrawn.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Styling Plots",
      "name": "Title Alignment",
      "description": "The title is centered over the data area by default, but a flag allows users to center it relative to the figure instead",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51, mult: 1e9));\nmyPlot.Title(\u0022This title is centered in the figure\u0022);\nmyPlot.Axes.Title.FullFigureCenter = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Styling",
      "recipeClassName": "TitleAlignment",
      "anchorUrl": "/cookbook/5.0/Styling#TitleAlignment",
      "categoryUrl": "/cookbook/5.0/Styling",
      "recipeUrl": "/cookbook/5.0/Styling/TitleAlignment",
      "imageUrl": "/cookbook/5.0/images/TitleAlignment.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/Styling.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Custom Tick Formatters",
      "description": "Users can customize the logic used to create tick labels from tick positions. Old versions of ScottPlot achieved this using a ManualTickPositions method.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(100, 1, -50);\nmyPlot.Add.Scatter(xs, Generate.Sin(100));\nmyPlot.Add.Scatter(xs, Generate.Cos(100));\n\n// create a static function containing the string formatting logic\nstatic string CustomFormatter(double position)\n{\n    if (position == 0)\n        return \u00220\u0022;\n    else if (position \u003E 0)\n        return $\u0022\u002B{position}\u0022;\n    else\n        return $\u0022({-position})\u0022;\n}\n\n// create a custom tick generator using your custom label formatter\nScottPlot.TickGenerators.NumericAutomatic myTickGenerator = new()\n{\n    LabelFormatter = CustomFormatter\n};\n\n// tell an axis to use the custom tick generator\nmyPlot.Axes.Bottom.TickGenerator = myTickGenerator;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTickFormatter",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTickFormatter",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTickFormatter",
      "imageUrl": "/cookbook/5.0/images/CustomTickFormatter.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "DateTimeAutomatic Tick Formatters",
      "description": "Users can customize the logic used to create datetime tick labels from tick positions. ",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot data using DateTime values on the horizontal axis\nDateTime[] xs = Generate.ConsecutiveHours(100);\ndouble[] ys = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(xs, ys);\n\n// setup the bottom axis to use DateTime ticks\nvar axis = myPlot.Axes.DateTimeTicksBottom();\n\n// create a custom formatter to return a string with\n// date only when zoomed out and time only when zoomed in\nstatic string CustomFormatter(DateTime dt)\n{\n    bool isMidnight = dt is { Hour: 0, Minute: 0, Second: 0 };\n    return isMidnight\n        ? DateOnly.FromDateTime(dt).ToString()\n        : TimeOnly.FromDateTime(dt).ToString();\n}\n\n// apply our custom tick formatter\nvar tickGen = (ScottPlot.TickGenerators.DateTimeAutomatic)axis.TickGenerator;\ntickGen.LabelFormatter = CustomFormatter;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "DateTimeAutomaticTickFormatter",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#DateTimeAutomaticTickFormatter",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/DateTimeAutomaticTickFormatter",
      "imageUrl": "/cookbook/5.0/images/DateTimeAutomaticTickFormatter.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Custom Tick Generators",
      "description": "Tick generators determine where ticks are to be placed and also contain logic for generating tick labels from tick positions. Alternative tick generators can be created and assigned to axes. Some common tick generators are provided with ScottPlot, and users also have the option create their own.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericFixedInterval(11);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "AltTickGen",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#AltTickGen",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/AltTickGen",
      "imageUrl": "/cookbook/5.0/images/AltTickGen.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "SetTicks Shortcut",
      "description": "The default axes have a SetTicks() helper method which replaces the default tick generator with a manual tick generator pre-loaded with the provided ticks.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// display sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// use manually defined ticks\ndouble[] tickPositions = { 10, 25, 40 };\nstring[] tickLabels = { \u0022Alpha\u0022, \u0022Beta\u0022, \u0022Gamma\u0022 };\nmyPlot.Axes.Bottom.SetTicks(tickPositions, tickLabels);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "SetTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#SetTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/SetTicks",
      "imageUrl": "/cookbook/5.0/images/SetTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Custom Tick Positions",
      "description": "Users desiring more control over major and minor tick positions and labels can instantiate a manual tick generator, set it up as desired, then assign it to the axis being customized",
      "source": "ScottPlot.Plot myPlot = new();\n\n// display sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// create a manual tick generator and add ticks\nScottPlot.TickGenerators.NumericManual ticks = new();\n\n// add major ticks with their labels\nticks.AddMajor(0, \u0022zero\u0022);\nticks.AddMajor(20, \u0022twenty\u0022);\nticks.AddMajor(50, \u0022fifty\u0022);\n\n// add minor ticks\nticks.AddMinor(22);\nticks.AddMinor(25);\nticks.AddMinor(32);\nticks.AddMinor(35);\nticks.AddMinor(42);\nticks.AddMinor(45);\n\n// tell the horizontal axis to use the custom tick generator\nmyPlot.Axes.Bottom.TickGenerator = ticks;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTicks",
      "imageUrl": "/cookbook/5.0/images/CustomTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Custom Tick DateTimes",
      "description": "Users may define custom ticks using DateTime units",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime[] dates = Generate.ConsecutiveDays(100);\ndouble[] values = Generate.RandomWalk(100);\nmyPlot.Add.Scatter(dates, values);\n\n// create a manual DateTime tick generator and add ticks\nScottPlot.TickGenerators.DateTimeManual ticks = new();\n\n// add ticks for Mondays only\nforeach (DateTime date in dates)\n{\n    if (date.DayOfWeek == DayOfWeek.Monday)\n    {\n        string label = date.DayOfYear.ToString();\n        ticks.AddMajor(date, label);\n    }\n}\n\n// tell the horizontal axis to use the custom tick generator\nmyPlot.Axes.Bottom.TickGenerator = ticks;\n\n// style the plot\nmyPlot.Title(\u0022Monday Ticks\u0022);\nmyPlot.XLabel(\u0022Day of the Year\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "CustomTicksDateTime",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#CustomTicksDateTime",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/CustomTicksDateTime",
      "imageUrl": "/cookbook/5.0/images/CustomTicksDateTime.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Rotated Tick Labels",
      "description": "Users can customize tick label rotation.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Axes.Bottom.TickLabelStyle.Rotation = -45;\nmyPlot.Axes.Bottom.TickLabelStyle.Alignment = Alignment.MiddleRight;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "RotatedTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#RotatedTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/RotatedTicks",
      "imageUrl": "/cookbook/5.0/images/RotatedTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Rotated Tick with Long Labels",
      "description": "The axis size can be increased to accommodate rotated or long tick labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a bar plot\ndouble[] values = { 5, 10, 7, 13, 25, 60 };\nmyPlot.Add.Bars(values);\nmyPlot.Axes.Margins(bottom: 0);\n\n// create a tick for each bar\nTick[] ticks =\n{\n    new(0, \u0022First Long Title\u0022),\n    new(1, \u0022Second Long Title\u0022),\n    new(2, \u0022Third Long Title\u0022),\n    new(3, \u0022Fourth Long Title\u0022),\n    new(4, \u0022Fifth Long Title\u0022),\n    new(5, \u0022Sixth Long Title\u0022)\n};\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.TickLabelStyle.Rotation = 45;\nmyPlot.Axes.Bottom.TickLabelStyle.Alignment = Alignment.MiddleLeft;\n\n// determine the width of the largest tick label\nfloat largestLabelWidth = 0;\nusing SKPaint paint = new();\nforeach (Tick tick in ticks)\n{\n    PixelSize size = myPlot.Axes.Bottom.TickLabelStyle.Measure(tick.Label, paint).Size;\n    largestLabelWidth = Math.Max(largestLabelWidth, size.Width);\n}\n\n// ensure axis panels do not get smaller than the largest label\nmyPlot.Axes.Bottom.MinimumSize = largestLabelWidth;\nmyPlot.Axes.Right.MinimumSize = largestLabelWidth;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "RotatedTicksLongLabels",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#RotatedTicksLongLabels",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/RotatedTicksLongLabels",
      "imageUrl": "/cookbook/5.0/images/RotatedTicksLongLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Disable Grid Lines",
      "description": "Users can disable grid lines for specific axes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Grid.XAxisStyle.IsVisible = true;\nmyPlot.Grid.YAxisStyle.IsVisible = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "DisableGridLines",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#DisableGridLines",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/DisableGridLines",
      "imageUrl": "/cookbook/5.0/images/DisableGridLines.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Minimum Tick Spacing",
      "description": "Space between ticks can be increased by setting a value to indicate the minimum distance between tick labels (in pixels).",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.MinimumTickSpacing = 50;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.MinimumTickSpacing = 25;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "MinimumTickSpacing",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#MinimumTickSpacing",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/MinimumTickSpacing",
      "imageUrl": "/cookbook/5.0/images/MinimumTickSpacing.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Tick Density",
      "description": "Tick density can be adjusted as a fraction of the default value. Unlike MinimumTickSpacing, this strategy is aware of the size of tick labels and adjusts accordingly.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.TickDensity = 0.2;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.TickDensity = 0.2;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "TickDensity",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#TickDensity",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/TickDensity",
      "imageUrl": "/cookbook/5.0/images/TickDensity.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Tick Count",
      "description": "A target number of ticks can be provided and the automatic tick generator will attempt to place that number of ticks. This strategy allows tick density to decrease as the image size increases.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nScottPlot.TickGenerators.NumericAutomatic tickGenX = new();\ntickGenX.TargetTickCount = 3;\nmyPlot.Axes.Bottom.TickGenerator = tickGenX;\n\nScottPlot.TickGenerators.NumericAutomatic tickGenY = new();\ntickGenY.TargetTickCount = 3;\nmyPlot.Axes.Left.TickGenerator = tickGenY;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "TickCount",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#TickCount",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/TickCount",
      "imageUrl": "/cookbook/5.0/images/TickCount.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Minor Tick Density",
      "description": "Minor tick marks are automatically generated at intervals between major tick marks. By default they are evenly spaced, but their density may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\ndouble[] xs = Generate.Consecutive(100);\ndouble[] ys = Generate.NoisyExponential(100);\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.LineWidth = 0;\n\n// create a minor tick generator with 10 minor ticks per major tick\nScottPlot.TickGenerators.EvenlySpacedMinorTickGenerator minorTickGen = new(10);\n\n// create a numeric tick generator that uses our custom minor tick generator\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\ntickGen.MinorTickGenerator = minorTickGen;\n\n// tell the left axis to use our custom tick generator\nmyPlot.Axes.Left.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "StandardMinorTickDistribution",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#StandardMinorTickDistribution",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/StandardMinorTickDistribution",
      "imageUrl": "/cookbook/5.0/images/StandardMinorTickDistribution.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Customizing Ticks",
      "name": "Log Scale Tick Marks",
      "description": "The appearance of logarithmic scaling can be achieved by log-scaling the data to be displayed then customizing the minor ticks and grid.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// start with original data\ndouble[] xs = Generate.Consecutive(100);\ndouble[] ys = Generate.NoisyExponential(100);\n\n// log-scale the data and account for negative values\ndouble[] logYs = ys.Select(Math.Log10).ToArray();\n\n// add log-scaled data to the plot\nvar sp = myPlot.Add.Scatter(xs, logYs);\nsp.LineWidth = 0;\n\n// create a minor tick generator that places log-distributed minor ticks\nScottPlot.TickGenerators.LogMinorTickGenerator minorTickGen = new();\n\n// create a numeric tick generator that uses our custom minor tick generator\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\ntickGen.MinorTickGenerator = minorTickGen;\n\n// create a custom tick formatter to set the label text for each tick\nstatic string LogTickLabelFormatter(double y) =\u003E $\u0022{Math.Pow(10, y):N0}\u0022;\n\n// tell our major tick generator to only show major ticks that are whole integers\ntickGen.IntegerTicksOnly = true;\n\n// tell our custom tick generator to use our new label formatter\ntickGen.LabelFormatter = LogTickLabelFormatter;\n\n// tell the left axis to use our custom tick generator\nmyPlot.Axes.Left.TickGenerator = tickGen;\n\n// show grid lines for minor ticks\nmyPlot.Grid.MajorLineColor = Colors.Black.WithOpacity(.15);\nmyPlot.Grid.MinorLineColor = Colors.Black.WithOpacity(.05);\nmyPlot.Grid.MinorLineWidth = 1;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "CustomizingTicks",
      "recipeClassName": "LogScaleTicks",
      "anchorUrl": "/cookbook/5.0/CustomizingTicks#LogScaleTicks",
      "categoryUrl": "/cookbook/5.0/CustomizingTicks",
      "recipeUrl": "/cookbook/5.0/CustomizingTicks/LogScaleTicks",
      "imageUrl": "/cookbook/5.0/images/LogScaleTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/General/TickRecipes.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Sample Data",
      "name": "Multiple Sine Waves",
      "description": "This recipe demonstrates creation of a noisy waveform containing multiple sine waves with different frequencies.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.RandomNormal(500, stdDev: 0.2);\n\nfor (int i = 1; i \u003C 10; i\u002B\u002B)\n{\n    var sig = myPlot.Add.Signal(values);\n    sig.Data.YOffset = i * 3;\n    sig.LineWidth = 1.5f;\n    values = Generate.AddSin(values, oscillations: i);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "DataGen",
      "recipeClassName": "MultipleSineWaves",
      "anchorUrl": "/cookbook/5.0/DataGen#MultipleSineWaves",
      "categoryUrl": "/cookbook/5.0/DataGen",
      "recipeUrl": "/cookbook/5.0/DataGen/MultipleSineWaves",
      "imageUrl": "/cookbook/5.0/images/MultipleSineWaves.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/DataGen.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram Quickstart",
      "description": "A histogram can be created from a collection of values.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinCount(10, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.Counts);\n\n// Size each bar slightly less than the width of a bin\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize * .8;\n}\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Number of People\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramQuickstart",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramQuickstart",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramQuickstart",
      "imageUrl": "/cookbook/5.0/images/HistogramQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram with Fixed Size Bins",
      "description": "A histogram can be created using manually defined bin sizes.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinSize(2, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.Counts);\n\n// Size each bar slightly less than the width of a bin\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize * .8;\n}\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Number of People\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramFixedSizeBins",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramFixedSizeBins",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramFixedSizeBins",
      "imageUrl": "/cookbook/5.0/images/HistogramFixedSizeBins.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Filled Histogram",
      "description": "A filled histogram (one with no visible gaps between bars) can be achieved by setting the bar width to the bin size. However, anti-aliasing artifacts may cause white lines to appear between bars. Disable anti-aliasing for each bar to improve appearance of such plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinSize(1, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.Counts);\n\n// Customize the style of each bar\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize;\n    bar.LineWidth = 0;\n    bar.FillStyle.AntiAlias = false;\n}\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Number of People\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramFilled",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramFilled",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramFilled",
      "imageUrl": "/cookbook/5.0/images/HistogramFilled.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram Bars",
      "description": "A helper method and plot type has been created to simplify creating a bar plot that displays histogram counts. Note that updates the histogram may appear in real time and the plot will automatically update to display the latest data.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create an empty histogram and display it as a bar plot\nvar hist = ScottPlot.Statistics.Histogram.WithBinCount(count: 20, minValue: 140, maxValue: 220);\nvar histPlot = myPlot.Add.Histogram(hist);\nhistPlot.BarWidthFraction = 0.8;\n\n// histogram counts are updated automatically as new data is added\ndouble[] newData = SampleData.MaleHeights();\nhist.AddRange(newData);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramBars",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramBars",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramBars",
      "imageUrl": "/cookbook/5.0/images/HistogramBars.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram of Probabilities",
      "description": "Histograms may be displayed as the probability for each value falling inside a bin",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinCount(10, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.GetProbability(100));\n\n// Customize the style of each bar\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize * 0.8;\n}\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Probability (%)\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramProbability",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramProbability",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramProbability",
      "imageUrl": "/cookbook/5.0/images/HistogramProbability.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram with Probability Curve",
      "description": "A probability curve may be generated for a Gaussian distributed sample.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinCount(100, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.GetProbability());\n\n// Customize the style of each bar\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize;\n    bar.LineWidth = 0;\n    bar.FillStyle.AntiAlias = false;\n    bar.FillColor = Colors.C0.Lighten(.3);\n}\n\n// Plot the probability curve on top the histogram\nScottPlot.Statistics.ProbabilityDensity pd = new(heights);\ndouble[] xs = Generate.Range(heights.Min(), heights.Max(), 1);\ndouble sumBins = hist.Bins.Select(x =\u003E pd.GetY(x)).Sum();\ndouble[] ys = pd.GetYs(xs, 1.0 / sumBins);\n\nvar curve = myPlot.Add.ScatterLine(xs, ys);\ncurve.LineWidth = 2;\ncurve.LineColor = Colors.Black;\ncurve.LinePattern = LinePattern.DenselyDashed;\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Probability (%)\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramProbabilityCurve",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramProbabilityCurve",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramProbabilityCurve",
      "imageUrl": "/cookbook/5.0/images/HistogramProbabilityCurve.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Histogram with Second Axis Probability",
      "description": "A probability curve may be placed on a secondary axis to allow counts to be displayed alongside probabilities with percent units",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[] heights = SampleData.MaleHeights();\nvar hist = ScottPlot.Statistics.Histogram.WithBinCount(100, heights);\n\n// Display the histogram as a bar plot\nvar barPlot = myPlot.Add.Bars(hist.Bins, hist.Counts);\n\n// Customize the style of each bar\nforeach (var bar in barPlot.Bars)\n{\n    bar.Size = hist.FirstBinSize;\n    bar.LineWidth = 0;\n    bar.FillStyle.AntiAlias = false;\n}\n\n// Add a probability curve to a secondary axis\nScottPlot.Statistics.ProbabilityDensity pd = new(heights);\ndouble[] xs = Generate.Range(heights.Min(), heights.Max(), 1);\ndouble[] ys = pd.GetYs(xs, 100);\n\nvar curve = myPlot.Add.ScatterLine(xs, ys);\ncurve.Axes.YAxis = myPlot.Axes.Right;\ncurve.LineWidth = 2;\ncurve.LineColor = Colors.Black;\ncurve.LinePattern = LinePattern.DenselyDashed;\n\n// Customize plot style\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Number of People\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\nmyPlot.Axes.Right.Label.Text = \u0022Probability (%)\u0022;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramProbabilityCurveSecondAxis",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramProbabilityCurveSecondAxis",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramProbabilityCurveSecondAxis",
      "imageUrl": "/cookbook/5.0/images/HistogramProbabilityCurveSecondAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Multiple Histograms",
      "description": "Demonstrates how to use semitransparent bars to display histograms from overlapping datasets",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[][] heightsByGroup = { SampleData.MaleHeights(), SampleData.FemaleHeights() };\nstring[] groupNames = { \u0022Male\u0022, \u0022Female\u0022 };\nColor[] groupColors = { Colors.Blue, Colors.Red };\n\nfor (int i = 0; i \u003C 2; i\u002B\u002B)\n{\n    double[] heights = heightsByGroup[i];\n    var hist = ScottPlot.Statistics.Histogram.WithBinSize(1, heights);\n\n    // Display the histogram as a bar plot\n    var barPlot = myPlot.Add.Bars(hist.Bins, hist.GetProbability());\n\n    // Customize the style of each bar\n    foreach (var bar in barPlot.Bars)\n    {\n        bar.Size = hist.FirstBinSize;\n        bar.LineWidth = 0;\n        bar.FillStyle.AntiAlias = false;\n        bar.FillColor = groupColors[i].WithAlpha(.2);\n    }\n\n    // Plot the probability curve on top the histogram\n    ScottPlot.Statistics.ProbabilityDensity pd = new(heights);\n    double[] xs = Generate.Range(heights.Min(), heights.Max(), 1);\n    double scale = 1.0 / hist.Bins.Select(x =\u003E pd.GetY(x)).Sum();\n    double[] ys = pd.GetYs(xs, scale);\n\n    var curve = myPlot.Add.ScatterLine(xs, ys);\n    curve.LineWidth = 2;\n    curve.LineColor = groupColors[i];\n    curve.LinePattern = LinePattern.DenselyDashed;\n    curve.LegendText = groupNames[i];\n}\n\n// Customize plot style\nmyPlot.Legend.Alignment = Alignment.UpperRight;\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.YLabel(\u0022Probability (%)\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramMultiple",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramMultiple",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramMultiple",
      "imageUrl": "/cookbook/5.0/images/HistogramMultiple.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Histogram",
      "name": "Cumulative Probability Histogram",
      "description": "A cumulative probability histogram represents the cumulative sum of probabilities or relative frequencies up to each bin, providing a running total of the probability distribution. It is especially useful for evaluating and comparing the distribution of multiple populations.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Create a histogram from a collection of values\ndouble[][] heightsByGroup = { SampleData.MaleHeights(100), SampleData.FemaleHeights(100) };\nstring[] groupNames = { \u0022Male\u0022, \u0022Female\u0022 };\nColor[] groupColors = { Colors.Blue, Colors.Red };\n\nfor (int i = 0; i \u003C 2; i\u002B\u002B)\n{\n    var hist = ScottPlot.Statistics.Histogram.WithBinSize(1, firstBin: 140, lastBin: 200);\n    hist.AddRange(heightsByGroup[i]);\n\n    var curve = myPlot.Add.ScatterLine(hist.Bins, hist.GetCumulativeProbability(100));\n    curve.LineWidth = 1.5f;\n    curve.LineColor = groupColors[i];\n    curve.LegendText = groupNames[i];\n    curve.ConnectStyle = ConnectStyle.StepVertical;\n}\n\n// Customize plot style\nmyPlot.Legend.Alignment = Alignment.LowerRight;\nmyPlot.YLabel(\u0022Cumulative Probability (%)\u0022);\nmyPlot.XLabel(\u0022Height (cm)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Histograms",
      "recipeClassName": "HistogramCPH",
      "anchorUrl": "/cookbook/5.0/Histograms#HistogramCPH",
      "categoryUrl": "/cookbook/5.0/Histograms",
      "recipeUrl": "/cookbook/5.0/Histograms/HistogramCPH",
      "imageUrl": "/cookbook/5.0/images/HistogramCPH.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Histograms.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Internationalization",
      "name": "Supported Font Detection",
      "description": "ScottPlot comes with font detection methods which help identify the best installed font for displaying text which may contain international characters.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstring chinese = \u0022\u6D4B\u8BD5\u0022;\nmyPlot.Axes.Title.Label.Text = chinese;\nmyPlot.Axes.Title.Label.FontName = Fonts.Detect(chinese);\n\nstring japanese = \u0022\u8A66\u9A13\u0022;\nmyPlot.Axes.Left.Label.Text = japanese;\nmyPlot.Axes.Left.Label.FontName = Fonts.Detect(japanese);\n\nstring korean = \u0022\uD14C\uC2A4\uD2B8\u0022;\nmyPlot.Axes.Bottom.Label.Text = korean;\nmyPlot.Axes.Bottom.Label.FontName = Fonts.Detect(korean);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Internationalization",
      "recipeClassName": "FontDetection",
      "anchorUrl": "/cookbook/5.0/Internationalization#FontDetection",
      "categoryUrl": "/cookbook/5.0/Internationalization",
      "recipeUrl": "/cookbook/5.0/Internationalization/FontDetection",
      "imageUrl": "/cookbook/5.0/images/FontDetection.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Internationalization.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Internationalization",
      "name": "Automatic Font Detection",
      "description": "The Plot\u0027s Style class contains a method which automatically sets the fonts of common plot objects to the font most likely able to display the characters they contain.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin(phase: .1));\nvar sig2 = myPlot.Add.Signal(Generate.Sin(phase: .2));\nvar sig3 = myPlot.Add.Signal(Generate.Sin(phase: .3));\n\nsig1.LegendText = \u0022\u6D4B\u8BD5\u0022; // Chinese\nsig2.LegendText = \u0022\u8A66\u9A13\u0022; // Japanese\nsig3.LegendText = \u0022\uD14C\uC2A4\uD2B8\u0022; // Korean\nmyPlot.ShowLegend();\n\nmyPlot.Title(\u0022\u6D4B\u8BD5\u0022); // Chinese\nmyPlot.YLabel(\u0022\u8A66\u9A13\u0022); // Japanese\nmyPlot.XLabel(\u0022\uD14C\uC2A4\uD2B8\u0022); // Korean\n\nmyPlot.Font.Automatic(); // set font for each item based on its content\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Internationalization",
      "recipeClassName": "AutomaticFontDetection",
      "anchorUrl": "/cookbook/5.0/Internationalization#AutomaticFontDetection",
      "categoryUrl": "/cookbook/5.0/Internationalization",
      "recipeUrl": "/cookbook/5.0/Internationalization/AutomaticFontDetection",
      "imageUrl": "/cookbook/5.0/images/AutomaticFontDetection.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Internationalization.cs"
    },
    {
      "chapter": "Chapter.General;",
      "category": "Regression",
      "name": "Linear Regression",
      "description": "Fit a line to a collection of X/Y data points.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = new double[] { 1, 2, 3, 4, 5, 6, 7 };\ndouble[] ys = new double[] { 2, 2, 3, 3, 3.8, 4.2, 4 };\n\n// plot original data as a scatter plot\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.LineWidth = 0;\nsp.MarkerSize = 10;\n\n// calculate the regression line\nScottPlot.Statistics.LinearRegression reg = new(xs, ys);\n\n// plot the regression line\nCoordinates pt1 = new(xs.First(), reg.GetValue(xs.First()));\nCoordinates pt2 = new(xs.Last(), reg.GetValue(xs.Last()));\nvar line = myPlot.Add.Line(pt1, pt2);\nline.MarkerSize = 0;\nline.LineWidth = 2;\nline.LinePattern = LinePattern.Dashed;\n\n// note the formula at the top of the plot\nmyPlot.Title(reg.FormulaWithRSquared);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Regression",
      "recipeClassName": "Linear",
      "anchorUrl": "/cookbook/5.0/Regression#Linear",
      "categoryUrl": "/cookbook/5.0/Regression",
      "recipeUrl": "/cookbook/5.0/Regression/Linear",
      "imageUrl": "/cookbook/5.0/images/Linear.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/Miscellaneous/Regression.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Annotation",
      "name": "Annotation Quickstart",
      "description": "Annotations are labels you can place on the data area of a plot. Unlike Text added to the plot (which is placed in coordinate units on the axes), Annotations are positioned relative to the data area (in pixel units) and do not move as the plot is panned and zoomed.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Annotation(\u0022This is an Annotation\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationQuickstart",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationQuickstart",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationQuickstart",
      "imageUrl": "/cookbook/5.0/images/AnnotationQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Annotation",
      "name": "Annotation Customization",
      "description": "Annotations can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar anno = myPlot.Add.Annotation(\u0022Customized\\nAnnotation\u0022);\nanno.LabelFontSize = 32;\nanno.LabelFontName = Fonts.Serif;\nanno.LabelBackgroundColor = Colors.RebeccaPurple.WithAlpha(.3);\nanno.LabelFontColor = Colors.RebeccaPurple;\nanno.LabelBorderColor = Colors.Green;\nanno.LabelBorderWidth = 3;\nanno.LabelShadowColor = Colors.Transparent;\nanno.OffsetY = 40;\nanno.OffsetX = 20;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationCustomize",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationCustomize",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationCustomize",
      "imageUrl": "/cookbook/5.0/images/AnnotationCustomize.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Annotation",
      "name": "Annotation Positions",
      "description": "Annotations are aligned with the data area.",
      "source": "ScottPlot.Plot myPlot = new();\n\nforeach (Alignment alignment in Enum.GetValues(typeof(Alignment)))\n{\n    myPlot.Add.Annotation(alignment.ToString(), alignment);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Annotation",
      "recipeClassName": "AnnotationPositions",
      "anchorUrl": "/cookbook/5.0/Annotation#AnnotationPositions",
      "categoryUrl": "/cookbook/5.0/Annotation",
      "recipeUrl": "/cookbook/5.0/Annotation/AnnotationPositions",
      "imageUrl": "/cookbook/5.0/images/AnnotationPositions.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Annotation.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Arrow",
      "name": "Arrow Quickstart",
      "description": "Arrows can be placed on plots to point to a location in coordinate space and extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a line\nCoordinates arrowTip = new(0, 0);\nCoordinates arrowBase = new(1, 1);\nCoordinateLine arrowLine = new(arrowBase, arrowTip);\n\n// add a simple arrow\nmyPlot.Add.Arrow(arrowLine);\n\n// arrow line and fill styles can be customized\nvar arrow2 = myPlot.Add.Arrow(arrowLine.WithDelta(1, 0));\narrow2.ArrowLineColor = Colors.Red;\narrow2.ArrowMinimumLength = 100;\narrow2.ArrowLineColor = Colors.Black;\narrow2.ArrowFillColor = Colors.Transparent;\n\n// the shape of the arrowhead can be adjusted\nvar skinny = myPlot.Add.Arrow(arrowLine.WithDelta(2, 0));\nskinny.ArrowFillColor = Colors.Green;\nskinny.ArrowLineWidth = 0;\nskinny.ArrowWidth = 3;\nskinny.ArrowheadLength = 20;\nskinny.ArrowheadAxisLength = 20;\nskinny.ArrowheadWidth = 7;\n\nvar fat = myPlot.Add.Arrow(arrowLine.WithDelta(3, 0));\nfat.ArrowFillColor = Colors.Blue;\nfat.ArrowLineWidth = 0;\nfat.ArrowWidth = 18;\nfat.ArrowheadLength = 20;\nfat.ArrowheadAxisLength = 20;\nfat.ArrowheadWidth = 30;\n\n// offset backs the arrow away from the tip coordinate\nmyPlot.Add.Marker(arrowLine.WithDelta(4, 0).End);\nvar arrow4 = myPlot.Add.Arrow(arrowLine.WithDelta(4, 0));\narrow4.ArrowOffset = 15;\n\nmyPlot.Axes.SetLimits(-1, 6, -1, 2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ArrowCoordinated",
      "recipeClassName": "ArrowQuickstart",
      "anchorUrl": "/cookbook/5.0/ArrowCoordinated#ArrowQuickstart",
      "categoryUrl": "/cookbook/5.0/ArrowCoordinated",
      "recipeUrl": "/cookbook/5.0/ArrowCoordinated/ArrowQuickstart",
      "imageUrl": "/cookbook/5.0/images/ArrowQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Arrow.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Lines",
      "description": "Axis lines are vertical or horizontal lines that span an entire axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.VerticalLine(24);\nmyPlot.Add.HorizontalLine(0.73);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineQuickstart",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineQuickstart",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineQuickstart",
      "imageUrl": "/cookbook/5.0/images/AxisLineQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Line Label",
      "description": "Axis lines have labels that can be used to display arbitrary text on the axes they are attached to.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// by default labels are drawn on the same side as the axis label\n\nvar axLine1 = myPlot.Add.VerticalLine(24);\naxLine1.Text = \u0022Line 1\u0022;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\naxLine2.Text = \u0022Line 2\u0022;\n\n// labels may be drawn on the side opposite of the axis label\n\nvar axLine3 = myPlot.Add.VerticalLine(37);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.LabelOppositeAxis = true;\n\nvar axLine4 = myPlot.Add.HorizontalLine(-.75);\naxLine4.Text = \u0022Line 4\u0022;\naxLine4.LabelOppositeAxis = true;\n\n// extra padding on the right and top ensures labels have room\nmyPlot.Axes.Right.MinimumSize = 30;\nmyPlot.Axes.Top.MinimumSize = 30;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineLabel",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineLabel",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineLabel",
      "imageUrl": "/cookbook/5.0/images/AxisLineLabel.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Line Label Positioning",
      "description": "Axis line labels can have custom positioning, including rotation and alignment.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar axLine1 = myPlot.Add.VerticalLine(42);\naxLine1.Text = \u0022Line 1\u0022;\naxLine1.LabelRotation = -90;\naxLine1.LabelAlignment = Alignment.MiddleRight;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\naxLine2.Text = \u0022Line 2\u0022;\naxLine2.LabelRotation = 0;\naxLine2.LabelAlignment = Alignment.MiddleRight;\n\nvar axLine3 = myPlot.Add.VerticalLine(20);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.LabelRotation = -45;\naxLine3.LabelAlignment = Alignment.UpperRight;\n\n// extra padding on the bottom and left for the rotated labels\nmyPlot.Axes.Bottom.MinimumSize = 60;\nmyPlot.Axes.Left.MinimumSize = 60;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineLabelPositioning",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineLabelPositioning",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineLabelPositioning",
      "imageUrl": "/cookbook/5.0/images/AxisLineLabelPositioning.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Line Style",
      "description": "Axis lines have extensive customization options.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar vl1 = myPlot.Add.VerticalLine(24);\nvl1.LineWidth = 3;\nvl1.Color = Colors.Magenta;\n\nvar hl1 = myPlot.Add.HorizontalLine(0.75);\nhl1.LineWidth = 2;\nhl1.Color = Colors.Green;\nhl1.LinePattern = LinePattern.Dashed;\n\nvar hl2 = myPlot.Add.HorizontalLine(-.23);\nhl2.LineColor = Colors.Navy;\nhl2.LineWidth = 5;\nhl2.Text = \u0022Hello\u0022;\nhl2.LabelFontSize = 24;\nhl2.LabelBackgroundColor = Colors.Blue;\nhl2.LabelFontColor = Colors.Yellow;\nhl2.LinePattern = LinePattern.DenselyDashed;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineStyle",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineStyle",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineStyle",
      "imageUrl": "/cookbook/5.0/images/AxisLineStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Line In Legend",
      "description": "Axis lines will be added to the legend if their Text property is set unless their ExcludeFromLegend property is true.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar axLine1 = myPlot.Add.VerticalLine(24);\naxLine1.Text = \u0022Line 1\u0022;\n\nvar axLine2 = myPlot.Add.HorizontalLine(0.75);\n\nvar axLine3 = myPlot.Add.VerticalLine(37);\naxLine3.Text = \u0022Line 3\u0022;\naxLine3.ExcludeFromLegend = true;\n\nvar axLine4 = myPlot.Add.HorizontalLine(0.25);\naxLine4.Text = \u0022Line 4\u0022;\n\nvar axLine5 = myPlot.Add.HorizontalLine(-.75);\naxLine5.Text = \u0022Line 5\u0022;\naxLine5.ExcludeFromLegend = true;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineInLegend",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineInLegend",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineInLegend",
      "imageUrl": "/cookbook/5.0/images/AxisLineInLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Ignore When Autoscaling",
      "description": "Calling Plot.Axes.AutoScale() or middle-clicking the plot will set the axis limits to fit the data. By default the position of axis lines and spans are included in automatic axis limit calculations, but a flag can be set to ignore certain plottables when automatically scaling the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin(51));\nmyPlot.Add.Signal(Generate.Cos(51));\n\nvar hline = myPlot.Add.HorizontalLine(0.23);\nhline.IsDraggable = true;\nhline.EnableAutoscale = false;\n\nvar hSpan = myPlot.Add.HorizontalSpan(-10, 20);\nhSpan.IsDraggable = true;\nhSpan.EnableAutoscale = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineIgnoreLimits",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineIgnoreLimits",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineIgnoreLimits",
      "imageUrl": "/cookbook/5.0/images/AxisLineIgnoreLimits.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Lines",
      "name": "Axis Line with Limits",
      "description": "Axis lines extend infinitely in both directions by default, but upper and lower limits may be specified to limit the dimensions of axis lines.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar vLine = myPlot.Add.VerticalLine(24);\nvLine.Minimum = -.5;\nvLine.Maximum = 0.5;\n\nvar hLine = myPlot.Add.HorizontalLine(0.73);\nhLine.Minimum = 10;\nhLine.Maximum = 40;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisLines",
      "recipeClassName": "AxisLineLimits",
      "anchorUrl": "/cookbook/5.0/AxisLines#AxisLineLimits",
      "categoryUrl": "/cookbook/5.0/AxisLines",
      "recipeUrl": "/cookbook/5.0/AxisLines/AxisLineLimits",
      "imageUrl": "/cookbook/5.0/images/AxisLineLimits.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisLines.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Spans",
      "name": "Axis Span Quickstart",
      "description": "Axis spans label a range of an axis. Vertical spans shade the full width of a vertical range, and horizontal spans shade the full height of a horizontal range.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar hSpan = myPlot.Add.HorizontalSpan(10, 20);\nvar vSpan = myPlot.Add.VerticalSpan(0.25, 0.75);\n\nhSpan.LegendText = \u0022Horizontal Span\u0022;\nvSpan.LegendText = \u0022Vertical Span\u0022;\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisSpans",
      "recipeClassName": "AxisSpanQuickstart",
      "anchorUrl": "/cookbook/5.0/AxisSpans#AxisSpanQuickstart",
      "categoryUrl": "/cookbook/5.0/AxisSpans",
      "recipeUrl": "/cookbook/5.0/AxisSpans/AxisSpanQuickstart",
      "imageUrl": "/cookbook/5.0/images/AxisSpanQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisSpans.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Axis Spans",
      "name": "Axis Span Styling",
      "description": "Axis spans can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar hs = myPlot.Add.HorizontalSpan(10, 20);\nhs.LegendText = \u0022Hello\u0022;\nhs.LineStyle.Width = 2;\nhs.LineStyle.Color = Colors.Magenta;\nhs.LineStyle.Pattern = LinePattern.Dashed;\nhs.FillStyle.Color = Colors.Magenta.WithAlpha(.2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "AxisSpans",
      "recipeClassName": "AxisSpanStyling",
      "anchorUrl": "/cookbook/5.0/AxisSpans#AxisSpanStyling",
      "categoryUrl": "/cookbook/5.0/AxisSpans",
      "recipeUrl": "/cookbook/5.0/AxisSpans/AxisSpanStyling",
      "imageUrl": "/cookbook/5.0/images/AxisSpanStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/AxisSpans.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar Plot Quickstart",
      "description": "Bar plots can be added from a series of values.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add bars\ndouble[] values = { 5, 10, 7, 13 };\nmyPlot.Add.Bars(values);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "Quickstart",
      "anchorUrl": "/cookbook/5.0/Bar#Quickstart",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/Quickstart",
      "imageUrl": "/cookbook/5.0/images/Quickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar Plot Legend",
      "description": "A collection of bars can appear in the legend as a single item.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs1 = { 1, 2, 3, 4 };\ndouble[] ys1 = { 5, 10, 7, 13 };\nvar bars1 = myPlot.Add.Bars(xs1, ys1);\nbars1.LegendText = \u0022Alpha\u0022;\n\ndouble[] xs2 = { 6, 7, 8, 9 };\ndouble[] ys2 = { 7, 12, 9, 15 };\nvar bars2 = myPlot.Add.Bars(xs2, ys2);\nbars2.LegendText = \u0022Beta\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperLeft);\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarLegend",
      "anchorUrl": "/cookbook/5.0/Bar#BarLegend",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarLegend",
      "imageUrl": "/cookbook/5.0/images/BarLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar with Value Labels",
      "description": "Set the \u0060Label\u0060 property of bars to have text displayed above each bar.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 5, 10, 7, 13 };\nvar barPlot = myPlot.Add.Bars(values);\n\n// define the content of labels\nforeach (var bar in barPlot.Bars)\n{\n    bar.Label = bar.Value.ToString();\n}\n\n// customize label style\nbarPlot.ValueLabelStyle.Bold = true;\nbarPlot.ValueLabelStyle.FontSize = 18;\n\nmyPlot.Axes.Margins(bottom: 0, top: .2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarValues",
      "anchorUrl": "/cookbook/5.0/Bar#BarValues",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarValues",
      "imageUrl": "/cookbook/5.0/images/BarValues.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar with Value Labels (horizontal)",
      "description": "Set the \u0060Label\u0060 property of bars to have text displayed beside (left or right) of each bar.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { -20, 10, 7, 13 };\n\n// set the label for each bar\nvar barPlot = myPlot.Add.Bars(values);\nforeach (var bar in barPlot.Bars)\n{\n    bar.Label = \u0022Label \u0022 \u002B bar.Value.ToString();\n}\n\n// customize label style\nbarPlot.ValueLabelStyle.Bold = true;\nbarPlot.ValueLabelStyle.FontSize = 18;\nbarPlot.Horizontal = true;\n\n// add extra margin to account for label\nmyPlot.Axes.SetLimitsX(-45, 35);\nmyPlot.Add.VerticalLine(0, 1, Colors.Black);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarValuesHorizontal",
      "anchorUrl": "/cookbook/5.0/Bar#BarValuesHorizontal",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarValuesHorizontal",
      "imageUrl": "/cookbook/5.0/images/BarValuesHorizontal.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar Positioning",
      "description": "The exact position and size of each bar may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, ValueBase = 3, FillColor = Colors.Red },\n    new() { Position = 2, Value = 7, ValueBase = 0, FillColor = Colors.Blue },\n    new() { Position = 4, Value = 3, ValueBase = 2, FillColor = Colors.Green },\n};\n\nmyPlot.Add.Bars(bars);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarPosition",
      "anchorUrl": "/cookbook/5.0/Bar#BarPosition",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarPosition",
      "imageUrl": "/cookbook/5.0/images/BarPosition.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bars with Error",
      "description": "Bars can have errorbars.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, Error = 1, FillColor = Colors.Red },\n    new() { Position = 2, Value = 7, Error = 2, FillColor = Colors.Orange },\n    new() { Position = 3, Value = 6, Error = 1, FillColor = Colors.Green },\n    new() { Position = 4, Value = 8, Error = 2, FillColor = Colors.Blue },\n};\n\nmyPlot.Add.Bars(bars);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarWithError",
      "anchorUrl": "/cookbook/5.0/Bar#BarWithError",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarWithError",
      "imageUrl": "/cookbook/5.0/images/BarWithError.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bars with Labeled Ticks",
      "description": "Bars can be labeled by manually specifying axis tick mark positions and labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Bar(position: 1, value: 5, error: 1);\nmyPlot.Add.Bar(position: 2, value: 7, error: 2);\nmyPlot.Add.Bar(position: 3, value: 6, error: 1);\nmyPlot.Add.Bar(position: 4, value: 8, error: 2);\n\nTick[] ticks =\n{\n    new(1, \u0022Apple\u0022),\n    new(2, \u0022Orange\u0022),\n    new(3, \u0022Pear\u0022),\n    new(4, \u0022Banana\u0022),\n};\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarTickLabels",
      "anchorUrl": "/cookbook/5.0/Bar#BarTickLabels",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarTickLabels",
      "imageUrl": "/cookbook/5.0/images/BarTickLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar Fill Style",
      "description": "Each bar may be individually styled.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add bars with sample data\ndouble[] values = { 3, 7, 9 };\nvar barPlot = myPlot.Add.Bars(values);\n\n// bars may be styled after they have been added\nbarPlot.Bars[0].FillColor = Colors.Orange;\nbarPlot.Bars[1].FillColor = Colors.Green;\nbarPlot.Bars[2].FillColor = Colors.Navy;\n\nbarPlot.Bars[0].FillHatch = new ScottPlot.Hatches.Striped();\nbarPlot.Bars[1].FillHatch = new ScottPlot.Hatches.Dots();\nbarPlot.Bars[2].FillHatch = new ScottPlot.Hatches.Checker();\n\nforeach (var bar in barPlot.Bars)\n{\n    bar.LineWidth = 2;\n    bar.LineColor = bar.FillColor.Darken(0.5);\n    bar.FillHatchColor = bar.FillColor.Lighten(0.1);\n}\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarFillStyle",
      "anchorUrl": "/cookbook/5.0/Bar#BarFillStyle",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarFillStyle",
      "imageUrl": "/cookbook/5.0/images/BarFillStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Customized Bar Plot",
      "description": "Ultimate control of bar plot styling and positioning may be achieved by creating each bar individually, styling it as desired, and setting its exact size and location. This level of customization may be used to create extremely advanced stacked or grouped bar plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar bar1 = new()\n{\n    Position = 2,\n    Value = 5,\n};\n\nmyPlot.Add.Bar(bar1);\n\nScottPlot.Bar bar2 = new()\n{\n    Position = 5,\n    Value = 7,\n    ValueBase = 2,\n    Error = 1,\n    FillColor = Colors.Magenta,\n    LineWidth = 3,\n    LineColor = Colors.Navy,\n    FillHatch = new ScottPlot.Hatches.Striped(),\n    FillHatchColor = Colors.Magenta.Lighten(.2),\n};\n\nmyPlot.Add.Bar(bar2);\n\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarCustomSingle",
      "anchorUrl": "/cookbook/5.0/Bar#BarCustomSingle",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarCustomSingle",
      "imageUrl": "/cookbook/5.0/images/BarCustomSingle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Stacked Bar Plot",
      "description": "Bars can be positioned on top of each other.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Palettes.Category10 palette = new();\n\nScottPlot.Bar[] bars =\n{\n    // first set of stacked bars\n    new() { Position = 1, ValueBase = 0, Value = 2, FillColor = palette.GetColor(0) },\n    new() { Position = 1, ValueBase = 2, Value = 5, FillColor = palette.GetColor(1) },\n    new() { Position = 1, ValueBase = 5, Value = 10, FillColor = palette.GetColor(2) },\n\n    // second set of stacked bars\n    new() { Position = 2, ValueBase = 0, Value = 4, FillColor = palette.GetColor(0) },\n    new() { Position = 2, ValueBase = 4, Value = 7, FillColor = palette.GetColor(1) },\n    new() { Position = 2, ValueBase = 7, Value = 10, FillColor = palette.GetColor(2) },\n};\n\nmyPlot.Add.Bars(bars);\n\nTick[] ticks =\n{\n    new(1, \u0022Spring\u0022),\n    new(2, \u0022Summer\u0022),\n};\n\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarStackVertically",
      "anchorUrl": "/cookbook/5.0/Bar#BarStackVertically",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarStackVertically",
      "imageUrl": "/cookbook/5.0/images/BarStackVertically.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Grouped Bar Plot",
      "description": "Bars can be grouped by position and color.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Palettes.Category10 palette = new();\n\nScottPlot.Bar[] bars =\n{\n    // first group\n    new() { Position = 1, Value = 2, FillColor = palette.GetColor(0), Error = 1 },\n    new() { Position = 2, Value = 5, FillColor = palette.GetColor(1), Error = 2 },\n    new() { Position = 3, Value = 7, FillColor = palette.GetColor(2), Error = 1 },\n\n    // second group\n    new() { Position = 5, Value = 4, FillColor = palette.GetColor(0), Error = 2 },\n    new() { Position = 6, Value = 7, FillColor = palette.GetColor(1), Error = 1 },\n    new() { Position = 7, Value = 13, FillColor = palette.GetColor(2), Error = 3 },\n\n    // third group\n    new() { Position = 9, Value = 5, FillColor = palette.GetColor(0), Error = 1 },\n    new() { Position = 10, Value = 6, FillColor = palette.GetColor(1), Error = 3 },\n    new() { Position = 11, Value = 11, FillColor = palette.GetColor(2), Error = 2 },\n};\n\nmyPlot.Add.Bars(bars);\n\n// build the legend manually\nmyPlot.Legend.IsVisible = true;\nmyPlot.Legend.Alignment = Alignment.UpperLeft;\nmyPlot.Legend.ManualItems.Add(new() { LabelText = \u0022Monday\u0022, FillColor = palette.GetColor(0) });\nmyPlot.Legend.ManualItems.Add(new() { LabelText = \u0022Tuesday\u0022, FillColor = palette.GetColor(1) });\nmyPlot.Legend.ManualItems.Add(new() { LabelText = \u0022Wednesday\u0022, FillColor = palette.GetColor(2) });\n\n// show group labels on the bottom axis\nTick[] ticks =\n{\n    new(2, \u0022Group 1\u0022),\n    new(6, \u0022Group 2\u0022),\n    new(10, \u0022Group 3\u0022),\n};\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.HideGrid();\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "GroupedBarPlot",
      "anchorUrl": "/cookbook/5.0/Bar#GroupedBarPlot",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/GroupedBarPlot",
      "imageUrl": "/cookbook/5.0/images/GroupedBarPlot.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Horizontal Bar Plot",
      "description": "Bar plots can be displayed horizontally.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Bar[] bars =\n{\n    new() { Position = 1, Value = 5, Error = 1, },\n    new() { Position = 2, Value = 7, Error = 2, },\n    new() { Position = 3, Value = 6, Error = 1, },\n    new() { Position = 4, Value = 8, Error = 2, },\n};\n\nvar barPlot = myPlot.Add.Bars(bars);\nbarPlot.Horizontal = true;\n\nmyPlot.Axes.Margins(left: 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "HorizontalBar",
      "anchorUrl": "/cookbook/5.0/Bar#HorizontalBar",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/HorizontalBar",
      "imageUrl": "/cookbook/5.0/images/HorizontalBar.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Stacked Bar Chart",
      "description": "Bars can be stacked to present data in groups.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstring[] categoryNames = { \u0022Phones\u0022, \u0022Computers\u0022, \u0022Tablets\u0022 };\nColor[] categoryColors = { Colors.C0, Colors.C1, Colors.C2 };\n\nfor (int x = 0; x \u003C 4; x\u002B\u002B)\n{\n    double[] values = Generate.RandomSample(categoryNames.Length, 1000, 5000);\n\n    double nextBarBase = 0;\n\n    for (int i = 0; i \u003C values.Length; i\u002B\u002B)\n    {\n        ScottPlot.Bar bar = new()\n        {\n            Value = nextBarBase \u002B values[i],\n            FillColor = categoryColors[i],\n            ValueBase = nextBarBase,\n            Position = x,\n        };\n\n        myPlot.Add.Bar(bar);\n\n        nextBarBase \u002B= values[i];\n    }\n}\n\n// use custom tick labels on the bottom\nScottPlot.TickGenerators.NumericManual tickGen = new();\nfor (int x = 0; x \u003C 4; x\u002B\u002B)\n{\n    tickGen.AddMajor(x, $\u0022Q{x \u002B 1}\u0022);\n}\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\n// display groups in the legend\nfor (int i = 0; i \u003C 3; i\u002B\u002B)\n{\n    LegendItem item = new()\n    {\n        LabelText = categoryNames[i],\n        FillColor = categoryColors[i]\n    };\n    myPlot.Legend.ManualItems.Add(item);\n}\nmyPlot.Legend.Orientation = Orientation.Horizontal;\nmyPlot.ShowLegend(Alignment.UpperRight);\n\n// tell the plot to autoscale with no padding beneath the bars\nmyPlot.Axes.Margins(bottom: 0, top: .3);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "StackedBars",
      "anchorUrl": "/cookbook/5.0/Bar#StackedBars",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/StackedBars",
      "imageUrl": "/cookbook/5.0/images/StackedBars.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Bar with Custom Text",
      "description": "Full control over bar labels may be achieved by placing fully customizable text objects on top of bars according to their dimensions.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Palettes.Category10 palette = new();\n\n// create 5 groups of stacked bars\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    // create 3 individual bars with stacking\n    List\u003CScottPlot.Bar\u003E bars = [];\n    double valueBase = 0;\n    for (int j = 0; j \u003C 3; j\u002B\u002B)\n    {\n        double barSize = Generate.RandomInteger(10, 20);\n        ScottPlot.Bar bar1 = new()\n        {\n            FillColor = palette.GetColor(j),\n            Position = i,\n            ValueBase = valueBase,\n            Value = valueBase \u002B barSize,\n            Label = $\u0022{barSize}\u0022,\n            CenterLabel = true,\n        };\n\n        bars.Add(bar1);\n        valueBase \u002B= barSize;\n    }\n\n    // plot the stacked bars\n    var barPlot = myPlot.Add.Bars(bars);\n    barPlot.Horizontal = true;\n}\n\n// style the plot so the bars start on the left edge\nmyPlot.Axes.Margins(left: 0);\n\n// add custom group labels\ndouble[] tickPositions = Generate.Consecutive(5);\nstring[] tickLabels = Enumerable.Range(1, 5).Select(x =\u003E $\u0022Worker #{x}\u0022).ToArray();\nmyPlot.Axes.Left.SetTicks(tickPositions, tickLabels);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "BarWithCustomText",
      "anchorUrl": "/cookbook/5.0/Bar#BarWithCustomText",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/BarWithCustomText",
      "imageUrl": "/cookbook/5.0/images/BarWithCustomText.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Range Chart",
      "description": "A range chart displays a discrete set of named value ranges",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003C(string name, CoordinateRange range)\u003E ranges =\n[\n    (\u0022Africa\u0022, new(-35, 37)),\n    (\u0022Antarctica\u0022, new(-90, -60)),\n    (\u0022Asia\u0022, new(-11, 81)),\n    (\u0022Europe\u0022, new(-36, 71)),\n    (\u0022North America\u0022, new(-7, 83)),\n    (\u0022South America\u0022, new(-56, 13)),\n    (\u0022Australia\u0022, new(-47, -28)),\n];\nmyPlot.Add.Ranges(ranges);\n\n// style the axes\nmyPlot.Title(\u0022Latitude Range of the Continents\u0022);\nmyPlot.Axes.Bottom.TickLabelStyle.Rotation = -45;\nmyPlot.Axes.Bottom.TickLabelStyle.Alignment = Alignment.MiddleRight;\nmyPlot.Axes.Bottom.MinimumSize = 100;\n\n// use tick labels with a degree symbol\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\nmyPlot.Axes.Left.TickGenerator = tickGen;\ntickGen.LabelFormatter = (x) =\u003E $\u0022{x}\u00BA\u0022;\n\n// add a horizontal line at zero and push it beneath the range plot\nvar hl = myPlot.Add.HorizontalLine(0, 1, Colors.Black, LinePattern.DenselyDashed);\nmyPlot.MoveToBack(hl);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "RangeChart",
      "anchorUrl": "/cookbook/5.0/Bar#RangeChart",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/RangeChart",
      "imageUrl": "/cookbook/5.0/images/RangeChart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Horizontal Range Chart",
      "description": "Range charts may be created using horizontally oriented bars",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003C(string name, CoordinateRange range)\u003E ranges =\n[\n    (\u0022Ontario\u0022, new(-9, 51)),\n    (\u0022England\u0022, new(0, 63)),\n    (\u0022Kentucky\u0022, new(-4, 72)),\n];\n\nmyPlot.Add.Ranges(ranges, horizontal: true);\n\nmyPlot.XLabel(\u0022Temperature (\u00BAF)\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "RangeChartHozontal",
      "anchorUrl": "/cookbook/5.0/Bar#RangeChartHozontal",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/RangeChartHozontal",
      "imageUrl": "/cookbook/5.0/images/RangeChartHozontal.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Stacked Range Chart",
      "description": "Stacked range charts depict multiple ranges for a discrete set of items",
      "source": "ScottPlot.Plot myPlot = new();\n\n// prepare a custom color palette\nstring[] colorCodes = [\u0022#3369cc\u0022, \u0022#95bce3\u0022, \u0022#f4a861\u0022, \u0022#fd8d00\u0022];\nScottPlot.Palettes.Custom palette = new(colorCodes);\n\n// create a stacked bar chart with a collection of named ranges\nstring[] rangeNames = [\u0022Yearly Low\u0022, \u0022Mean Daily Low\u0022, \u0022Mean Daily High\u0022, \u0022Yearly High\u0022];\nList\u003C(string name, double[] edges)\u003E ranges =\n[\n    (\u0022Ontario\u0022, [-9, 3, 7, 13, 27]),\n    (\u0022England\u0022, [4, 7, 12, 16, 24]),\n    (\u0022Kentucky\u0022, [-4, 7, 13, 20, 30]),\n];\nmyPlot.Add.StackedRanges(ranges, palette);\n\n// use tick labels with a degree symbol\nScottPlot.TickGenerators.NumericAutomatic tickGen = new();\nmyPlot.Axes.Left.TickGenerator = tickGen;\ntickGen.LabelFormatter = (x) =\u003E $\u0022{x}\u00BA\u0022;\n\n// display the legend outside the data area\nmyPlot.ShowLegend(Edge.Right);\n\n// add items to the legend manually\nfor (int i = 0; i \u003C rangeNames.Length; i\u002B\u002B)\n{\n    LegendItem item = new()\n    {\n        LabelText = rangeNames[i],\n        FillColor = palette.GetColor(i),\n    };\n    myPlot.Legend.ManualItems.Add(item);\n}\nmyPlot.Legend.ManualItems.Reverse();\n\n// improve styling and alignment\nmyPlot.Legend.OutlineStyle.IsVisible = false;\nmyPlot.Legend.ShadowColor = Colors.Transparent;\nmyPlot.Legend.Padding = new(0);\nmyPlot.Axes.Right.MaximumSize = 0;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "StackedRangeChart",
      "anchorUrl": "/cookbook/5.0/Bar#StackedRangeChart",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/StackedRangeChart",
      "imageUrl": "/cookbook/5.0/images/StackedRangeChart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bar Plot",
      "name": "Stacked Horizontal Range Chart",
      "description": "Horizontally oriented stacked range charts may be created",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003C(string name, double[] edges)\u003E ranges =\n[\n    (\u0022Ontario\u0022, [-9, 3, 7, 13, 27]),\n    (\u0022England\u0022, [4, 7, 12, 16, 24]),\n    (\u0022Kentucky\u0022, [-4, 7, 13, 20, 30]),\n];\n\nmyPlot.Add.StackedRanges(ranges, horizontal: true);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bar",
      "recipeClassName": "StackedRangeHorizontal",
      "anchorUrl": "/cookbook/5.0/Bar#StackedRangeHorizontal",
      "categoryUrl": "/cookbook/5.0/Bar",
      "recipeUrl": "/cookbook/5.0/Bar/StackedRangeHorizontal",
      "imageUrl": "/cookbook/5.0/images/StackedRangeHorizontal.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Box Plot",
      "name": "Box Plot Quickstart",
      "description": "Box plots can be created individually and added to the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Box box = new()\n{\n    Position = 5,\n    BoxMin = 81,\n    BoxMax = 93,\n    WhiskerMin = 76,\n    WhiskerMax = 107,\n    BoxMiddle = 84,\n};\n\nmyPlot.Add.Box(box);\n\nmyPlot.Axes.SetLimits(0, 10, 70, 110);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Box",
      "recipeClassName": "BoxPlotQuickstart",
      "anchorUrl": "/cookbook/5.0/Box#BoxPlotQuickstart",
      "categoryUrl": "/cookbook/5.0/Box",
      "recipeUrl": "/cookbook/5.0/Box/BoxPlotQuickstart",
      "imageUrl": "/cookbook/5.0/images/BoxPlotQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Box Plot",
      "name": "Box Plot Groups",
      "description": "Each collection of boxes added to the plot gets styled the same and appears as a single item in the legend. Add multiple bar series plots with defined X positions to give the appearance of grouped data.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CScottPlot.Box\u003E boxes1 = new() {\n    Generate.RandomBox(1),\n    Generate.RandomBox(2),\n    Generate.RandomBox(3),\n};\n\nList\u003CScottPlot.Box\u003E boxes2 = new() {\n    Generate.RandomBox(5),\n    Generate.RandomBox(6),\n    Generate.RandomBox(7),\n};\n\nvar bp1 = myPlot.Add.Boxes(boxes1);\nbp1.LegendText = \u0022Group 1\u0022;\n\nvar bp2 = myPlot.Add.Boxes(boxes2);\nbp2.LegendText = \u0022Group 2\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Box",
      "recipeClassName": "BoxPlotGroups",
      "anchorUrl": "/cookbook/5.0/Box#BoxPlotGroups",
      "categoryUrl": "/cookbook/5.0/Box",
      "recipeUrl": "/cookbook/5.0/Box/BoxPlotGroups",
      "imageUrl": "/cookbook/5.0/images/BoxPlotGroups.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Box.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Bracket",
      "name": "Bracket",
      "description": "Brackets are useful for annotating linear ranges of data.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Bracket(0, 1, 0, 0, \u0022Bracket A\u0022);\nmyPlot.Add.Bracket(25, -1, 38, -1, \u0022Bracket B\u0022);\nmyPlot.Add.Bracket(20, .55, 27, -.3, \u0022Bracket C\u0022);\n\nmyPlot.Axes.Margins(0.3, 0.4); // extra room for labels\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Bracket",
      "recipeClassName": "BracketQuickstart",
      "anchorUrl": "/cookbook/5.0/Bracket#BracketQuickstart",
      "categoryUrl": "/cookbook/5.0/Bracket",
      "recipeUrl": "/cookbook/5.0/Bracket/BracketQuickstart",
      "imageUrl": "/cookbook/5.0/images/BracketQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Bracket.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Callout",
      "name": "Callout Quickstart",
      "description": "Callouts display a label and are connected with an arrow that marks a point on the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(15);\ndouble[] ys = Generate.Sin(15);\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.Add.Callout(\u0022Hello\u0022,\n    textLocation: new(7.5, .8),\n    tipLocation: new(xs[6], ys[6]));\n\nmyPlot.Add.Callout(\u0022World\u0022,\n    textLocation: new(10, 0),\n    tipLocation: new(xs[13], ys[13]));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Callout",
      "recipeClassName": "CalloutQuickstart",
      "anchorUrl": "/cookbook/5.0/Callout#CalloutQuickstart",
      "categoryUrl": "/cookbook/5.0/Callout",
      "recipeUrl": "/cookbook/5.0/Callout/CalloutQuickstart",
      "imageUrl": "/cookbook/5.0/images/CalloutQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Callout.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Contour Plot",
      "name": "Rectangular Contour Plot",
      "description": "A rectangular contour plot with evenly spaced points can be created from a 2D array of 3D points.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates3d[,] cs = new Coordinates3d[50, 50];\nfor (int y = 0; y \u003C cs.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C cs.GetLength(1); x\u002B\u002B)\n    {\n        double z = Math.Sin(x * .1) \u002B Math.Cos(y * .1);\n        cs[y, x] = new(x, y, z);\n    }\n}\n\nvar contour = myPlot.Add.ContourLines(cs);\ncontour.LineColor = Colors.Black.WithAlpha(.5);\ncontour.LinePattern = LinePattern.Dotted;\n\nmyPlot.Axes.TightMargins();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Contour",
      "recipeClassName": "ContourGrid",
      "anchorUrl": "/cookbook/5.0/Contour#ContourGrid",
      "categoryUrl": "/cookbook/5.0/Contour",
      "recipeUrl": "/cookbook/5.0/Contour/ContourGrid",
      "imageUrl": "/cookbook/5.0/images/ContourGrid.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Contour.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Contour Plot",
      "name": "Irregular Contour Plot",
      "description": "A contour plot can be created from a collection of 3D data points placed arbitrarily in X/Y plane.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate irregularly spaced X/Y/Z data points\nCoordinates3d[] cs = new Coordinates3d[1000];\nfor (int i = 0; i \u003C cs.Length; i\u002B\u002B)\n{\n    double x = Generate.RandomNumber(0, Math.PI * 2);\n    double y = Generate.RandomNumber(0, Math.PI * 2);\n    double z = Math.Sin(x) \u002B Math.Cos(y);\n    cs[i] = new(x, y, z);\n}\n\n// place markers at each data point\ndouble minZ = cs.Select(x =\u003E x.Z).Min();\ndouble maxZ = cs.Select(x =\u003E x.Z).Max();\ndouble spanZ = maxZ - minZ;\nIColormap cmap = new ScottPlot.Colormaps.MellowRainbow();\nfor (int i = 0; i \u003C cs.Length; i\u002B\u002B)\n{\n    double fraction = (cs[i].Z - minZ) / (spanZ);\n    var marker = myPlot.Add.Marker(cs[i].X, cs[i].Y);\n    marker.Color = cmap.GetColor(fraction).WithAlpha(.8);\n    marker.Size = 5;\n}\n\n// show contour lines\nvar contour = myPlot.Add.ContourLines(cs);\n\n// style the plot\nmyPlot.Axes.TightMargins();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Contour",
      "recipeClassName": "IrregularContour",
      "anchorUrl": "/cookbook/5.0/Contour#IrregularContour",
      "categoryUrl": "/cookbook/5.0/Contour",
      "recipeUrl": "/cookbook/5.0/Contour/IrregularContour",
      "imageUrl": "/cookbook/5.0/images/IrregularContour.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Contour.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Contour Plot",
      "name": "Contour Lines with Heatmap",
      "description": "Contour lines may be placed on top of heatmaps.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates3d[,] cs = new Coordinates3d[50, 50];\nfor (int y = 0; y \u003C cs.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C cs.GetLength(1); x\u002B\u002B)\n    {\n        double z = Math.Sin(x * .1) \u002B Math.Cos(y * .1);\n        cs[y, x] = new(x, y, z);\n    }\n}\n\nvar heatmap = myPlot.Add.Heatmap(cs);\nheatmap.FlipVertically = true;\nheatmap.Colormap = new ScottPlot.Colormaps.MellowRainbow();\n\nvar contour = myPlot.Add.ContourLines(cs);\ncontour.LabelStyle.Bold = true;\ncontour.LinePattern = LinePattern.DenselyDashed;\ncontour.LineColor = Colors.Black.WithAlpha(.5);\n\nmyPlot.Axes.TightMargins();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Contour",
      "recipeClassName": "ContourHeatmap",
      "anchorUrl": "/cookbook/5.0/Contour#ContourHeatmap",
      "categoryUrl": "/cookbook/5.0/Contour",
      "recipeUrl": "/cookbook/5.0/Contour/ContourHeatmap",
      "imageUrl": "/cookbook/5.0/images/ContourHeatmap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Contour.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Contour Plot",
      "name": "Contour Lines with Colormap",
      "description": "If a colormap is provided it will be used to color each line in the colormap according to its value.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates3d[,] cs = new Coordinates3d[50, 50];\nfor (int y = 0; y \u003C cs.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C cs.GetLength(1); x\u002B\u002B)\n    {\n        double z = Math.Sin(x * .1) \u002B Math.Cos(y * .1);\n        cs[y, x] = new(x, y, z);\n    }\n}\n\nvar cl = myPlot.Add.ContourLines(cs, count: 25);\ncl.Colormap = new ScottPlot.Colormaps.MellowRainbow();\ncl.LineWidth = 3;\ncl.LabelStyle.IsVisible = false;\n\nmyPlot.Axes.TightMargins();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Contour",
      "recipeClassName": "ContourColormap",
      "anchorUrl": "/cookbook/5.0/Contour#ContourColormap",
      "categoryUrl": "/cookbook/5.0/Contour",
      "recipeUrl": "/cookbook/5.0/Contour/ContourColormap",
      "imageUrl": "/cookbook/5.0/images/ContourColormap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Contour.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Coxcomb Plot",
      "name": "Coxcomb Plot Quickstart",
      "description": "A Coxcomb chart is a pie graph where the angle of slices is constant but the radii are not.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CPieSlice\u003E slices = new()\n{\n    new() { Value = 5, Label = \u0022Red\u0022, FillColor = Colors.Red },\n    new() { Value = 2, Label = \u0022Orange\u0022, FillColor = Colors.Orange },\n    new() { Value = 8, Label = \u0022Gold\u0022, FillColor = Colors.Gold },\n    new() { Value = 4, Label = \u0022Green\u0022, FillColor = Colors.Green.WithOpacity(0.5) },\n    new() { Value = 8, Label = \u0022Blue\u0022,  FillColor = Colors.Blue.WithOpacity(0.5) },\n};\n\nvar cox = myPlot.Add.Coxcomb(slices);\ncox.SliceLabelDistance = 1.5;\n\nmyPlot.Axes.Frameless();\nmyPlot.ShowLegend();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Coxcomb",
      "recipeClassName": "CoxcombQuickstart",
      "anchorUrl": "/cookbook/5.0/Coxcomb#CoxcombQuickstart",
      "categoryUrl": "/cookbook/5.0/Coxcomb",
      "recipeUrl": "/cookbook/5.0/Coxcomb/CoxcombQuickstart",
      "imageUrl": "/cookbook/5.0/images/CoxcombQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Coxcomb.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Crosshair",
      "name": "Crosshair Quickstart",
      "description": "A Crosshair combines a horizontal axis line and vertical axis line to mark a location in coordinate space.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Crosshair(13, .25);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Crosshair",
      "recipeClassName": "CrosshairQuickstart",
      "anchorUrl": "/cookbook/5.0/Crosshair#CrosshairQuickstart",
      "categoryUrl": "/cookbook/5.0/Crosshair",
      "recipeUrl": "/cookbook/5.0/Crosshair/CrosshairQuickstart",
      "imageUrl": "/cookbook/5.0/images/CrosshairQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Crosshair.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Crosshair",
      "name": "Crosshair Customization",
      "description": "Crosshairs can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nvar cross = myPlot.Add.Crosshair(13, .25);\n\n// properties set style for both lines\ncross.LineWidth = 2;\ncross.LineColor = Colors.Magenta;\n\n// each line\u0027s styles can be individually accessed as well\ncross.HorizontalLine.LinePattern = LinePattern.Dotted;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Crosshair",
      "recipeClassName": "CrosshairCustomization",
      "anchorUrl": "/cookbook/5.0/Crosshair#CrosshairCustomization",
      "categoryUrl": "/cookbook/5.0/Crosshair",
      "recipeUrl": "/cookbook/5.0/Crosshair/CrosshairCustomization",
      "imageUrl": "/cookbook/5.0/images/CrosshairCustomization.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Crosshair.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Ellipse",
      "name": "Ellipse Quickstart",
      "description": "Ellipses can be added to plots",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Ellipse(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radiusX: rand.Next(1, 7),\n        radiusY: rand.Next(1, 7));\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "PlotEllipseQuickstart",
      "anchorUrl": "/cookbook/5.0/Ellipse#PlotEllipseQuickstart",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/PlotEllipseQuickstart",
      "imageUrl": "/cookbook/5.0/images/PlotEllipseQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Ellipse",
      "name": "Circle Quickstart",
      "description": "Circles can be added to plots. Circles are really Ellipses with the same X and Y radius. Note that circles appear as ellipses unless the plot has a square coordinate system.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Circle(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radius: rand.Next(1, 7));\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "PlotCircleQuickstart",
      "anchorUrl": "/cookbook/5.0/Ellipse#PlotCircleQuickstart",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/PlotCircleQuickstart",
      "imageUrl": "/cookbook/5.0/images/PlotCircleQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Ellipse",
      "name": "Circle with Locked Scale",
      "description": "For circles to always appear circular, the coordinate system must be forced to always display square-shaped pixels. This can be achieved by enabling the axis scale lock.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandom rand = new(0);\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    myPlot.Add.Circle(\n        xCenter: rand.Next(-10, 10),\n        yCenter: rand.Next(-10, 10),\n        radius: rand.Next(1, 7));\n}\n\n// force pixels to have a 1:1 scale ratio\nmyPlot.Axes.SquareUnits();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "CircleWithLockedScale",
      "anchorUrl": "/cookbook/5.0/Ellipse#CircleWithLockedScale",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/CircleWithLockedScale",
      "imageUrl": "/cookbook/5.0/images/CircleWithLockedScale.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Ellipse",
      "name": "Ellipse Styling",
      "description": "Ellipses styles can be extensively customized",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar circle = myPlot.Add.Circle(center: Coordinates.Origin, radius: 5);\ncircle.LineStyle.Width = 5;\ncircle.LineStyle.Pattern = LinePattern.Dashed;\ncircle.LineStyle.Color = Colors.Green;\ncircle.FillStyle.Color = Colors.Navy;\ncircle.FillStyle.HatchColor = Colors.Red;\ncircle.FillStyle.Hatch = new ScottPlot.Hatches.Striped();\n\nmyPlot.Axes.SetLimits(-10, 10, -10, 10);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "EllipseStyling",
      "anchorUrl": "/cookbook/5.0/Ellipse#EllipseStyling",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/EllipseStyling",
      "imageUrl": "/cookbook/5.0/images/EllipseStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Ellipse",
      "name": "Ellipse Rotation",
      "description": "Ellipses can also be rotated",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble radiusX = 1;\ndouble radiusY = 5;\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    Angle angle = Angle.FromDegrees(i * 20);\n    var el = myPlot.Add.Ellipse(center, radiusX, radiusY, angle);\n    el.LineWidth = 3;\n    el.LineColor = Colors.Blue.WithAlpha(0.1 \u002B 0.2 * i);\n}\n\n// force pixels to have a 1:1 scale ratio\nScottPlot.AxisRules.SquareZoomOut rule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(rule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Ellipse",
      "recipeClassName": "EllipseRotation",
      "anchorUrl": "/cookbook/5.0/Ellipse#EllipseRotation",
      "categoryUrl": "/cookbook/5.0/Ellipse",
      "recipeUrl": "/cookbook/5.0/Ellipse/EllipseRotation",
      "imageUrl": "/cookbook/5.0/images/EllipseRotation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Ellipse.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Error Bars",
      "name": "Error Bar Quickstart",
      "description": "Error Bars go well with scatter plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint points = 30;\n\ndouble[] xs = Generate.Consecutive(points);\ndouble[] ys = Generate.RandomWalk(points);\ndouble[] err = Generate.RandomSample(points, 0.1, 1);\n\nvar scatter = myPlot.Add.Scatter(xs, ys);\nvar errorbars = myPlot.Add.ErrorBar(xs, ys, err);\nerrorbars.Color = scatter.Color;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ErrorBar",
      "recipeClassName": "ErrorBarQuickstart",
      "anchorUrl": "/cookbook/5.0/ErrorBar#ErrorBarQuickstart",
      "categoryUrl": "/cookbook/5.0/ErrorBar",
      "recipeUrl": "/cookbook/5.0/ErrorBar/ErrorBarQuickstart",
      "imageUrl": "/cookbook/5.0/images/ErrorBarQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Error Bars",
      "name": "ErrorBar Values",
      "description": "Error size can be set for all dimensions.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint points = 10;\n\ndouble[] xs = Generate.Consecutive(points);\ndouble[] ys = Generate.RandomWalk(points);\nvar scatter = myPlot.Add.Scatter(xs, ys);\nscatter.LineStyle.Width = 0;\n\nScottPlot.Plottables.ErrorBar eb = new(\n    xs: xs,\n    ys: ys,\n    xErrorsNegative: Generate.RandomSample(points, .5),\n    xErrorsPositive: Generate.RandomSample(points, .5),\n    yErrorsNegative: Generate.RandomSample(points),\n    yErrorsPositive: Generate.RandomSample(points));\n\neb.Color = scatter.Color;\n\nmyPlot.Add.Plottable(eb);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ErrorBar",
      "recipeClassName": "CustomErrors",
      "anchorUrl": "/cookbook/5.0/ErrorBar#CustomErrors",
      "categoryUrl": "/cookbook/5.0/ErrorBar",
      "recipeUrl": "/cookbook/5.0/ErrorBar/CustomErrors",
      "imageUrl": "/cookbook/5.0/images/CustomErrors.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ErrorBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "FillY plot",
      "name": "FillY From Array Data",
      "description": "FillY plots can be created from X, Y1, and Y2 arrays.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandomDataGenerator dataGen = new(0);\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\n\nvar fill = myPlot.Add.FillY(xs, ys1, ys2);\nfill.FillColor = Colors.Blue.WithAlpha(100);\nfill.LineColor = Colors.Blue;\nfill.MarkerColor = Colors.Blue;\nfill.LineWidth = 2;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromArrays",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromArrays",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromArrays",
      "imageUrl": "/cookbook/5.0/images/FillYFromArrays.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "FillY plot",
      "name": "FillY From Scatter Plots",
      "description": "FillY plots can be created from two scatter plots that share the same X values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRandomDataGenerator dataGen = new(0);\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = dataGen.RandomWalk(count, offset: -5);\ndouble[] ys2 = dataGen.RandomWalk(count, offset: 5);\n\nvar scatter1 = myPlot.Add.Scatter(xs, ys1);\nvar scatter2 = myPlot.Add.Scatter(xs, ys2);\n\nvar fill = myPlot.Add.FillY(scatter1, scatter2);\nfill.FillColor = Colors.Blue.WithAlpha(.1);\nfill.LineWidth = 0;\n\n// push the fill behind the scatter plots\nmyPlot.MoveToBack(fill);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "FillYFromScatters",
      "anchorUrl": "/cookbook/5.0/FillY#FillYFromScatters",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/FillYFromScatters",
      "imageUrl": "/cookbook/5.0/images/FillYFromScatters.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "FillY plot",
      "name": "FillY with Custom Type",
      "description": "FillY plots can be created from data of any type if a conversion function is supplied.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create source data in a nonstandard data type\nList\u003C(int, int, int)\u003E data = new();\nRandom rand = new(0);\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    int x = i;\n    int y1 = rand.Next(0, 10);\n    int y2 = rand.Next(20, 30);\n    data.Add((x, y1, y2));\n}\n\n// create a custom converter for the source data type\nstatic (double, double, double) MyConverter((int, int, int) s) =\u003E (s.Item1, s.Item2, s.Item3);\n\n// create a filled plot from source data using the custom converter\nvar fill = myPlot.Add.FillY(data, MyConverter);\nfill.FillColor = Colors.Blue.WithAlpha(.2);\nfill.LineColor = Colors.Blue;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "Function",
      "anchorUrl": "/cookbook/5.0/FillY#Function",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/Function",
      "imageUrl": "/cookbook/5.0/images/Function.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "FillY plot",
      "name": "FillY Plot Styling",
      "description": "FillY plots can be customized using public properties.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint count = 20;\ndouble[] xs = Generate.Consecutive(count);\ndouble[] ys1 = Generate.RandomWalk(count, offset: -5);\ndouble[] ys2 = Generate.RandomWalk(count, offset: 5);\n\nvar fill = myPlot.Add.FillY(xs, ys1, ys2);\nfill.MarkerShape = MarkerShape.FilledDiamond;\nfill.MarkerSize = 15;\nfill.MarkerColor = Colors.Blue;\nfill.LineColor = Colors.Blue;\nfill.LinePattern = LinePattern.Dotted;\nfill.LineWidth = 2;\nfill.FillColor = Colors.Blue.WithAlpha(.2);\nfill.FillHatch = new ScottPlot.Hatches.Striped(ScottPlot.Hatches.StripeDirection.DiagonalUp);\nfill.FillHatchColor = Colors.Blue.WithAlpha(.4);\nfill.LegendText = \u0022Filled Area\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "Styling",
      "anchorUrl": "/cookbook/5.0/FillY#Styling",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/Styling",
      "imageUrl": "/cookbook/5.0/images/Styling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "FillY plot",
      "name": "Filled Error",
      "description": "A line plot with shaded error range may be achieved by layering a FillY beneath a ScatterLine.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample Y values\ndouble[] xs = Generate.Range(0, Math.PI, 0.05);\ndouble[] ys = xs.Select(x =\u003E Math.Sin(x) \u002B Generate.RandomNumber(0.1)).ToArray();\n\n// create sample error data\ndouble[] yErr = ys.Select(x =\u003E x * Generate.RandomNumber(0.5) \u002B 0.05).ToArray();\n\n// calculate Y \u00B1 error\ndouble[] yErrNeg = Enumerable.Range(0, ys.Length).Select(x =\u003E ys[x] - yErr[x]).ToArray();\ndouble[] yErrPos = Enumerable.Range(0, ys.Length).Select(x =\u003E ys[x] \u002B yErr[x]).ToArray();\n\n// add a shaded area between the error limits\nvar errFill = myPlot.Add.FillY(xs, yErrNeg, yErrPos);\nerrFill.LineWidth = 0;\nerrFill.FillColor = Colors.Blue.WithAlpha(0.2);\nerrFill.LegendText = \u0022Error\u0022;\n\n// add the Y values as a line plot\nvar meanLine = myPlot.Add.ScatterLine(xs, ys);\nmeanLine.LineColor = Colors.Blue;\nmeanLine.LineWidth = 2;\nmeanLine.LegendText = \u0022Mean\u0022;\n\n// configure the location of the legend\nmyPlot.Legend.Alignment = Alignment.UpperRight;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "FillY",
      "recipeClassName": "FilledError",
      "anchorUrl": "/cookbook/5.0/FillY#FilledError",
      "categoryUrl": "/cookbook/5.0/FillY",
      "recipeUrl": "/cookbook/5.0/FillY/FilledError",
      "imageUrl": "/cookbook/5.0/images/FilledError.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/FillY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Candlestick Chart",
      "description": "Candlestick charts use symbols to display price data. The rectangle indicates open and close prices, and the center line indicates minimum and maximum price for the given time period. Color indicates whether the price increased or decreased between open and close.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar prices = Generate.RandomOHLCs(30);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "Candlestick",
      "anchorUrl": "/cookbook/5.0/Finance#Candlestick",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/Candlestick",
      "imageUrl": "/cookbook/5.0/images/Candlestick.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "OHLC Chart",
      "description": "OHLC charts use symbols to display price data (open, high, low, and close) for specific time ranges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar prices = Generate.RandomOHLCs(30);\nmyPlot.Add.OHLC(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "OhlcChart",
      "anchorUrl": "/cookbook/5.0/Finance#OhlcChart",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/OhlcChart",
      "imageUrl": "/cookbook/5.0/images/OhlcChart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Finance Chart with Custom Time Bins",
      "description": "Finance charts can display price range information over arbitrary time scales.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime timeOpen = new(1985, 09, 24, 9, 30, 0); // 9:30 AM\nDateTime timeClose = new(1985, 09, 24, 16, 0, 0); // 4:00 PM\nTimeSpan timeSpan = TimeSpan.FromMinutes(10); // 10 minute bins\n\nList\u003COHLC\u003E prices = new();\nfor (DateTime dt = timeOpen; dt \u003C= timeClose; dt \u002B= timeSpan)\n{\n    double open = Generate.RandomNumber(20, 40) \u002B prices.Count;\n    double close = Generate.RandomNumber(20, 40) \u002B prices.Count;\n    double high = Math.Max(open, close) \u002B Generate.RandomNumber(5);\n    double low = Math.Min(open, close) - Generate.RandomNumber(5);\n    prices.Add(new OHLC(open, high, low, close, dt, timeSpan));\n}\n\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceChartBins",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceChartBins",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceChartBins",
      "imageUrl": "/cookbook/5.0/images/FinanceChartBins.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Price on Right",
      "description": "Finance charts can be created which display price information on the right axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add candlesticks to the plot\nvar prices = Generate.RandomOHLCs(30);\nvar candles = myPlot.Add.Candlestick(prices);\n\n// configure the candlesticks to use the plot\u0027s right axis\ncandles.Axes.YAxis = myPlot.Axes.Right;\ncandles.Axes.YAxis.Label.Text = \u0022Price\u0022;\n\n// style the bottom axis to display date\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceRightAxis",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceRightAxis",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceRightAxis",
      "imageUrl": "/cookbook/5.0/images/FinanceRightAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Simple Moving Average",
      "description": "Tools exist for creating simple moving average (SMA) curves and displaying them next to finanial data.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate and plot time series price data\nvar prices = Generate.RandomOHLCs(75);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// calculate SMA and display it as a scatter plot\nint[] windowSizes = { 3, 8, 20 };\nforeach (int windowSize in windowSizes)\n{\n    ScottPlot.Finance.SimpleMovingAverage sma = new(prices, windowSize);\n    var sp = myPlot.Add.Scatter(sma.Dates, sma.Means);\n    sp.LegendText = $\u0022SMA {windowSize}\u0022;\n    sp.MarkerSize = 0;\n    sp.LineWidth = 3;\n    sp.Color = Colors.Navy.WithAlpha(1 - windowSize / 30.0);\n}\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceSma",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceSma",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceSma",
      "imageUrl": "/cookbook/5.0/images/FinanceSma.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Bollinger Bands",
      "description": "Tools exist for creating Bollinger Bands which display weighted moving mean and variance for time series financial data.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate and plot time series price data\nvar prices = Generate.RandomOHLCs(100);\nmyPlot.Add.Candlestick(prices);\nmyPlot.Axes.DateTimeTicksBottom();\n\n// calculate Bollinger Bands\nScottPlot.Finance.BollingerBands bb = new(prices, 20);\n\n// display center line (mean) as a solid line\nvar sp1 = myPlot.Add.Scatter(bb.Dates, bb.Means);\nsp1.MarkerSize = 0;\nsp1.Color = Colors.Navy;\n\n// display upper bands (positive variance) as a dashed line\nvar sp2 = myPlot.Add.Scatter(bb.Dates, bb.UpperValues);\nsp2.MarkerSize = 0;\nsp2.Color = Colors.Navy;\nsp2.LinePattern = LinePattern.Dotted;\n\n// display lower bands (positive variance) as a dashed line\nvar sp3 = myPlot.Add.Scatter(bb.Dates, bb.LowerValues);\nsp3.MarkerSize = 0;\nsp3.Color = Colors.Navy;\nsp3.LinePattern = LinePattern.Dotted;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceBollinger",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceBollinger",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceBollinger",
      "imageUrl": "/cookbook/5.0/images/FinanceBollinger.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Candlestick Chart Without Gaps",
      "description": "When the DateTimes stored in OHLC objects are used to determine the horizontal position of candlesticks, periods without data like weekends and holidays appear as gaps in the plot. Enabling sequential mode causes the plot to ignore the OHLC DateTimes and display candles at integer positions starting from zero. Users can customize the tick generator to display dates instead of numbers on the horizontal axis if desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a candlestick plot\nvar prices = Generate.RandomOHLCs(31);\nvar candlePlot = myPlot.Add.Candlestick(prices);\n\n// enable sequential mode to place candles at X = 0, 1, 2, ...\ncandlePlot.Sequential = true;\n\n// determine a few candles to display ticks for\nint tickCount = 5;\nint tickDelta = prices.Count / tickCount;\nDateTime[] tickDates = prices\n    .Where((x, i) =\u003E i % tickDelta == 0)\n    .Select(x =\u003E x.DateTime)\n    .ToArray();\n\n// By default, horizontal tick labels will be numbers (1, 2, 3...)\n// We can use a manual tick generator to display dates on the horizontal axis\ndouble[] tickPositions = Generate.Consecutive(tickDates.Length, tickDelta);\nstring[] tickLabels = tickDates.Select(x =\u003E x.ToString(\u0022MM/dd\u0022)).ToArray();\nScottPlot.TickGenerators.NumericManual tickGen = new(tickPositions, tickLabels);\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinancialPlotWithoutGaps",
      "anchorUrl": "/cookbook/5.0/Finance#FinancialPlotWithoutGaps",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinancialPlotWithoutGaps",
      "imageUrl": "/cookbook/5.0/images/FinancialPlotWithoutGaps.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "OHLC Chart Without Gaps",
      "description": "When the DateTimes stored in OHLC objects are used to determine the horizontal position, periods without data like weekends and holidays appear as gaps in the plot. Enabling sequential mode causes the plot to ignore the OHLC DateTimes and place OHLCs at integer positions starting from zero. Users can customize the tick generator to display dates instead of numbers on the horizontal axis if desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a OHLC plot\nvar prices = Generate.RandomOHLCs(31);\nvar ohlcPlot = myPlot.Add.OHLC(prices);\n\n// enable sequential mode to place OHLCs at X = 0, 1, 2, ...\nohlcPlot.Sequential = true;\n\n// determine a few OHLCs to display ticks for\nint tickCount = 5;\nint tickDelta = prices.Count / tickCount;\nDateTime[] tickDates = prices\n    .Where((x, i) =\u003E i % tickDelta == 0)\n    .Select(x =\u003E x.DateTime)\n    .ToArray();\n\n// By default, horizontal tick labels will be numbers (1, 2, 3...)\n// We can use a manual tick generator to display dates on the horizontal axis\ndouble[] tickPositions = Generate.Consecutive(tickDates.Length, tickDelta);\nstring[] tickLabels = tickDates.Select(x =\u003E x.ToString(\u0022MM/dd\u0022)).ToArray();\nScottPlot.TickGenerators.NumericManual tickGen = new(tickPositions, tickLabels);\nmyPlot.Axes.Bottom.TickGenerator = tickGen;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinancialPlotWithoutGapsOhlc",
      "anchorUrl": "/cookbook/5.0/Finance#FinancialPlotWithoutGapsOhlc",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinancialPlotWithoutGapsOhlc",
      "imageUrl": "/cookbook/5.0/images/FinancialPlotWithoutGapsOhlc.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Stock Symbol Background",
      "description": "Stock symbol information can be displayed beneath the plot using the background text feature.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Candlestick(Generate.RandomOHLCs(30));\nmyPlot.Axes.DateTimeTicksBottom();\n\nvar line1 = myPlot.Add.BackgroundText(\u0022DANK\u0022);\nline1.LabelFontColor = Colors.Gray.WithAlpha(.4);\nline1.LabelFontSize = 96;\nline1.LabelBold = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "StockSymbolBackgroundText",
      "anchorUrl": "/cookbook/5.0/Finance#StockSymbolBackgroundText",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/StockSymbolBackgroundText",
      "imageUrl": "/cookbook/5.0/images/StockSymbolBackgroundText.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Stock Symbol Multiline",
      "description": "Stock symbol information can be displayed beneath the plot using the multiline background text feature.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Candlestick(Generate.RandomOHLCs(30));\nmyPlot.Axes.DateTimeTicksBottom();\n\n(var line1, var line2) = myPlot.Add.BackgroundText(\u0022DANK\u0022, \u0022Highest Recommendation by Reddit\u0022);\n\nline1.LabelFontColor = Colors.Gray.WithAlpha(.4);\nline1.LabelFontSize = 64;\nline1.LabelBold = true;\n\nline2.LabelFontColor = Colors.Gray.WithAlpha(.4);\nline2.LabelFontSize = 18;\nline2.LabelBold = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "StockSymbolBackgroundTextMultiline",
      "anchorUrl": "/cookbook/5.0/Finance#StockSymbolBackgroundTextMultiline",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/StockSymbolBackgroundTextMultiline",
      "imageUrl": "/cookbook/5.0/images/StockSymbolBackgroundTextMultiline.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Finance Chart Dark Mode",
      "description": "A dark mode finance plot can be achieved by customizing color options of the candles and figure.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add sample financial data\nOHLC[] prices = Generate.Financial.OHLCsByMinute(60);\nvar candlePlot = myPlot.Add.Candlestick(prices);\ncandlePlot.Axes.YAxis = myPlot.Axes.Right;\n\n// setup DateTime ticks on the bottom\nmyPlot.Axes.DateTimeTicksBottom();\n\n// use currency tick formatting on the right\nmyPlot.Axes.Right.TickGenerator = new ScottPlot.TickGenerators.NumericAutomatic()\n{\n    LabelFormatter = (double value) =\u003E value.ToString(\u0022C\u0022)\n};\n\n// customize candle styling\ncandlePlot.RisingColor = ScottPlot.Color.FromHtml(\u0022#FF0000\u0022);\ncandlePlot.FallingColor = ScottPlot.Color.FromHtml(\u0022#00FF00\u0022);\n\n// add SMA indicators\nint[] windowSizes = { 3, 8, 20 };\nforeach (int windowSize in windowSizes)\n{\n    ScottPlot.Finance.SimpleMovingAverage sma = new(prices, windowSize);\n    var sp = myPlot.Add.Scatter(sma.Dates, sma.Means);\n    sp.Axes.YAxis = myPlot.Axes.Right;\n    sp.MarkerSize = 0;\n    sp.LineWidth = 1.5f;\n    sp.LinePattern = LinePattern.DenselyDashed;\n    sp.Color = Colors.Yellow.WithAlpha(1 - windowSize / 30.0);\n}\n\n// add symbol information and push it to the back of the plot\n(var line1, var line2) = myPlot.Add.BackgroundText(\u0022DANK\u0022, \u0022Recommended by Reddit\u0022);\n\nline1.LabelFontColor = Colors.Gray.WithAlpha(.4);\nline1.LabelFontSize = 72;\nline1.LabelBold = true;\nline1.Axes.YAxis = myPlot.Axes.Right;\n\nline2.LabelFontColor = Colors.Gray.WithAlpha(.4);\nline2.LabelFontSize = 24;\nline2.LabelBold = false;\nline2.Axes.YAxis = myPlot.Axes.Right;\n\n// customize miscellaneous plot component colors\nmyPlot.FigureBackground.Color = Colors.Black;\nmyPlot.DataBackground.Color = Colors.Black;\nmyPlot.Axes.Color(ScottPlot.Color.FromHtml(\u0022#999999\u0022));\nmyPlot.Axes.Right.MajorTickStyle.Color = Colors.Transparent;\nmyPlot.Axes.Right.MinorTickStyle.Color = Colors.Transparent;\nmyPlot.Axes.Bottom.MajorTickStyle.Color = Colors.Transparent;\nmyPlot.Axes.FrameWidth(0);\nmyPlot.Grid.MajorLineColor = ScottPlot.Color.FromHtml(\u0022#222222\u0022);\nmyPlot.Grid.YAxis = myPlot.Axes.Right;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinanceDarkMode",
      "anchorUrl": "/cookbook/5.0/Finance#FinanceDarkMode",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinanceDarkMode",
      "imageUrl": "/cookbook/5.0/images/FinanceDarkMode.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Financial Plot",
      "name": "Financial DateTime Axis",
      "description": "A special axis system has been created for financial charts. Unlike standard DateTime axes which assume the horizontal scale is linearly spaced time, the financial DateTime system allows for dates to be skipped. This is ideal for financial charts where date ranges are skipped such as after-hours trading or non-trading days.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate sample data using a collection of dates and price ranges\nDateTime[] dates = Generate.ConsecutiveHours(100);\nList\u003COHLC\u003E candles = Generate.RandomOHLCs(30);\nvar candlestickPlot = myPlot.Add.Candlestick(candles);\n\n// enable sequential mode so candles are placed 1 unit apart (0, 1, 2, etc.)\ncandlestickPlot.Sequential = true;\n\n// disable the default tick generator (and grid) and make space for the new one\nmyPlot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.EmptyTickGenerator();\nmyPlot.Axes.Bottom.MinimumSize = 30;\n\n// add the financial DateTime tick generator\nScottPlot.Plottables.FinancialTimeAxis financeAxis = new(dates);\nmyPlot.Add.Plottable(financeAxis);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Finance",
      "recipeClassName": "FinancialDateTimeAxis",
      "anchorUrl": "/cookbook/5.0/Finance#FinancialDateTimeAxis",
      "categoryUrl": "/cookbook/5.0/Finance",
      "recipeUrl": "/cookbook/5.0/Finance/FinancialDateTimeAxis",
      "imageUrl": "/cookbook/5.0/images/FinancialDateTimeAxis.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Finance.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Function",
      "name": "Function Quickstart",
      "description": "Create a function plot from a formula.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Functions are defined as delegates with an input and output\nstatic double func1(double x) =\u003E (Math.Sin(x) * Math.Sin(x / 2));\nstatic double func2(double x) =\u003E (Math.Sin(x) * Math.Sin(x / 3));\nstatic double func3(double x) =\u003E (Math.Cos(x) * Math.Sin(x / 5));\n\n// Add functions to the plot\nmyPlot.Add.Function(func1);\nmyPlot.Add.Function(func2);\nmyPlot.Add.Function(func3);\n\n// Manually set axis limits because functions do not have discrete data points\nmyPlot.Axes.SetLimits(-10, 10, -1.5, 1.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Function",
      "recipeClassName": "FunctionQuickstart",
      "anchorUrl": "/cookbook/5.0/Function#FunctionQuickstart",
      "categoryUrl": "/cookbook/5.0/Function",
      "recipeUrl": "/cookbook/5.0/Function/FunctionQuickstart",
      "imageUrl": "/cookbook/5.0/images/FunctionQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Function.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Function",
      "name": "Function Limit X",
      "description": "A function can be limited to a range of X values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstatic double func1(double x) =\u003E (Math.Sin(x) * Math.Sin(x / 2));\n\nvar f = myPlot.Add.Function(func1);\nf.MinX = -3;\nf.MaxX = 3;\n\nmyPlot.Axes.SetLimits(-5, 5, -.2, 1.0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Function",
      "recipeClassName": "FunctionLimitX",
      "anchorUrl": "/cookbook/5.0/Function#FunctionLimitX",
      "categoryUrl": "/cookbook/5.0/Function",
      "recipeUrl": "/cookbook/5.0/Function/FunctionLimitX",
      "imageUrl": "/cookbook/5.0/images/FunctionLimitX.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Function.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Function",
      "name": "Dynamically Generated Functions",
      "description": "When a function cannot be represented as a static method (e.g., one that requires custom parameters) it can be represented as variable of type Func\u003Cdouble, double\u003E and plotted accordingly.",
      "source": "ScottPlot.Plot myPlot = new();\n\nstatic double LogNormalDist(double x, double a, double b)\n{\n    double expNum = Math.Log(x / a);\n    double exp = Math.Exp(-(expNum * expNum) / (2 * b * b));\n    double y = Math.Sqrt(2 * Math.PI) * b * x * exp;\n    return double.IsNaN(y) ? 0 : y;\n}\n\ndouble[] testValues = Generate.Range(0.8, 1.2, 0.05);\nColor[] colors = new ScottPlot.Colormaps.MellowRainbow().GetColors(testValues.Length);\nfor (int i = 0; i \u003C testValues.Length; i\u002B\u002B)\n{\n    double testValue = testValues[i];\n    var myFunc = new Func\u003Cdouble, double\u003E((x) =\u003E LogNormalDist(x, testValue, 0.5));\n    var funcPlot = myPlot.Add.Function(myFunc);\n    funcPlot.LegendText = $\u0022{testValue:0.00}\u0022;\n    funcPlot.LineWidth = 2;\n    funcPlot.LineColor = colors[i];\n}\n\nmyPlot.ShowLegend();\nmyPlot.Legend.Orientation = Orientation.Horizontal;\n\nmyPlot.Axes.SetLimitsX(-0.5, 4);\nmyPlot.Axes.SetLimitsY(-0.8, 2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Function",
      "recipeClassName": "FunctionDynamic",
      "anchorUrl": "/cookbook/5.0/Function#FunctionDynamic",
      "categoryUrl": "/cookbook/5.0/Function",
      "recipeUrl": "/cookbook/5.0/Function/FunctionDynamic",
      "imageUrl": "/cookbook/5.0/images/FunctionDynamic.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Function.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap Quickstart",
      "description": "Heatmaps can be created from 2D arrays",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\nmyPlot.Add.Heatmap(data);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapQuickstart",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapQuickstart",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapQuickstart",
      "imageUrl": "/cookbook/5.0/images/HeatmapQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Inverted Heatmap",
      "description": "Heatmaps can be inverted by reversing the order of colors in the colormap",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Colormap = new ScottPlot.Colormaps.Viridis();\nhm1.Position = new(0, 65, 0, 100);\n\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Colormap = new ScottPlot.Colormaps.Viridis().Reversed();\nhm2.Position = new(100, 165, 0, 100);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapInverted",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapInverted",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapInverted",
      "imageUrl": "/cookbook/5.0/images/HeatmapInverted.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap with custom Colormap",
      "description": "A heatmap\u0027s Colormap is the logic used to convert from cell value to cell color and they can set by the user. ScottPlot comes with many common colormaps, but users may implement IColormap and apply their own. A colorbar can be added to indicate which colors map to which values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Colormap = new ScottPlot.Colormaps.Turbo();\n\nmyPlot.Add.ColorBar(hm1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapColormap",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapColormap",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapColormap",
      "imageUrl": "/cookbook/5.0/images/HeatmapColormap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Multiple Colorbars",
      "description": "Multiple colorbars may be added to plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Rectangle = new(0, 1, 0, 1);\nhm1.Colormap = new ScottPlot.Colormaps.Turbo();\nmyPlot.Add.ColorBar(hm1);\n\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Rectangle = new(1.5, 2.5, 0, 1);\nhm2.Colormap = new ScottPlot.Colormaps.Viridis();\nmyPlot.Add.ColorBar(hm2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapMultipleColorbar",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapMultipleColorbar",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapMultipleColorbar",
      "imageUrl": "/cookbook/5.0/images/HeatmapMultipleColorbar.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Colorbar Title",
      "description": "A colorbar displays a colormap on an edge of the plot, and it has an optional label which can be customized to display a title.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm = myPlot.Add.Heatmap(data);\nhm.Colormap = new ScottPlot.Colormaps.Turbo();\n\nvar cb = myPlot.Add.ColorBar(hm);\ncb.Label = \u0022Intensity\u0022;\ncb.LabelStyle.FontSize = 24;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "ColorbarTitle",
      "anchorUrl": "/cookbook/5.0/Heatmap#ColorbarTitle",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/ColorbarTitle",
      "imageUrl": "/cookbook/5.0/images/ColorbarTitle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Colorbar Tick Formatter",
      "description": "Colorbars have an optional custom tick formatter that allows users to control the string format of tick labels.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nvar hm = myPlot.Add.Heatmap(data);\nvar cb = myPlot.Add.ColorBar(hm);\ncb.MinimumSize = 80; // reserve space for the colorbar and tick labels\n\n// create a static function containing the string formatting logic\nstatic string CustomFormatter(double position)\n{\n    return $\u0022{Math.Round(position / 2.55)} %\u0022;\n}\n\n// create a custom tick generator using your custom label formatter\nScottPlot.TickGenerators.NumericAutomatic myTickGenerator = new()\n{\n    LabelFormatter = CustomFormatter\n};\n\n// tell the colorbar to use the custom tick generator\ncb.Axis.TickGenerator = myTickGenerator;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "ColorbarTickFormatter",
      "anchorUrl": "/cookbook/5.0/Heatmap#ColorbarTickFormatter",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/ColorbarTickFormatter",
      "imageUrl": "/cookbook/5.0/images/ColorbarTickFormatter.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Flipped Heatmap",
      "description": "Heatmaps can be flipped horizontally and/or vertically",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nmyPlot.Add.Text(\u0022default\u0022, 0, 1.5);\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new CoordinateRect(0, 1, 0, 1);\n\nmyPlot.Add.Text(\u0022flip X\u0022, 2, 1.5);\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new CoordinateRect(2, 3, 0, 1);\nhm2.FlipHorizontally = true;\n\nmyPlot.Add.Text(\u0022flip Y\u0022, 4, 1.5);\nvar hm3 = myPlot.Add.Heatmap(data);\nhm3.Position = new CoordinateRect(4, 5, 0, 1);\nhm3.FlipVertically = true;\n\nmyPlot.Add.Text(\u0022flip X\u0026Y\u0022, 6, 1.5);\nvar hm4 = myPlot.Add.Heatmap(data);\nhm4.Position = new CoordinateRect(6, 7, 0, 1);\nhm4.FlipHorizontally = true;\nhm4.FlipVertically = true;\n\nmyPlot.Axes.SetLimits(-.5, 7.5, -1, 2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapFlip",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapFlip",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapFlip",
      "imageUrl": "/cookbook/5.0/images/HeatmapFlip.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Smooth Heatmap",
      "description": "Enable the \u0060Smooth\u0060 property for anti-aliased rendering",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\nmyPlot.Add.Text(\u0022Smooth = false\u0022, 0, 1.1);\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new CoordinateRect(0, 1, 0, 1);\n\nmyPlot.Add.Text(\u0022Smooth = true\u0022, 1.1, 1.1);\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new CoordinateRect(1.1, 2.1, 0, 1);\nhm2.Smooth = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapSmooth",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapSmooth",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapSmooth",
      "imageUrl": "/cookbook/5.0/images/HeatmapSmooth.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Transparent Cells",
      "description": "Assign double.NaN to a heatmap cell to make it transparent.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// start with 2D data and set some cells to NaN\ndouble[,] data = SampleData.MonaLisa();\nfor (int y = 20; y \u003C 80; y\u002B\u002B)\n{\n    for (int x = 20; x \u003C 60; x\u002B\u002B)\n    {\n        data[y, x] = double.NaN;\n    }\n}\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm1 = myPlot.Add.Heatmap(data);\nhm1.Position = new(10, 35, -1.5, .5);\n\n// the NaN transparency color can be customized\nvar hm2 = myPlot.Add.Heatmap(data);\nhm2.Position = new(40, 55, -.5, .75);\nhm2.NaNCellColor = Colors.Magenta.WithAlpha(.4);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapTransparentCells",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapTransparentCells",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapTransparentCells",
      "imageUrl": "/cookbook/5.0/images/HeatmapTransparentCells.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Global Transparency",
      "description": "The transparency of the entire heatmap can be adjusted.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = SampleData.MonaLisa();\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm = myPlot.Add.Heatmap(data);\nhm.Position = new(10, 35, -1.5, .5);\nhm.Opacity = 0.5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapGlobalTransparency",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapGlobalTransparency",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapGlobalTransparency",
      "imageUrl": "/cookbook/5.0/images/HeatmapGlobalTransparency.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Alpha Map",
      "description": "An alpha map (a 2d array of byte values) can be used to apply custom transparency to each cell of a heatmap.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// data values are translated to color based on the heatmap\u0027s colormap\ndouble[,] data = SampleData.MonaLisa();\n\n// an alpha map controls transparency of each cell\nbyte[,] alphaMap = new byte[data.GetLength(0), data.GetLength(1)];\n\n// fill the alpha map with values from 0 (transparent) to 255 (opaque)\nfor (int y = 0; y \u003C alphaMap.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C alphaMap.GetLength(1); x\u002B\u002B)\n    {\n        double fractionAcross = (double)x / alphaMap.GetLength(1);\n        alphaMap[y, x] = (byte)(fractionAcross * 255);\n    }\n}\n\n// create a line chart\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// plot the heatmap on top of the line chart\nvar hm = myPlot.Add.Heatmap(data);\nhm.Position = new(10, 35, -1.5, .5);\nhm.AlphaMap = alphaMap;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapAlphaMap",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapAlphaMap",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapAlphaMap",
      "imageUrl": "/cookbook/5.0/images/HeatmapAlphaMap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Frameless Heatmap",
      "description": "A frameless heatmap can be achieved by disabling axis labels and ticks, then setting the margins to 0 so the data area tightly fits the data.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = {\n    { 1, 2, 3 },\n    { 4, 5, 6 },\n    { 7, 8, 9 },\n};\n\n// add a heatmap to the plot\nmyPlot.Add.Heatmap(data);\n\n// hide axes on all edges of the figure\nmyPlot.Layout.Frameless();\n\n// disable padding around the heatmap data\nmyPlot.Axes.Margins(0, 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "FramelessHeatmap",
      "anchorUrl": "/cookbook/5.0/Heatmap#FramelessHeatmap",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/FramelessHeatmap",
      "imageUrl": "/cookbook/5.0/images/FramelessHeatmap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "HeatmapCellAlignment",
      "description": "Heatmap cells are aligned in their centers by default. This means that the bottom left cell will be centered at (0, 0), and its lower left corner will be to the lower left of the origin. Setting sell alignment to lower left causes the lower left of the heatmap to be exactly at (0, 0).",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = {\n    { 1, 2, 3 },\n    { 4, 5, 6 },\n    { 7, 8, 9 },\n};\n\nvar hm = myPlot.Add.Heatmap(data);\nhm.CellAlignment = Alignment.LowerLeft;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapCellAlignment",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapCellAlignment",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapCellAlignment",
      "imageUrl": "/cookbook/5.0/images/HeatmapCellAlignment.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap Cell Size",
      "description": "Dimensions of a heatmap may be set by specifying how large a cell should be in pixel units.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = {\n    { 1, 2, 3 },\n    { 4, 5, 6 },\n    { 7, 8, 9 },\n};\n\nvar hm = myPlot.Add.Heatmap(data);\nhm.CellAlignment = Alignment.LowerLeft;\nhm.CellWidth = 100;\nhm.CellHeight = 10;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapCellSize",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapCellSize",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapCellSize",
      "imageUrl": "/cookbook/5.0/images/HeatmapCellSize.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap Rectangle",
      "description": "Dimensions of a heatmap may be set by defining a rectangle that the heatmap will be rendered inside.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a heatmap of any size\ndouble[,] data = {\n    { 1, 2, 3 },\n    { 4, 5, 6 },\n    { 7, 8, 9 },\n};\n\n// add the heatmap to the plot\nvar hm = myPlot.Add.Heatmap(data);\n\n// place the heatmap in a rectangle defined in coordinate space\nhm.Rectangle = new CoordinateRect(-5, 5, -5, 5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapRectangle",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapRectangle",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapRectangle",
      "imageUrl": "/cookbook/5.0/images/HeatmapRectangle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap with Manual Color Range",
      "description": "The user can define the range of values to represent with colors in the colormap. Values outside that range will be clipped to the nearest color in the colormap.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// sample data values range from 0-255\ndouble[,] data = SampleData.MonaLisa();\n\n// add a heatmap and colorbar to the plot\nvar hm = myPlot.Add.Heatmap(data);\nhm.Colormap = new ScottPlot.Colormaps.Turbo();\nmyPlot.Add.ColorBar(hm);\n\n// force the colormap to span a manual range of values\nhm.ManualRange = new(50, 150);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapManualRange",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapManualRange",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapManualRange",
      "imageUrl": "/cookbook/5.0/images/HeatmapManualRange.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap Cell Labels",
      "description": "Text may be placed over cells to provide cell labels. In interactive applications MouseMove events may be used to remove old labels and only display a label over the cell beneath the mouse. See the ScottPlot Demo page for more information and code samples.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] data = {\n    { 1, 2, 3 },\n    { 4, 5, 6 },\n    { 7, 8, 9 },\n};\n\nvar hm = myPlot.Add.Heatmap(data);\n\nfor (int y = 0; y \u003C data.GetLength(0); y\u002B\u002B)\n{\n    for (int x = 0; x \u003C data.GetLength(1); x\u002B\u002B)\n    {\n        Coordinates coordinates = new(x, y);\n        string cellLabel = data[y, x].ToString(\u00220.0\u0022);\n        var text = myPlot.Add.Text(cellLabel, coordinates);\n        text.Alignment = Alignment.MiddleCenter;\n        text.LabelFontSize = 30;\n        text.LabelFontColor = Colors.White;\n    }\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapCellLabels",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapCellLabels",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapCellLabels",
      "imageUrl": "/cookbook/5.0/images/HeatmapCellLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Heatmap",
      "name": "Heatmap with DateTime Axis",
      "description": "Heatmaps can be displayed on plots which use dates instead of numbers on the horizontal axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a heatmap to the plot\ndouble[,] data = SampleData.MonaLisa();\nvar hm = myPlot.Add.Heatmap(data);\n\n// define its height using numeric units\nCoordinateRange yRange = new(0, 10);\n\n// define its width using date units\nDateTime start = new(2024, 01, 01);\nDateTime end = new(2025, 01, 01);\nCoordinateRange xRange = new(start.ToOADate(), end.ToOADate());\n\n// apply width and height to the heatmap\nhm.Rectangle = new(xRange, yRange);\n\n// tell the plot to use date formatting for X axis tick labels\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Heatmap",
      "recipeClassName": "HeatmapDateTime",
      "anchorUrl": "/cookbook/5.0/Heatmap#HeatmapDateTime",
      "categoryUrl": "/cookbook/5.0/Heatmap",
      "recipeUrl": "/cookbook/5.0/Heatmap/HeatmapDateTime",
      "imageUrl": "/cookbook/5.0/images/HeatmapDateTime.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Heatmap.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Images",
      "name": "Image Rectangle",
      "description": "An image can be drawn inside a rectangle defined in coordinate units.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Images may be loaded from files or created dynamically\nScottPlot.Image img = ScottPlot.SampleImages.MonaLisa();\n\nCoordinateRect rect = new(left: 0, right: img.Width, bottom: 0, top: img.Height);\n\nmyPlot.Add.ImageRect(img, rect);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Images",
      "recipeClassName": "ImageRectQuickstart",
      "anchorUrl": "/cookbook/5.0/Images#ImageRectQuickstart",
      "categoryUrl": "/cookbook/5.0/Images",
      "recipeUrl": "/cookbook/5.0/Images/ImageRectQuickstart",
      "imageUrl": "/cookbook/5.0/images/ImageRectQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Images.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Line Plot",
      "name": "Line Plot Quickstart",
      "description": "Line plots are placed with a start and end location in coordinate space. Their styles can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Line(1, 12, 12, 0);\nmyPlot.Add.Line(7, 9, 42, 9);\nmyPlot.Add.Line(30, 17, 30, 1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LineQuickStart",
      "anchorUrl": "/cookbook/5.0/LinePlot#LineQuickStart",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LineQuickStart",
      "imageUrl": "/cookbook/5.0/images/LineQuickStart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Line Plot",
      "name": "Line Plot Shapes",
      "description": "Line plots can be styled using a LineStyle.",
      "source": "ScottPlot.Plot myPlot = new();\n\nScottPlot.Colormaps.Viridis colormap = new();\n\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    // add a line\n    Coordinates start = Generate.RandomCoordinates();\n    Coordinates end = Generate.RandomCoordinates();\n    var line = myPlot.Add.Line(start, end);\n\n    // customize the line\n    line.LineColor = Generate.RandomColor(colormap);\n    line.LineWidth = Generate.RandomInteger(1, 4);\n    line.LinePattern = Generate.RandomLinePattern();\n\n    // customize markers\n    line.MarkerLineColor = line.LineStyle.Color;\n    line.MarkerShape = Generate.RandomMarkerShape();\n    line.MarkerSize = Generate.RandomInteger(5, 15);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LinePlotStyles",
      "anchorUrl": "/cookbook/5.0/LinePlot#LinePlotStyles",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LinePlotStyles",
      "imageUrl": "/cookbook/5.0/images/LinePlotStyles.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Line Plot",
      "name": "Line Plot Legend",
      "description": "Line plots with labels appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sin = myPlot.Add.Signal(Generate.Sin());\nsin.LegendText = \u0022Sine\u0022;\n\nvar cos = myPlot.Add.Signal(Generate.Cos());\ncos.LegendText = \u0022Cosine\u0022;\n\nvar line = myPlot.Add.Line(1, 12, 12, 0);\nline.LineWidth = 3;\nline.MarkerSize = 10;\nline.LegendText = \u0022Line Plot\u0022;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LinePlotLegendQWER",
      "anchorUrl": "/cookbook/5.0/LinePlot#LinePlotLegendQWER",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LinePlotLegendQWER",
      "imageUrl": "/cookbook/5.0/images/LinePlotLegendQWER.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Line Plot",
      "name": "Line and Marker Order",
      "description": "Markers may be displayed at the ends of lines, and a flag controls whether the markers are drawn above or below the line.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar line1 = myPlot.Add.Line(0, 0, 1, 1);\nline1.LineColor = Colors.Orange;\nline1.LineWidth = 5;\nline1.MarkerColor = Colors.Red;\nline1.MarkerSize = 20;\nline1.MarkerShape = MarkerShape.FilledCircle;\nline1.LineOnTop = true; // render order is controlled here\n\nvar line2 = myPlot.Add.Line(1, 0, 2, 1);\nline2.LineColor = Colors.Orange;\nline2.LineWidth = 5;\nline2.MarkerColor = Colors.Red;\nline2.MarkerSize = 20;\nline2.MarkerShape = MarkerShape.FilledCircle;\nline2.MarkersOnTop = true; // render order is controlled here\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LinePlot",
      "recipeClassName": "LinePlotMarkerOrder",
      "anchorUrl": "/cookbook/5.0/LinePlot#LinePlotMarkerOrder",
      "categoryUrl": "/cookbook/5.0/LinePlot",
      "recipeUrl": "/cookbook/5.0/LinePlot/LinePlotMarkerOrder",
      "imageUrl": "/cookbook/5.0/images/LinePlotMarkerOrder.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Line.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Live Data",
      "name": "DataLogger Quickstart",
      "description": "Use a DataLogger to display growing datasets (such as sensor data). This plot type assumes that new data will always be added to the end of the existing data, so like SignalXY new data points must have an X value that is greater to or than or equal than the previous one. See the ScottPlot Demo for a live example of this plot type.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// setup a logger that will grow as data is added\nvar logger = myPlot.Add.DataLogger();\n\n// simulate live data streaming in\nfor (int x = 0; x \u003C 10; x\u002B\u002B)\n{\n    double y = Generate.RandomWalker.Next();\n    logger.Add(x, y);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LiveData",
      "recipeClassName": "DataLoggerQuickstart",
      "anchorUrl": "/cookbook/5.0/LiveData#DataLoggerQuickstart",
      "categoryUrl": "/cookbook/5.0/LiveData",
      "recipeUrl": "/cookbook/5.0/LiveData/DataLoggerQuickstart",
      "imageUrl": "/cookbook/5.0/images/DataLoggerQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/LiveData.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Live Data",
      "name": "DataStreamer Quickstart",
      "description": "Use a DataStreamer to display streaming data using a fixed-length display with a fixed horizontal distance between points. This type of plot is ideal for signals like ECG (heart monitor) waveforms. This plot type has advanced customizations for controlling how new data replaces old data (e.g., slide the old data to the left as new data appears on the right or place new data values from left to right, then wrap around to the start and wipe away the oldest data values by replacing them from left to right again). See the ScottPlot Demo for a live example of this plot type.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// setup a streamer that shows the latest 100 points\nvar streamer = myPlot.Add.DataStreamer(100);\n\n// simulate live data streaming in.\nfor (int x = 0; x \u003C 123; x\u002B\u002B)\n{\n    double y = Generate.RandomWalker.Next();\n    streamer.Add(y);\n}\n\n// tell new data to overwrite old data from left to right\nstreamer.ViewWipeRight();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LiveData",
      "recipeClassName": "DataStreamerQuickstart",
      "anchorUrl": "/cookbook/5.0/LiveData#DataStreamerQuickstart",
      "categoryUrl": "/cookbook/5.0/LiveData",
      "recipeUrl": "/cookbook/5.0/LiveData/DataStreamerQuickstart",
      "imageUrl": "/cookbook/5.0/images/DataStreamerQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/LiveData.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Live Data",
      "name": "DataLogger Editing",
      "description": "Values accumulated by a data logger may be edited after they are acquired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// setup a logger that will grow as data is added\nvar logger = myPlot.Add.DataLogger();\n\n// add ten values\nlogger.Add(Generate.RandomSample(10));\n\n// remove the oldest five values\nlogger.Data.Coordinates.RemoveRange(0, 5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "LiveData",
      "recipeClassName": "DataLoggerEditing",
      "anchorUrl": "/cookbook/5.0/LiveData#DataLoggerEditing",
      "categoryUrl": "/cookbook/5.0/LiveData",
      "recipeUrl": "/cookbook/5.0/LiveData/DataLoggerEditing",
      "imageUrl": "/cookbook/5.0/images/DataLoggerEditing.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/LiveData.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Lollipop Plot",
      "name": "Lollipop Plot Quickstart",
      "description": "Lollipop plots can be created from a sequence of values",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.Sin(25);\nmyPlot.Add.Lollipop(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Lollipop",
      "recipeClassName": "LollipopQuickStart",
      "anchorUrl": "/cookbook/5.0/Lollipop#LollipopQuickStart",
      "categoryUrl": "/cookbook/5.0/Lollipop",
      "recipeUrl": "/cookbook/5.0/Lollipop/LollipopQuickStart",
      "imageUrl": "/cookbook/5.0/images/LollipopQuickStart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Lollipop.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Lollipop Plot",
      "name": "Lollipop Positions",
      "description": "The position of each lollipop may be defined.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Range(0, 6.28, 0.314);\ndouble[] ys = xs.Select(Math.Sin).ToArray();\nvar lollipop = myPlot.Add.Lollipop(ys, xs);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Lollipop",
      "recipeClassName": "LollipopPositions",
      "anchorUrl": "/cookbook/5.0/Lollipop#LollipopPositions",
      "categoryUrl": "/cookbook/5.0/Lollipop",
      "recipeUrl": "/cookbook/5.0/Lollipop/LollipopPositions",
      "imageUrl": "/cookbook/5.0/images/LollipopPositions.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Lollipop.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Lollipop Plot",
      "name": "Lollipop Plot Customizations",
      "description": "The stem line and head marker can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.Sin(21);\nvar lollipop = myPlot.Add.Lollipop(values);\n\nlollipop.MarkerColor = Colors.Red;\nlollipop.MarkerSize = 15;\nlollipop.MarkerShape = MarkerShape.FilledDiamond;\n\nlollipop.LineColor = Colors.Green;\nlollipop.LineWidth = 3;\nlollipop.LinePattern = LinePattern.Dotted;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Lollipop",
      "recipeClassName": "BarLollipopCustom",
      "anchorUrl": "/cookbook/5.0/Lollipop#BarLollipopCustom",
      "categoryUrl": "/cookbook/5.0/Lollipop",
      "recipeUrl": "/cookbook/5.0/Lollipop/BarLollipopCustom",
      "imageUrl": "/cookbook/5.0/images/BarLollipopCustom.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Lollipop.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Lollipop Plot",
      "name": "Horizontal Lollipop Plot",
      "description": "Change the lollipop plot\u0027s Orientation to Horizontal to cause stems to be drawn horizontally instead of vertically.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Sin(21);\ndouble[] ys = Generate.Consecutive(21);\nCoordinates[] coordinates = Coordinates.Zip(xs, ys);\n\nvar lollipop = myPlot.Add.Lollipop(coordinates);\nlollipop.Orientation = Orientation.Horizontal;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Lollipop",
      "recipeClassName": "LollipopHorizontal",
      "anchorUrl": "/cookbook/5.0/Lollipop#LollipopHorizontal",
      "categoryUrl": "/cookbook/5.0/Lollipop",
      "recipeUrl": "/cookbook/5.0/Lollipop/LollipopHorizontal",
      "imageUrl": "/cookbook/5.0/images/LollipopHorizontal.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Lollipop.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Marker Quickstart",
      "description": "Markers are symbols placed at a location in coordinate space. Their shape, size, and color can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\nmyPlot.Add.Marker(25, .5);\nmyPlot.Add.Marker(35, .6);\nmyPlot.Add.Marker(45, .7);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerQuickstart",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerQuickstart",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerQuickstart",
      "imageUrl": "/cookbook/5.0/images/MarkerQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Marker Shapes",
      "description": "Standard marker shapes are provided, but advanced users are able to create their own as well.",
      "source": "ScottPlot.Plot myPlot = new();\n\nMarkerShape[] markerShapes = Enum.GetValues\u003CMarkerShape\u003E().ToArray();\nScottPlot.Palettes.Category20 palette = new();\n\nfor (int i = 0; i \u003C markerShapes.Length; i\u002B\u002B)\n{\n    var mp = myPlot.Add.Marker(x: i, y: 0);\n    mp.MarkerStyle.Shape = markerShapes[i];\n    mp.MarkerStyle.Size = 10;\n\n    // markers made from filled shapes have can be customized\n    mp.MarkerStyle.FillColor = palette.GetColor(i).WithAlpha(.5);\n\n    // markers made from filled shapes have optional outlines\n    mp.MarkerStyle.OutlineColor = palette.GetColor(i);\n    mp.MarkerStyle.OutlineWidth = 2;\n\n    // markers created from lines can be customized\n    mp.MarkerStyle.LineWidth = 2f;\n    mp.MarkerStyle.LineColor = palette.GetColor(i);\n\n    var txt = myPlot.Add.Text(markerShapes[i].ToString(), i, 0.15);\n    txt.LabelRotation = -90;\n    txt.LabelAlignment = Alignment.MiddleLeft;\n    txt.LabelFontColor = Colors.Black;\n}\n\nmyPlot.Title(\u0022Marker Names\u0022);\nmyPlot.Axes.SetLimits(-1, markerShapes.Length, -1, 4);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerShapes",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerShapes",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerShapes",
      "imageUrl": "/cookbook/5.0/images/MarkerShapes.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Marker Legend",
      "description": "Markers with labels appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sin = myPlot.Add.Signal(Generate.Sin());\nsin.LegendText = \u0022Sine\u0022;\n\nvar cos = myPlot.Add.Signal(Generate.Cos());\ncos.LegendText = \u0022Cosine\u0022;\n\nvar marker = myPlot.Add.Marker(25, .5);\nmarker.LegendText = \u0022Marker\u0022;\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkerLegend",
      "anchorUrl": "/cookbook/5.0/Marker#MarkerLegend",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkerLegend",
      "imageUrl": "/cookbook/5.0/images/MarkerLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Many Markers",
      "description": "Collections of markers that are all styled the same may be added to the plot",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.Markers(xs, sin, MarkerShape.OpenCircle, 15, Colors.Green);\nmyPlot.Add.Markers(xs, cos, MarkerShape.FilledDiamond, 10, Colors.Magenta);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkersPlot",
      "anchorUrl": "/cookbook/5.0/Marker#MarkersPlot",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkersPlot",
      "imageUrl": "/cookbook/5.0/images/MarkersPlot.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Marker with Colormap",
      "description": "A colormap may be used to style a collection of markers",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar markers = myPlot.Add.Markers(xs, ys);\nmarkers.Colormap = new ScottPlot.Colormaps.MellowRainbow();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "MarkersColormap",
      "anchorUrl": "/cookbook/5.0/Marker#MarkersColormap",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/MarkersColormap",
      "imageUrl": "/cookbook/5.0/images/MarkersColormap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Marker",
      "name": "Image Marker",
      "description": "An ImageMarker can be placed on the plot to display an image centered at a location in coordinate space.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// An image can be loaded from a file or created dynamically\nScottPlot.Image image = SampleImages.ScottPlotLogo(48, 48);\n\nCoordinates location1 = new(5, .5);\nCoordinates location2 = new(25, .5);\n\nmyPlot.Add.ImageMarker(location1, image);\nmyPlot.Add.ImageMarker(location2, image, scale: 2);\n\nvar m1 = myPlot.Add.Marker(location1);\nvar m2 = myPlot.Add.Marker(location2);\nm1.Color = Colors.Orange;\nm2.Color = Colors.Orange;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Marker",
      "recipeClassName": "ImageMarkerQuickstart",
      "anchorUrl": "/cookbook/5.0/Marker#ImageMarkerQuickstart",
      "categoryUrl": "/cookbook/5.0/Marker",
      "recipeUrl": "/cookbook/5.0/Marker/ImageMarkerQuickstart",
      "imageUrl": "/cookbook/5.0/images/ImageMarkerQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Marker.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Phasor Plot",
      "name": "Phasor Line Plot",
      "description": "A phasor line plot contains a collection of polar coordinates which are rendered as arrows.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Start by placing a polar axis system on the plot\nvar polarAxis = myPlot.Add.PolarAxis(30);\npolarAxis.Circles.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\npolarAxis.Spokes.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\n\n// A Phasor may be added with predefined points\nPolarCoordinates[] points1 = [\n    new(10, Angle.FromDegrees(15)),\n    new(20, Angle.FromDegrees(120)),\n    new(30, Angle.FromDegrees(240)),\n];\nmyPlot.Add.Phasor(points1);\n\n// Points on a Phasor may be added or modified after it is created\nvar phaser2 = myPlot.Add.Phasor();\nphaser2.Points.Add(new PolarCoordinates(20, Angle.FromDegrees(35)));\nphaser2.Points.Add(new PolarCoordinates(25, Angle.FromDegrees(140)));\nphaser2.Points.Add(new PolarCoordinates(20, Angle.FromDegrees(260)));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Phasor",
      "recipeClassName": "PhasorQuickstart",
      "anchorUrl": "/cookbook/5.0/Phasor#PhasorQuickstart",
      "categoryUrl": "/cookbook/5.0/Phasor",
      "recipeUrl": "/cookbook/5.0/Phasor/PhasorQuickstart",
      "imageUrl": "/cookbook/5.0/images/PhasorQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Phasor.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Phasor Plot",
      "name": "Phasor Plot with Labels",
      "description": "Text labels may be applied to individual arrows of a phasor plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// setup the polar axis\nvar polarAxis = myPlot.Add.PolarAxis(30);\npolarAxis.Circles.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\npolarAxis.Spokes.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\n\n// create a phasor plot and points in coordinate space\nvar phaser = myPlot.Add.Phasor();\nphaser.Points.Add(new PolarCoordinates(20, Angle.FromDegrees(35)));\nphaser.Points.Add(new PolarCoordinates(25, Angle.FromDegrees(140)));\nphaser.Points.Add(new PolarCoordinates(20, Angle.FromDegrees(260)));\n\n// add labels for points\nphaser.Labels.Add(\u0022Alpha\u0022);\nphaser.Labels.Add(\u0022Beta\u0022);\nphaser.Labels.Add(\u0022Gamma\u0022);\n\n// style the labels\nphaser.LabelStyle.FontSize = 24;\nphaser.LabelStyle.ForeColor = Colors.Black;\nphaser.LabelStyle.FontName = Fonts.Monospace;\nphaser.LabelStyle.Bold = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Phasor",
      "recipeClassName": "PhasorLabels",
      "anchorUrl": "/cookbook/5.0/Phasor#PhasorLabels",
      "categoryUrl": "/cookbook/5.0/Phasor",
      "recipeUrl": "/cookbook/5.0/Phasor/PhasorLabels",
      "imageUrl": "/cookbook/5.0/images/PhasorLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Phasor.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie Chart from Values",
      "description": "A pie chart can be created from a few values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 5, 2, 8, 4, 8 };\nvar pie = myPlot.Add.Pie(values);\npie.ExplodeFraction = .1;\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieQuickstart",
      "anchorUrl": "/cookbook/5.0/Pie#PieQuickstart",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieQuickstart",
      "imageUrl": "/cookbook/5.0/images/PieQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie Chart from Slices",
      "description": "A pie chart can be created from a collection of slices.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CPieSlice\u003E slices =\n[\n    new PieSlice() { Value = 5, FillColor = Colors.Red, Label = \u0022Red\u0022, LegendText = \u0022R\u0022 },\n    new PieSlice() { Value = 2, FillColor = Colors.Orange, Label = \u0022Orange\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Gold, Label = \u0022Yellow\u0022 },\n    new PieSlice() { Value = 4, FillColor = Colors.Green, Label = \u0022Green\u0022, LegendText = \u0022G\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Blue, Label = \u0022Blue\u0022, LegendText = \u0022B\u0022 },\n];\n\nvar pie = myPlot.Add.Pie(slices);\npie.ExplodeFraction = .1;\npie.SliceLabelDistance = 1.4;\n\nmyPlot.ShowLegend();\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSlices",
      "anchorUrl": "/cookbook/5.0/Pie#PieSlices",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSlices",
      "imageUrl": "/cookbook/5.0/images/PieSlices.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Donut from Slices",
      "description": "A donut chart is a pie chart with an open center. Donut charts can be created from a collection of slices.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CPieSlice\u003E slices = new()\n{\n    new PieSlice() { Value = 5, FillColor = Colors.Red, Label = \u0022Red\u0022 },\n    new PieSlice() { Value = 2, FillColor = Colors.Orange, Label = \u0022Orange\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Gold, Label = \u0022Yellow\u0022 },\n    new PieSlice() { Value = 4, FillColor = Colors.Green, Label = \u0022Green\u0022 },\n    new PieSlice() { Value = 8, FillColor = Colors.Blue, Label = \u0022Blue\u0022 },\n};\n\nvar pie = myPlot.Add.Pie(slices);\npie.DonutFraction = .5;\n\nmyPlot.ShowLegend();\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieDonut",
      "anchorUrl": "/cookbook/5.0/Pie#PieDonut",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieDonut",
      "imageUrl": "/cookbook/5.0/images/PieDonut.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie Slice with Hatch",
      "description": "Individual slices may be given a custom hatch style",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar pie = myPlot.Add.Pie([5, 4, 6]);\n\n// customize the hatch style for a single slice\npie.Slices[0].Fill.Hatch = new ScottPlot.Hatches.Striped();\npie.Slices[0].Fill.HatchColor = pie.Slices[0].Fill.Color.Lighten(.2);\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSliceHatch",
      "anchorUrl": "/cookbook/5.0/Pie#PieSliceHatch",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSliceHatch",
      "imageUrl": "/cookbook/5.0/images/PieSliceHatch.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie Chart Rotation",
      "description": "Pie charts may be rotated to control where the first slice begins.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 5, 2, 8, 4, 8 };\nvar pie = myPlot.Add.Pie(values);\npie.ExplodeFraction = .1;\npie.Rotation = Angle.FromDegrees(90);\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieRotation",
      "anchorUrl": "/cookbook/5.0/Pie#PieRotation",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieRotation",
      "imageUrl": "/cookbook/5.0/images/PieRotation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie Slice Labels",
      "description": "Slice labels can be displayed centered with the slice at a customizable distance from the center of the pie.",
      "source": "ScottPlot.Plot myPlot = new();\n\nPieSlice slice1 = new() { Value = 5, FillColor = Colors.Red, Label = \u0022alpha\u0022 };\nPieSlice slice2 = new() { Value = 2, FillColor = Colors.Orange, Label = \u0022beta\u0022 };\nPieSlice slice3 = new() { Value = 8, FillColor = Colors.Gold, Label = \u0022gamma\u0022 };\nPieSlice slice4 = new() { Value = 4, FillColor = Colors.Green, Label = \u0022delta\u0022 };\nPieSlice slice5 = new() { Value = 8, FillColor = Colors.Blue, Label = \u0022epsilon\u0022 };\n\nList\u003CPieSlice\u003E slices = new() { slice1, slice2, slice3, slice4, slice5 };\n\n// setup the pie to display slice labels\nvar pie = myPlot.Add.Pie(slices);\npie.ExplodeFraction = .1;\npie.SliceLabelDistance = 1.3;\n\n// color each label\u0027s text to match the slice\nslices.ForEach(x =\u003E x.LabelFontColor = x.FillColor.Darken(.5));\n\n// styling can be customized for individual slices\nslice2.LabelStyle.FontSize = 18;\nslice2.LabelStyle.Bold = true;\nslice2.LabelStyle.Italic = true;\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSliceLabels",
      "anchorUrl": "/cookbook/5.0/Pie#PieSliceLabels",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSliceLabels",
      "imageUrl": "/cookbook/5.0/images/PieSliceLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie with Percent Labels",
      "description": "Slice labels may be adapted to display any text (including numerical values) centered over each slice.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a pie chart\ndouble[] values = [6, 8, 10];\nvar pie = myPlot.Add.Pie(values);\npie.ExplodeFraction = .1;\npie.SliceLabelDistance = 0.5;\n\n// determine percentages for each slice\ndouble total = pie.Slices.Select(x =\u003E x.Value).Sum();\ndouble[] percentages = pie.Slices.Select(x =\u003E x.Value / total * 100).ToArray();\n\n// set each slice label to its percentage\nfor (int i = 0; i \u003C pie.Slices.Count; i\u002B\u002B)\n{\n    pie.Slices[i].Label = $\u0022{percentages[i]:0.0}%\u0022;\n    pie.Slices[i].LabelFontSize = 20;\n    pie.Slices[i].LabelBold = true;\n    pie.Slices[i].LabelFontColor = Colors.Black.WithAlpha(.5);\n}\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSliceLabelsPercent",
      "anchorUrl": "/cookbook/5.0/Pie#PieSliceLabelsPercent",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSliceLabelsPercent",
      "imageUrl": "/cookbook/5.0/images/PieSliceLabelsPercent.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Pie",
      "name": "Pie with Different Labels",
      "description": "Pie slices may have labels independent from those displayed in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create a pie chart\ndouble[] values = [6, 8, 10];\nvar pie = myPlot.Add.Pie(values);\npie.ExplodeFraction = 0.1;\npie.SliceLabelDistance = 0.5;\n\n// set different labels for slices and legend\ndouble total = pie.Slices.Select(x =\u003E x.Value).Sum();\nfor (int i = 0; i \u003C pie.Slices.Count; i\u002B\u002B)\n{\n    pie.Slices[i].LabelFontSize = 20;\n    pie.Slices[i].Label = $\u0022{pie.Slices[i].Value}\u0022;\n    pie.Slices[i].LegendText = $\u0022{pie.Slices[i].Value} \u0022 \u002B\n        $\u0022({pie.Slices[i].Value / total:p1})\u0022;\n}\n\n// hide unnecessary plot components\nmyPlot.Axes.Frameless();\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Pie",
      "recipeClassName": "PieSliceLabelsAndLegend",
      "anchorUrl": "/cookbook/5.0/Pie#PieSliceLabelsAndLegend",
      "categoryUrl": "/cookbook/5.0/Pie",
      "recipeUrl": "/cookbook/5.0/Pie/PieSliceLabelsAndLegend",
      "imageUrl": "/cookbook/5.0/images/PieSliceLabelsAndLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Pie.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis",
      "description": "A polar axis can be added to the plot, then other plot types (marker, line, scatter, etc.) can be placed on top of it using its helper methods to translate polar coordinates to Cartesian units.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a polar axis to the plot\nvar polarAxis = myPlot.Add.PolarAxis(radius: 100);\n\nIColormap colormap = new ScottPlot.Colormaps.Turbo();\nforeach (double fraction in ScottPlot.Generate.Range(0, 1, 0.02))\n{\n    // use the polar axis to get X/Y coordinates given a position in polar space\n    double radius = 100 * fraction;\n    double degrees = 360 * fraction;\n    Coordinates pt = polarAxis.GetCoordinates(radius, degrees);\n\n    // place markers or other plot types using X/Y coordinates like normal\n    var marker = myPlot.Add.Marker(pt);\n    marker.Color = colormap.GetColor(fraction);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarQuickStart",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarQuickStart",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarQuickStart",
      "imageUrl": "/cookbook/5.0/images/PolarQuickStart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis Rotation",
      "description": "A polar axis may be rotated to define the angle of the 0 degree spoke.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis(radius: 100);\npolarAxis.Rotation = Angle.FromDegrees(-90);\n\nIColormap colormap = new ScottPlot.Colormaps.Turbo();\nforeach (double fraction in ScottPlot.Generate.Range(0, 1, 0.02))\n{\n    double radius = 100 * fraction;\n    double degrees = 360 * fraction;\n    Coordinates pt = polarAxis.GetCoordinates(radius, degrees);\n    var marker = myPlot.Add.Marker(pt);\n    marker.Color = colormap.GetColor(fraction);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarRotation",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarRotation",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarRotation",
      "imageUrl": "/cookbook/5.0/images/PolarRotation.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis with Arrows",
      "description": "Arrows can be placed on a polar coordinate system with their base at the center and their tips used to indicate points in polar space. The Phaser plot type uses this strategy to display collections of similarly styled arrows.",
      "source": "ScottPlot.Plot myPlot = new();\n\nPolarCoordinates[] points = [\n    new(10, Angle.FromDegrees(15)),\n    new(20, Angle.FromDegrees(120)),\n    new(30, Angle.FromDegrees(240)),\n];\n\nvar polarAxis = myPlot.Add.PolarAxis(30);\npolarAxis.Circles.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\npolarAxis.Spokes.ForEach(x =\u003E x.LinePattern = LinePattern.Dotted);\n\nIPalette palette = new ScottPlot.Palettes.Category10();\nCoordinates center = polarAxis.GetCoordinates(0, 0);\nfor (int i = 0; i \u003C points.Length; i\u002B\u002B)\n{\n    Coordinates tip = polarAxis.GetCoordinates(points[i]);\n    var arrow = myPlot.Add.Arrow(center, tip);\n    arrow.ArrowLineWidth = 0;\n    arrow.ArrowFillColor = palette.GetColor(i).WithAlpha(.7);\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarAxisArrow",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarAxisArrow",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarAxisArrow",
      "imageUrl": "/cookbook/5.0/images/PolarAxisArrow.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis Styling",
      "description": "The lines of polar axes may be extensively styled. Polar axes have radial spokes (straight lines that extend from the origin to the maximum radius) and circular axis lines (concentric circles centered at the origin).",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\n\n// style the spokes (straight lines extending from the center to mark rotations)\nvar radialPalette = new ScottPlot.Palettes.Category10();\nfor (int i = 0; i \u003C polarAxis.Spokes.Count; i\u002B\u002B)\n{\n    polarAxis.Spokes[i].LineColor = radialPalette.GetColor(i).WithAlpha(.5);\n    polarAxis.Spokes[i].LineWidth = 4;\n    polarAxis.Spokes[i].LabelStyle.ForeColor = radialPalette.GetColor(i);\n    polarAxis.Spokes[i].LabelStyle.FontSize = 16;\n    polarAxis.Spokes[i].LabelStyle.Bold = true;\n}\n\n// style the circles (concentric circles marking radius positions)\nvar circularColormap = new ScottPlot.Colormaps.Rain();\nfor (int i = 0; i \u003C polarAxis.Circles.Count; i\u002B\u002B)\n{\n    double fraction = (double)i / (polarAxis.Circles.Count - 1);\n    polarAxis.Circles[i].LineColor = circularColormap.GetColor(fraction).WithAlpha(.5);\n    polarAxis.Circles[i].LineWidth = 2;\n    polarAxis.Circles[i].LinePattern = LinePattern.Dashed;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarAxisStyling",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarAxisStyling",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarAxisStyling",
      "imageUrl": "/cookbook/5.0/images/PolarAxisStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis Spoke Labels",
      "description": "Polar axis spokes may be individually labeled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\n\nstring[] labels = { \u0022alpha\u0022, \u0022beta\u0022, \u0022gamma\u0022, \u0022delta\u0022, \u0022epsilon\u0022 };\npolarAxis.SetSpokes(labels, 1.1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarSpokeLabels",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarSpokeLabels",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarSpokeLabels",
      "imageUrl": "/cookbook/5.0/images/PolarSpokeLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis Tick Labels",
      "description": "Polar axis ticks are marked by circles which may be individually labeled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\npolarAxis.Rotation = Angle.FromDegrees(-90);\n\ndouble[] ticksPositions = { 5, 10, 15, 20 };\nstring[] tickLabels = { \u0022A\u0022, \u0022B\u0022, \u0022C\u0022, \u0022D\u0022 };\npolarAxis.SetCircles(ticksPositions, tickLabels);\n\npolarAxis.SetSpokes(count: 5, length: 22, degreeLabels: false);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarTickLabels",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarTickLabels",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarTickLabels",
      "imageUrl": "/cookbook/5.0/images/PolarTickLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Axis Line Customization",
      "description": "The angle and length of spokes and position of circles can be manually defined. Each spoke and circle may also be individually styled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\n\n// define spoke angle and length\npolarAxis.Spokes.Clear();\npolarAxis.Spokes.Add(new(Angle.FromDegrees(0), 0.5));\npolarAxis.Spokes.Add(new(Angle.FromDegrees(45), 0.75));\npolarAxis.Spokes.Add(new(Angle.FromDegrees(90), 1.0));\n\n// define circle radius\npolarAxis.Circles.Clear();\npolarAxis.Circles.Add(new(0.5));\npolarAxis.Circles.Add(new(0.75));\npolarAxis.Circles.Add(new(1.0));\n\n// style individual spokes and circles\nScottPlot.Palettes.Category10 pal = new();\nfor (int i = 0; i \u003C 3; i\u002B\u002B)\n{\n    polarAxis.Circles[i].LineColor = pal.GetColor(i).WithAlpha(.5);\n    polarAxis.Spokes[i].LineColor = pal.GetColor(i).WithAlpha(.5);\n\n    polarAxis.Circles[i].LineWidth = 2 \u002B i * 2;\n    polarAxis.Spokes[i].LineWidth = 2 \u002B i * 2;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarAxisLineCustomizations",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarAxisLineCustomizations",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarAxisLineCustomizations",
      "imageUrl": "/cookbook/5.0/images/PolarAxisLineCustomizations.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Radar Plot",
      "description": "Combining a polar axis with polygons is an alternative strategy for building radar plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\npolarAxis.Rotation = Angle.FromDegrees(-90);\n\n// add labeled spokes\nstring[] labels = { \u0022Alpha\u0022, \u0022Beta\u0022, \u0022Gamma\u0022, \u0022Delta\u0022, \u0022Epsilon\u0022 };\npolarAxis.SetSpokes(labels, length: 5.5);\n\n// add defined ticks\ndouble[] ticks = { 1, 2, 3, 4, 5 };\npolarAxis.SetCircles(ticks);\n\n// convert radar values to coordinates\ndouble[] values1 = { 5, 4, 5, 2, 3 };\ndouble[] values2 = { 2, 3, 2, 4, 2 };\nCoordinates[] cs1 = polarAxis.GetCoordinates(values1);\nCoordinates[] cs2 = polarAxis.GetCoordinates(values2);\n\n// add polygons for each dataset\nvar poly1 = myPlot.Add.Polygon(cs1);\npoly1.FillColor = Colors.Green.WithAlpha(.5);\npoly1.LineColor = Colors.Black;\n\nvar poly2 = myPlot.Add.Polygon(cs2);\npoly2.FillColor = Colors.Blue.WithAlpha(.5);\npoly2.LineColor = Colors.Black;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarRadar",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarRadar",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarRadar",
      "imageUrl": "/cookbook/5.0/images/PolarRadar.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Polar Axis",
      "name": "Polar Spoke Label Padding",
      "description": "Modifies the padding of labels on polar spokes.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar polarAxis = myPlot.Add.PolarAxis();\npolarAxis.SetSpokes(4, 1);\n\nfor (int i = 0; i \u003C polarAxis.Spokes.Count; i\u002B\u002B)\n{\n    polarAxis.Spokes[i].LineWidth = 4;\n    polarAxis.Spokes[i].LabelStyle.FontSize = 16;\n    polarAxis.Spokes[i].LabelPaddingFraction = 0.2 * i;\n    polarAxis.Spokes[i].LabelText = $\u0022{polarAxis.Spokes[i].LabelLength}\u0022;\n}\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "PolarAxis",
      "recipeClassName": "PolarSpokeLabelPadding",
      "anchorUrl": "/cookbook/5.0/PolarAxis#PolarSpokeLabelPadding",
      "categoryUrl": "/cookbook/5.0/PolarAxis",
      "recipeUrl": "/cookbook/5.0/PolarAxis/PolarSpokeLabelPadding",
      "imageUrl": "/cookbook/5.0/images/PolarSpokeLabelPadding.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/PolarAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Quickstart",
      "description": "A Population can be created from a collection of values, styled as desired, and placed anywhere on the plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    myPlot.Add.Population(values, x: i);\n}\n\n// make the bottom of the plot snap to zero by default\nmyPlot.Axes.Margins(bottom: 0);\n\n// replace the default numeric ticks with custom ones\ndouble[] tickPositions = Generate.Consecutive(5);\nstring[] tickLabels = Enumerable.Range(1, 5).Select(x =\u003E $\u0022Group {x}\u0022).ToArray();\nmyPlot.Axes.Bottom.SetTicks(tickPositions, tickLabels);\n\n// refine appearance of the plot\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationQuickstart",
      "anchorUrl": "/cookbook/5.0/Population#PopulationQuickstart",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationQuickstart",
      "imageUrl": "/cookbook/5.0/images/PopulationQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Box Plot",
      "description": "Population statistics can be displayed using box plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n\n    // disable visibility of the bar symbol\n    pop.Bar.IsVisible = false;\n\n    // enable visibility of the box symbol\n    pop.Box.IsVisible = true;\n}\n\n// refine appearance of the plot\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationBox",
      "anchorUrl": "/cookbook/5.0/Population#PopulationBox",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationBox",
      "imageUrl": "/cookbook/5.0/images/PopulationBox.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Box Values",
      "description": "The values displayed by the box midline, body, and whisker can be configured by assigning a static function to the box value configuration property.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n    pop.Bar.IsVisible = false;\n    pop.Box.IsVisible = true;\n\n    pop.BoxValueConfig = PopulationSymbol.BoxValueConfigurator_MeanStdErrStDev;\n}\n\n// refine appearance of the plot\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationBoxValues",
      "anchorUrl": "/cookbook/5.0/Population#PopulationBoxValues",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationBoxValues",
      "imageUrl": "/cookbook/5.0/images/PopulationBoxValues.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Bar Styling",
      "description": "The bar symbol in population plots can be extensively styled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n\n    pop.Bar.FillColor = pop.Marker.MarkerLineColor.WithAlpha(.5);\n    pop.Bar.LineWidth = 2;\n    pop.Bar.ErrorNegative = false;\n}\n\n// refine appearance of the plot\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationBarStyle",
      "anchorUrl": "/cookbook/5.0/Population#PopulationBarStyle",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationBarStyle",
      "imageUrl": "/cookbook/5.0/images/PopulationBarStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Box Styling",
      "description": "The box symbol in population plots can be extensively styled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n    pop.Bar.IsVisible = false;\n    pop.Box.IsVisible = true;\n    pop.Box.LineWidth = 2;\n    pop.Box.FillColor = pop.Marker.MarkerLineColor.WithAlpha(.5);\n}\n\n// refine appearance of the plot\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationBoxStyle",
      "anchorUrl": "/cookbook/5.0/Population#PopulationBoxStyle",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationBoxStyle",
      "imageUrl": "/cookbook/5.0/images/PopulationBoxStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Marker Styling",
      "description": "The data markers in population plots can be extensively styled.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n\n    pop.Marker.LineWidth = 2;\n    pop.Marker.Color = Colors.Black.WithAlpha(.5);\n    pop.Marker.Shape = MarkerShape.OpenTriangleUp;\n}\n\n// refine appearance of the plot\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationMarkerStyle",
      "anchorUrl": "/cookbook/5.0/Population#PopulationMarkerStyle",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationMarkerStyle",
      "imageUrl": "/cookbook/5.0/images/PopulationMarkerStyle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Arrangement",
      "description": "The user may customize where data is drawn relative to the bar or box. Centering everything can be used to achieve an effect where data points are drawn over the bar or box.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    double[] values = Generate.RandomNormal(10, mean: 3 \u002B i);\n    var pop = myPlot.Add.Population(values, x: i);\n\n    pop.MarkerAlignment = HorizontalAlignment.Center;\n    pop.BarAlignment = HorizontalAlignment.Center;\n    pop.Marker.Shape = MarkerShape.OpenDiamond;\n    pop.Marker.Color = Colors.Black.WithAlpha(.5);\n    pop.Bar.FillColor = Colors.Gray;\n    pop.Bar.LineWidth = 2;\n    pop.Width = 0.5;\n}\n\n// refine appearance of the plot\nmyPlot.Axes.Margins(bottom: 0);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationArrangement",
      "anchorUrl": "/cookbook/5.0/Population#PopulationArrangement",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationArrangement",
      "imageUrl": "/cookbook/5.0/images/PopulationArrangement.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Population Plot",
      "name": "Population Groups",
      "description": "Groups of populations can be achieved by customizing position, color, axis labels, and legend items.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// define the groups\nstring[] groupNames = { \u0022Gen X\u0022, \u0022Gen Y\u0022, \u0022Gen Z\u0022 };\nstring[] categoryNames = { \u0022Python\u0022, \u0022C#\u0022, \u0022Rust\u0022 };\nColor[] categoryColors = { Colors.C0, Colors.C1, Colors.C2 };\n\n// add random data to the plot\nfor (int groupIndex = 0; groupIndex \u003C groupNames.Length; groupIndex\u002B\u002B)\n{\n    for (int categoryIndex = 0; categoryIndex \u003C categoryNames.Length; categoryIndex\u002B\u002B)\n    {\n        double[] values = Generate.RandomNormal(10, mean: 2 \u002B groupIndex * 2);\n        double x = groupIndex * (categoryNames.Length \u002B 1) \u002B categoryIndex;\n        var pop = myPlot.Add.Population(values, x);\n        pop.Marker.MarkerLineColor = categoryColors[categoryIndex].WithAlpha(.75);\n        pop.Marker.Size = 7;\n        pop.Marker.LineWidth = 1.5f;\n        pop.Bar.FillColor = categoryColors[categoryIndex];\n    }\n}\n\n// apply group names to horizontal tick labels\ndouble tickDelta = categoryNames.Length \u002B 1;\ndouble[] tickPositions = Enumerable.Range(0, groupNames.Length)\n    .Select(x =\u003E x * tickDelta \u002B tickDelta / 2 - 1)\n    .ToArray();\nmyPlot.Axes.Bottom.SetTicks(tickPositions, groupNames);\nmyPlot.Axes.Bottom.MajorTickStyle.Length = 0;\n\n// show category colors in the legend\nfor (int i = 0; i \u003C categoryNames.Length; i\u002B\u002B)\n{\n    LegendItem item = new()\n    {\n        FillColor = categoryColors[i],\n        LabelText = categoryNames[i]\n    };\n    myPlot.Legend.ManualItems.Add(item);\n}\nmyPlot.Legend.Orientation = Orientation.Horizontal;\nmyPlot.Legend.Alignment = Alignment.UpperLeft;\n\n// refine appearance of the plot\nmyPlot.Axes.Margins(bottom: 0, top: 0.3);\nmyPlot.YLabel(\u0022Bugs per Hour\u0022);\nmyPlot.HideGrid();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Population",
      "recipeClassName": "PopulationGroups",
      "anchorUrl": "/cookbook/5.0/Population#PopulationGroups",
      "categoryUrl": "/cookbook/5.0/Population",
      "recipeUrl": "/cookbook/5.0/Population/PopulationGroups",
      "imageUrl": "/cookbook/5.0/images/PopulationGroups.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Population.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Plot Quickstart",
      "description": "A radar chart can be created from a single array of values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 78, 83, 84, 76, 43 };\nmyPlot.Add.Radar(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarQuickstart",
      "anchorUrl": "/cookbook/5.0/Radar#RadarQuickstart",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarQuickstart",
      "imageUrl": "/cookbook/5.0/images/RadarQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Plot with Multiple Series",
      "description": "A single radar chart can be used to display values from multiple series using a 2D array",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] values = {\n    { 78,  83, 84, 76, 43 },\n    { 100, 50, 70, 60, 90 }\n};\n\nmyPlot.Add.Radar(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarMultipleQuickstart",
      "anchorUrl": "/cookbook/5.0/Radar#RadarMultipleQuickstart",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarMultipleQuickstart",
      "imageUrl": "/cookbook/5.0/images/RadarMultipleQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Legend",
      "description": "Collections of radar values (radar series) can be labeled so they appear in the legend",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] values = {\n    { 78,  83, 84, 76, 43 },\n    { 100, 50, 70, 60, 90 }\n};\n\nvar radar = myPlot.Add.Radar(values);\nradar.Series[0].LegendText = \u0022Sebastian\u0022;\nradar.Series[1].LegendText = \u0022Fernando\u0022;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarLegend",
      "anchorUrl": "/cookbook/5.0/Radar#RadarLegend",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarLegend",
      "imageUrl": "/cookbook/5.0/images/RadarLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Series Customization",
      "description": "Radar plots have a collection of RadarSeries objects which each describe a set of values and the styling information used to display it as a shape on the radar plot. Users may change properties of radar series objects to achieve a high level of customization over each shape.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] values = {\n    { 78,  83, 84, 76, 43 },\n    { 100, 50, 70, 60, 90 }\n};\n\nvar radar = myPlot.Add.Radar(values);\n\nradar.Series[0].FillColor = Colors.Transparent;\nradar.Series[0].LineColor = Colors.Blue;\nradar.Series[0].LineWidth = 3;\nradar.Series[0].LinePattern = LinePattern.DenselyDashed;\n\nradar.Series[1].FillColor = Colors.Green.WithAlpha(.2);\nradar.Series[1].LineColor = Colors.Green;\nradar.Series[1].LineWidth = 2;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarSeriesCustomization",
      "anchorUrl": "/cookbook/5.0/Radar#RadarSeriesCustomization",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarSeriesCustomization",
      "imageUrl": "/cookbook/5.0/images/RadarSeriesCustomization.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Spoke Labels",
      "description": "Labels can be assigned to spokes to label values around the circumference of the radar plot",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] values = {\n    { 78,  83, 84, 76, 43 },\n    { 100, 50, 70, 60, 90 }\n};\n\nvar radar = myPlot.Add.Radar(values);\n\nstring[] spokeLabels = { \u0022Wins\u0022, \u0022Poles\u0022, \u0022Podiums\u0022, \u0022Points\u0022, \u0022DNFs\u0022 };\nradar.PolarAxis.SetSpokes(spokeLabels, length: 110);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarSpokeLabels",
      "anchorUrl": "/cookbook/5.0/Radar#RadarSpokeLabels",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarSpokeLabels",
      "imageUrl": "/cookbook/5.0/images/RadarSpokeLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar Radial Tick Labels",
      "description": "Radar radial tick positions and labels may be defined by the user",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[,] values = {\n    { 78,  83, 84, 76, 43 },\n    { 100, 50, 70, 60, 90 }\n};\n\nvar radar = myPlot.Add.Radar(values);\n\ndouble[] tickPositions = { 25, 50, 75, 100 };\nstring[] tickLabels = tickPositions.Select(x =\u003E x.ToString()).ToArray();\nradar.PolarAxis.SetCircles(tickPositions, tickLabels);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarRadialTicks",
      "anchorUrl": "/cookbook/5.0/Radar#RadarRadialTicks",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarRadialTicks",
      "imageUrl": "/cookbook/5.0/images/RadarRadialTicks.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radar Plot",
      "name": "Radar with Straight Lines",
      "description": "Radial ticks may be rendered using straight lines instead of circles",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 78, 83, 100, 76, 43 };\nvar radar = myPlot.Add.Radar(values);\nradar.PolarAxis.StraightLines = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Radar",
      "recipeClassName": "RadarStraightLines",
      "anchorUrl": "/cookbook/5.0/Radar#RadarStraightLines",
      "categoryUrl": "/cookbook/5.0/Radar",
      "recipeUrl": "/cookbook/5.0/Radar/RadarStraightLines",
      "imageUrl": "/cookbook/5.0/images/RadarStraightLines.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Radar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Radial gauge from values",
      "description": "A radial gauge chart can be created from a few values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = { 100, 80, 65, 45, 20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeQuickstart",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeQuickstart",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeQuickstart",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Colors",
      "description": "Gauge colors can be customized by changing the default palette.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeColormap",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeColormap",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeColormap",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeColormap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Negative Values",
      "description": "Radial gauge plots support positive and negative values.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, -65, 45, -20 };\nmyPlot.Add.RadialGaugePlot(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeNegative",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeNegative",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeNegative",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeNegative.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Sequential Gauge Mode",
      "description": "Sequential gauge mode indicates that the base of each gauge starts at the tip of the previous gauge.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 50 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.Sequential;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeSequential",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeSequential",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeSequential",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeSequential.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Reverse Order",
      "description": "Gauges are displayed from the center outward by default but the order can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 50 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.Sequential;\nradialGaugePlot.OrderInsideOut = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeReverse",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeReverse",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeReverse",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeReverse.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Single Gauge Mode",
      "description": "The SingleGauge mode draws all gauges stacked together as a single gauge. This is useful for showing a progress gauges composed of many individual smaller gauges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.GaugeMode = ScottPlot.RadialGaugeMode.SingleGauge;\nradialGaugePlot.MaximumAngle = 180;\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeModeSingle",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeModeSingle",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeModeSingle",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeModeSingle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Direction",
      "description": "The direction of gauges can be customized. Clockwise is used by default.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Clockwise = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeDirection",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeDirection",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeDirection",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeDirection.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Size",
      "description": "The empty space between gauges can be adjusted as a fraction of their width. ",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.SpaceFraction = .05;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeSize",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeSize",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeSize",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeSize.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Starting Angle",
      "description": "The starting angle for gauges can be customized. 270 for North (default value), 0 for East, 90 for South, 180 for West, etc.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeStart",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeStart",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeStart",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeStart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Angular Range",
      "description": "By default gauges are full circles (360 degrees) but smaller gauges can be created by customizing the gauge size.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.MaximumAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeRange",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeRange",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeRange",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeRange.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Show Levels",
      "description": "The value of each gauge is displayed as text by default but this behavior can be overridden. Note that this is different than the labels fiels which is what appears in the legened.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.ShowLevels = false;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabels",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabels",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabels",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Label Position",
      "description": "Gauge level text is positioned at the tip of each gauge by default, but this position can be adjusted by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.LabelPositionFraction = 0.5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelPos",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelPos",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelPos",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelPos.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Label Font Percentage",
      "description": "Size of the gauge level text as a fraction of the gauge width.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.FontSizeFraction = .4;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelFontPct",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelFontPct",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelFontPct",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelFontPct.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Label Color",
      "description": "Level text fonts may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Font.Color = Colors.Black;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLabelColor",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLabelColor",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLabelColor",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLabelColor.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Gauge Labels in Legend",
      "description": "Radial gauge labels will appear in the legend if they are assigned. ",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.Labels = new string[] { \u0022alpha\u0022, \u0022beta\u0022, \u0022gamma\u0022, \u0022delta\u0022, \u0022epsilon\u0022 };\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeLegend",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeLegend",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeLegend",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeLegend.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Background Gauges Dim",
      "description": "By default the full range of each gauge is drawn as a semitransparent ring. The amount of transparency can be adjusted as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.BackgroundTransparencyFraction = .5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeBackDim",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeBackDim",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeBackDim",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeBackDim.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Radial gauge",
      "name": "Background Gauges Normalization",
      "description": "Gauge backgrounds are drawn as full circles by default. This behavior can be disabled to draw partial backgrounds for non-circular gauges.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Palette = new ScottPlot.Palettes.Nord();\ndouble[] values = { 100, 80, 65, 45, 20 };\n\nvar radialGaugePlot = myPlot.Add.RadialGaugePlot(values);\nradialGaugePlot.CircularBackground = false;\nradialGaugePlot.MaximumAngle = 180;\nradialGaugePlot.StartingAngle = 180;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "RadialGauge",
      "recipeClassName": "RadialGaugeBackNorm",
      "anchorUrl": "/cookbook/5.0/RadialGauge#RadialGaugeBackNorm",
      "categoryUrl": "/cookbook/5.0/RadialGauge",
      "recipeUrl": "/cookbook/5.0/RadialGauge/RadialGaugeBackNorm",
      "imageUrl": "/cookbook/5.0/images/RadialGaugeBackNorm.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/RadialGauge.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scale Bar",
      "name": "ScaleBar Quickstart",
      "description": "A ScaleBar can be added to a plot to convey scale information allowing axis frames, ticks, and labels to be hidden.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// add a scale bar\nmyPlot.Add.ScaleBar(5, 0.25);\n\n// disable the grid and axis labels\nmyPlot.HideGrid();\nmyPlot.Axes.Frameless();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScaleBar",
      "recipeClassName": "ScaleBarQuickstart",
      "anchorUrl": "/cookbook/5.0/ScaleBar#ScaleBarQuickstart",
      "categoryUrl": "/cookbook/5.0/ScaleBar",
      "recipeUrl": "/cookbook/5.0/ScaleBar/ScaleBarQuickstart",
      "imageUrl": "/cookbook/5.0/images/ScaleBarQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ScaleBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scale Bar",
      "name": "ScaleBar Labels",
      "description": "Text may be added to each dimension of an L shaped scalebar",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// add a scale bar\nvar scalebar = myPlot.Add.ScaleBar(5, 0.25);\nscalebar.XLabel = \u00225 mV\u0022;\nscalebar.YLabel = \u00221 \u00B5F\u0022;\n\n// disable the grid and axis labels\nmyPlot.HideGrid();\nmyPlot.Axes.Frameless();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScaleBar",
      "recipeClassName": "ScaleBarLabels",
      "anchorUrl": "/cookbook/5.0/ScaleBar#ScaleBarLabels",
      "categoryUrl": "/cookbook/5.0/ScaleBar",
      "recipeUrl": "/cookbook/5.0/ScaleBar/ScaleBarLabels",
      "imageUrl": "/cookbook/5.0/images/ScaleBarLabels.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ScaleBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scale Bar",
      "name": "ScaleBar Styling",
      "description": "The ScaleBar has many properties which may be customized ",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// add a scale bar\nvar scalebar = myPlot.Add.ScaleBar(5, 0.25);\nscalebar.LineWidth = 5;\nscalebar.LineColor = Colors.Magenta;\n\n// disable the grid and axis labels\nmyPlot.HideGrid();\nmyPlot.Axes.Frameless();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScaleBar",
      "recipeClassName": "ScaleBarStyling",
      "anchorUrl": "/cookbook/5.0/ScaleBar#ScaleBarStyling",
      "categoryUrl": "/cookbook/5.0/ScaleBar",
      "recipeUrl": "/cookbook/5.0/ScaleBar/ScaleBarStyling",
      "imageUrl": "/cookbook/5.0/images/ScaleBarStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ScaleBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scale Bar",
      "name": "ScaleBar Single Dimension",
      "description": "Set Width or Height to 0 to cause the ScaleBar to use a single axis only",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot sample data\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\n\n// add a scale bar\nvar scalebar = myPlot.Add.ScaleBar(7, 0);\nscalebar.LineWidth = 2;\nscalebar.XLabel = \u002270 ms\u0022;\nscalebar.XLabelStyle.Bold = true;\nscalebar.LabelPadding = new(0);\n\n// disable the grid and axis labels\nmyPlot.HideGrid();\nmyPlot.Axes.Frameless();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "ScaleBar",
      "recipeClassName": "ScaleBarSingleDimension",
      "anchorUrl": "/cookbook/5.0/ScaleBar#ScaleBarSingleDimension",
      "categoryUrl": "/cookbook/5.0/ScaleBar",
      "recipeUrl": "/cookbook/5.0/ScaleBar/ScaleBarSingleDimension",
      "imageUrl": "/cookbook/5.0/images/ScaleBarSingleDimension.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/ScaleBar.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Quickstart",
      "description": "Scatter plots can be created from two arrays containing X and Y values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = { 1, 2, 3, 4, 5 };\ndouble[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterQuickstart",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterQuickstart",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterQuickstart",
      "imageUrl": "/cookbook/5.0/images/ScatterQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Coordinates",
      "description": "Scatter plots can be created from a collection of Coordinates.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] coordinates =\n{\n    new(1, 1),\n    new(2, 4),\n    new(3, 9),\n    new(4, 16),\n    new(5, 25),\n};\n\nmyPlot.Add.Scatter(coordinates);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterCoordinates",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterCoordinates",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterCoordinates",
      "imageUrl": "/cookbook/5.0/images/ScatterCoordinates.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Data Type",
      "description": "Scatter plots can be created from any numeric data type, not just double.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfloat[] xs = { 1, 2, 3, 4, 5 };\nint[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterDataType",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterDataType",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterDataType",
      "imageUrl": "/cookbook/5.0/images/ScatterDataType.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot of List Data",
      "description": "Scatter plots can be created from Lists, but be very cafeful not to add or remove items while a render is occurring or you may throw an index exception. See documentation about the Render Lock system for details.",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003Cdouble\u003E xs = new() { 1, 2, 3, 4, 5 };\nList\u003Cdouble\u003E ys = new() { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterList",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterList",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterList",
      "imageUrl": "/cookbook/5.0/images/ScatterList.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Lines Only",
      "description": "The \u0060ScatterLine()\u0060 method can be used to create a scatter plot with a line only (marker size is set to 0).",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.ScatterLine(xs, sin);\nmyPlot.Add.ScatterLine(xs, cos);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLine",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLine",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLine",
      "imageUrl": "/cookbook/5.0/images/ScatterLine.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Points Only",
      "description": "The \u0060ScatterPoints()\u0060 method can be used to create a scatter plot with markers only (line width is set to 0).",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] sin = Generate.Sin(51);\ndouble[] cos = Generate.Cos(51);\n\nmyPlot.Add.ScatterPoints(xs, sin);\nmyPlot.Add.ScatterPoints(xs, cos);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterPoints",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterPoints",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterPoints",
      "imageUrl": "/cookbook/5.0/images/ScatterPoints.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Styling",
      "description": "Scatter plots can be extensively styled by interacting with the object that is returned after a scatter plot is added. Assign text to a scatter plot\u0027s Label property to allow it to appear in the legend.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys1 = Generate.Sin(51);\ndouble[] ys2 = Generate.Cos(51);\n\nvar sp1 = myPlot.Add.Scatter(xs, ys1);\nsp1.LegendText = \u0022Sine\u0022;\nsp1.LineWidth = 3;\nsp1.Color = Colors.Magenta;\nsp1.MarkerSize = 15;\n\nvar sp2 = myPlot.Add.Scatter(xs, ys2);\nsp2.LegendText = \u0022Cosine\u0022;\nsp2.LineWidth = 2;\nsp2.Color = Colors.Green;\nsp2.MarkerSize = 10;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterStyling",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterStyling",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterStyling",
      "imageUrl": "/cookbook/5.0/images/ScatterStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Line Patterns",
      "description": "Several line patterns are available",
      "source": "ScottPlot.Plot myPlot = new();\n\nList\u003CLinePattern\u003E patterns = [];\npatterns.AddRange(LinePattern.GetAllPatterns());\npatterns.Add(new([2, 2, 5, 10], 0, \u0022Custom\u0022));\n\nScottPlot.Palettes.ColorblindFriendly palette = new();\n\nfor (int i = 0; i \u003C patterns.Count; i\u002B\u002B)\n{\n    double yOffset = patterns.Count - i;\n    double[] xs = Generate.Consecutive(51);\n    double[] ys = Generate.Sin(51, offset: yOffset);\n\n    var sp = myPlot.Add.Scatter(xs, ys);\n    sp.LineWidth = 2;\n    sp.MarkerSize = 0;\n    sp.LinePattern = patterns[i];\n    sp.Color = palette.GetColor(i);\n\n    var txt = myPlot.Add.Text(patterns[i].Name, 51, yOffset);\n    txt.LabelFontColor = sp.Color;\n    txt.LabelFontSize = 22;\n    txt.LabelBold = true;\n    txt.LabelAlignment = Alignment.MiddleLeft;\n}\n\nmyPlot.Axes.Margins(.05, .5, .05, .05);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLinePatterns",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLinePatterns",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLinePatterns",
      "imageUrl": "/cookbook/5.0/images/ScatterLinePatterns.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Generic",
      "description": "Scatter plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint[] xs = { 1, 2, 3, 4, 5 };\nfloat[] ys = { 1, 4, 9, 16, 25 };\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterGeneric",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterGeneric",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterGeneric",
      "imageUrl": "/cookbook/5.0/images/ScatterGeneric.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter DateTime",
      "description": "A scatter plot may use DateTime units but be sure to setup the respective axis to display using DateTime format.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime[] xs = Generate.ConsecutiveDays(100);\ndouble[] ys = Generate.RandomWalk(xs.Length);\n\nmyPlot.Add.Scatter(xs, ys);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterDateTime",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterDateTime",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterDateTime",
      "imageUrl": "/cookbook/5.0/images/ScatterDateTime.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Step Plot",
      "description": "Scatter plots can be created using a step plot display where points are connected with right angles instead of diagnal lines. The direction of the steps can be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(20);\ndouble[] ys1 = Generate.Consecutive(20, first: 10);\ndouble[] ys2 = Generate.Consecutive(20, first: 5);\ndouble[] ys3 = Generate.Consecutive(20, first: 0);\n\nvar sp1 = myPlot.Add.Scatter(xs, ys1);\nsp1.ConnectStyle = ConnectStyle.Straight;\nsp1.LegendText = \u0022Straight\u0022;\n\nvar sp2 = myPlot.Add.Scatter(xs, ys2);\nsp2.ConnectStyle = ConnectStyle.StepHorizontal;\nsp2.LegendText = \u0022StepHorizontal\u0022;\n\nvar sp3 = myPlot.Add.Scatter(xs, ys3);\nsp3.ConnectStyle = ConnectStyle.StepVertical;\nsp3.LegendText = \u0022StepVertical\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterStep",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterStep",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterStep",
      "imageUrl": "/cookbook/5.0/images/ScatterStep.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter with Gaps",
      "description": "NaN values in a scatter plot\u0027s data will appear as gaps in the line.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\n// long stretch of empty data\nfor (int i = 10; i \u003C 20; i\u002B\u002B)\n    ys[i] = double.NaN;\n\n// single missing data point\nys[30] = double.NaN;\n\n// single floating data point\nfor (int i = 35; i \u003C 40; i\u002B\u002B)\n    ys[i] = double.NaN;\nfor (int i = 40; i \u003C 45; i\u002B\u002B)\n    ys[i] = double.NaN;\n\nmyPlot.Add.Scatter(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterWithGaps",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterWithGaps",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterWithGaps",
      "imageUrl": "/cookbook/5.0/images/ScatterWithGaps.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Smooth Lines",
      "description": "Scatter plots draw straight lines between points by default, but setting the Smooth property allows the scatter plot to connect points with smooth lines. Lines are smoothed using cubic spline interpolation.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.RandomSample(10, 5, 15);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.Smooth = true;\nsp.LegendText = \u0022Smooth\u0022;\nsp.LineWidth = 2;\nsp.MarkerSize = 10;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterSmooth",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterSmooth",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterSmooth",
      "imageUrl": "/cookbook/5.0/images/ScatterSmooth.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Smooth Line Tension",
      "description": "Tension of smooth lines can be adjusted for some smoothing strategies. Low tensions lead to \u0027overshoot\u0027 and high tensions produce curveswhich appear more like straight lines.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.RandomWalk(10);\ndouble[] ys = Generate.RandomWalk(10);\n\nvar mk = myPlot.Add.Markers(xs, ys);\nmk.MarkerShape = MarkerShape.OpenCircle;\nmk.Color = Colors.Black;\n\ndouble[] tensions = { 0.3, 0.5, 1.0, 3.0 };\n\nforeach (double tension in tensions)\n{\n    var sp = myPlot.Add.ScatterLine(xs, ys);\n    sp.Smooth = true;\n    sp.SmoothTension = tension;\n    sp.LegendText = $\u0022Tension {tension}\u0022;\n    sp.LineWidth = 2;\n}\n\nmyPlot.ShowLegend(Alignment.UpperLeft);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterSmoothTension",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterSmoothTension",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterSmoothTension",
      "imageUrl": "/cookbook/5.0/images/ScatterSmoothTension.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Smooth Scatter without Overshoot",
      "description": "The quadratic half point path strategy allows scatter plots to be displayed with smooth lines connecting points, but lines are eased in and out of points so they never \u0027overshoot\u0027 the values vertically.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.RandomSample(10, 5, 15);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.PathStrategy = new ScottPlot.PathStrategies.QuadHalfPoint();\nsp.LegendText = \u0022Smooth\u0022;\nsp.LineWidth = 2;\nsp.MarkerSize = 10;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterQuad",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterQuad",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterQuad",
      "imageUrl": "/cookbook/5.0/images/ScatterQuad.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Limiting Display with Render Indexes",
      "description": "Although a scatter plot may contain a very large amount of data, much of it may be unpopulated. The user can define min and max render indexes, and only values within that range will be displayed when the scatter plot is rendered.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.MinRenderIndex = 10;\nsp.MaxRenderIndex = 40;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterLimitIndex",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterLimitIndex",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterLimitIndex",
      "imageUrl": "/cookbook/5.0/images/ScatterLimitIndex.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Fill",
      "description": "The area beneath a scatter plot can be filled.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.FillY = true;\nsp.FillYColor = sp.Color.WithAlpha(.2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterFill",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterFill",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterFill",
      "imageUrl": "/cookbook/5.0/images/ScatterFill.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Filled to a Value",
      "description": "The base of the fill can be defined.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.FillY = true;\nsp.FillYColor = sp.Color.WithAlpha(.2);\nsp.FillYValue = 0.6;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterFillValue",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterFillValue",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterFillValue",
      "imageUrl": "/cookbook/5.0/images/ScatterFillValue.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot Filled Above and Below",
      "description": "Filled areas above and below the FillY value can be individually customized",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.FillY = true;\nsp.FillYValue = 0;\nsp.FillYAboveColor = Colors.Green.WithAlpha(.2);\nsp.FillYBelowColor = Colors.Red.WithAlpha(.2);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterFillAboveBelow",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterFillAboveBelow",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterFillAboveBelow",
      "imageUrl": "/cookbook/5.0/images/ScatterFillAboveBelow.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Plot with Gradient Fill",
      "description": "The area beneath a scatter plot can be filled with a custom gradient of colors.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar poly = myPlot.Add.ScatterLine(xs, ys);\n\npoly.FillY = true;\npoly.ColorPositions.Add(new(Colors.Red, 0));\npoly.ColorPositions.Add(new(Colors.Orange, 10));\npoly.ColorPositions.Add(new(Colors.Yellow, 20));\npoly.ColorPositions.Add(new(Colors.Green, 30));\npoly.ColorPositions.Add(new(Colors.Blue, 40));\npoly.ColorPositions.Add(new(Colors.Violet, 50));\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterFillGradient",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterFillGradient",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterFillGradient",
      "imageUrl": "/cookbook/5.0/images/ScatterFillGradient.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Scatter Scale and Offset",
      "description": "Scatter plot points can be multiplied by custom X and Y scale factors, or shifted horizontally or vertically using X and Y offset values.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\nvar sp = myPlot.Add.Scatter(xs, ys);\nsp.ScaleX = 100;\nsp.ScaleY = 10;\nsp.OffsetX = 500;\nsp.OffsetY = 5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterScaleAndOffset",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterScaleAndOffset",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterScaleAndOffset",
      "imageUrl": "/cookbook/5.0/images/ScatterScaleAndOffset.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Stacked Filled Line Plot",
      "description": "A stacked filled line plot effect can be achieved by overlapping ScatterLines that fill area.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// create sample data\ndouble[] xs = { 1, 2, 3, 4 };\ndouble[] ys1 = { 1, 3, 1, 2 };\ndouble[] ys2 = { 3, 7, 3, 1 };\ndouble[] ys3 = { 5, 2, 5, 6 };\n\n// shift each plot vertically by the sum of all plots before it\nys2 = Enumerable.Range(0, ys2.Length).Select(x =\u003E ys2[x] \u002B ys1[x]).ToArray();\nys3 = Enumerable.Range(0, ys2.Length).Select(x =\u003E ys3[x] \u002B ys2[x]).ToArray();\n\n// plot the padded data points as ScatterLine\nvar sp3 = myPlot.Add.ScatterLine(xs, ys3, Colors.Black);\nvar sp2 = myPlot.Add.ScatterLine(xs, ys2, Colors.Black);\nvar sp1 = myPlot.Add.ScatterLine(xs, ys1, Colors.Black);\n\n// set plot style\nsp1.LineWidth = 2;\nsp2.LineWidth = 2;\nsp3.LineWidth = 2;\nsp1.FillY = true;\nsp2.FillY = true;\nsp3.FillY = true;\nsp1.FillYColor = Colors.Green;\nsp2.FillYColor = Colors.Orange;\nsp3.FillYColor = Colors.Blue;\n\n// use tight margins so data goes to the edge of the plot\nmyPlot.Axes.Margins(0, 0, 0, 0.1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "StackedFilledLinePlot",
      "anchorUrl": "/cookbook/5.0/Scatter#StackedFilledLinePlot",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/StackedFilledLinePlot",
      "imageUrl": "/cookbook/5.0/images/StackedFilledLinePlot.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Scatter Plot",
      "name": "Stacked Scatter with Shading",
      "description": "Demonstrates how to combine filled scatter plots with vertical and horizontal offsets to achieve an interesting visual effect.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = ScottPlot.Generate.Consecutive(100);\nScottPlot.Colormaps.MellowRainbow cmap = new();\n\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    double yOffset = 9 - i * 0.5;\n    double[] ys = Generate.Sigmoidal(xs.Length)\n        .Select(y =\u003E y \u002B yOffset)\n        .ToArray();\n\n    Generate.AddNoiseInPlace(ys, 0.1);\n\n    var sig = myPlot.Add.ScatterLine(xs, ys);\n    sig.LineColor = Colors.Black;\n    sig.LineWidth = 1.5f;\n    sig.FillY = true;\n    sig.FillYValue = yOffset;\n    sig.FillYAboveColor = cmap.GetColor(i, 10);\n}\n\nmyPlot.HideGrid();\nmyPlot.Axes.MarginsX(0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Scatter",
      "recipeClassName": "ScatterStackedShading",
      "anchorUrl": "/cookbook/5.0/Scatter#ScatterStackedShading",
      "categoryUrl": "/cookbook/5.0/Scatter",
      "recipeUrl": "/cookbook/5.0/Scatter/ScatterStackedShading",
      "imageUrl": "/cookbook/5.0/images/ScatterStackedShading.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Scatter.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Rectangle",
      "description": "A rectangle can be added to the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a rectangle by specifying points\nmyPlot.Add.Rectangle(0, 1, 0, 1);\n\n// add a rectangle using more expressive shapes\nCoordinates location = new(2, 0);\nCoordinateSize size = new(1, 1);\nCoordinateRect rect = new(location, size);\nmyPlot.Add.Rectangle(rect);\n\n// style rectangles after they are added to the plot\nvar rp = myPlot.Add.Rectangle(4, 5, 0, 1);\nrp.FillStyle.Color = Colors.Magenta.WithAlpha(.2);\nrp.LineStyle.Color = Colors.Green;\nrp.LineStyle.Width = 3;\nrp.LineStyle.Pattern = LinePattern.Dashed;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "RectangleQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#RectangleQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/RectangleQuickstart",
      "imageUrl": "/cookbook/5.0/images/RectangleQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Circle",
      "description": "A circle can be placed on the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar c1 = myPlot.Add.Circle(1, 0, .5);\nvar c2 = myPlot.Add.Circle(2, 0, .5);\nvar c3 = myPlot.Add.Circle(3, 0, .5);\n\nc1.FillStyle.Color = Colors.Blue;\nc2.FillStyle.Color = Colors.Blue.Darken(.75);\nc3.FillStyle.Color = Colors.Blue.Lighten(.75);\n\nc1.LineWidth = 0;\nc2.LineWidth = 0;\nc3.LineWidth = 0;\n\n// force circles to remain circles\nScottPlot.AxisRules.SquareZoomOut squareRule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(squareRule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "CircleQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#CircleQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/CircleQuickstart",
      "imageUrl": "/cookbook/5.0/images/CircleQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Ellipse",
      "description": "An ellipse can be placed on the plot and styled as desired.",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 10; i\u002B\u002B)\n{\n    var el = myPlot.Add.Ellipse(0, 0, 1, 10, rotation: Angle.FromDegrees(i * -10));\n    double fraction = i / 10.0;\n    el.LineColor = Colors.Blue.WithAlpha(fraction);\n}\n\n// force circles to remain circles\nScottPlot.AxisRules.SquareZoomOut squareRule = new(myPlot.Axes.Bottom, myPlot.Axes.Left);\nmyPlot.Axes.Rules.Add(squareRule);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "EllipseQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#EllipseQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/EllipseQuickstart",
      "imageUrl": "/cookbook/5.0/images/EllipseQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Polygon Plot Quickstart",
      "description": "Polygon plots can be added from a series of vertices, and must be in clockwise order.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] points =\n{\n    new(0,   0.25),\n    new(0.3, 0.75),\n    new(1,   1),\n    new(0.7, 0.5),\n    new(1,   0)\n};\n\nmyPlot.Add.Polygon(points);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "PolygonQuickstart",
      "anchorUrl": "/cookbook/5.0/Shapes#PolygonQuickstart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/PolygonQuickstart",
      "imageUrl": "/cookbook/5.0/images/PolygonQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Polygon Plot Styling",
      "description": "Polygon plots can be fully customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates[] points =\n{\n    new (0, 0.25),\n    new (0.3, 0.75),\n    new (1, 1),\n    new (0.7, 0.5),\n    new (1, 0)\n};\n\nvar poly = myPlot.Add.Polygon(points);\npoly.FillColor = Colors.Green;\npoly.FillHatchColor = Colors.Blue;\npoly.FillHatch = new Gradient()\n{\n    GradientType = GradientType.Linear,\n    AlignmentStart = Alignment.UpperRight,\n    AlignmentEnd = Alignment.LowerLeft,\n};\n\npoly.LineColor = Colors.Black;\npoly.LinePattern = LinePattern.Dashed;\npoly.LineWidth = 2;\n\npoly.MarkerShape = MarkerShape.OpenCircle;\npoly.MarkerSize = 8;\npoly.MarkerFillColor = Colors.Gold;\npoly.MarkerLineColor = Colors.Brown;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "PolygonStyling",
      "anchorUrl": "/cookbook/5.0/Shapes#PolygonStyling",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/PolygonStyling",
      "imageUrl": "/cookbook/5.0/images/PolygonStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Stacked Line Chart",
      "description": "A stacked line chart may be achieved by combining primitive shapes onto a plot.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// prepare values for each line\ndouble[] values1 = [8.4, 6.9, 6.5, 4.4];\ndouble[] values2 = [7.9, 6.6, 6.4, 6.2];\ndouble[] values3 = [6.2, 7.3, 5.5, 3.7];\n\n// create a collection holding values for each line\ndouble[][] allValues = [values1, values2, values3];\n\n// calculate step points for each like by storing each point twice\ndouble[] runningSum = new double[values1.Length];\nfor (int i = 0; i \u003C allValues.Length; i\u002B\u002B)\n{\n    // add values on top of the running sum to achieve stacking effect\n    runningSum = DataOperations.SumVertically([runningSum, allValues[i]]);\n\n    List\u003CCoordinates\u003E points = [];\n    for (int j = 0; j \u003C runningSum.Length; j\u002B\u002B)\n    {\n        points.Add(new(j, runningSum[j]));\n        points.Add(new(j \u002B 1, runningSum[j]));\n    }\n\n    // plot the points as it is to show a line\n    Coordinates[] lineCoordinates = [.. points];\n\n    // add the start and end points\n    points.Add(new(points.Last().X, 0));\n    points.Add(new(points.First().X, 0));\n    Coordinates[] fillCoordinates = [.. points];\n\n    // add the polygon then top it with a line\n    var line = myPlot.Add.ScatterLine(lineCoordinates);\n    line.Color = ScottPlot.Palette.Default.GetColor(i);\n    line.LineWidth = 2;\n\n    var poly = myPlot.Add.Polygon(fillCoordinates);\n    poly.FillColor = line.Color.Lighten(.5);\n    poly.LineWidth = 0;\n}\n\n// reverse the order of everything so the smallest polygons\n// (the first that were added) to be displayed on top and rendered last\nmyPlot.PlottableList.Reverse();\n\n// use tight margins to prevent padding between the data and edge of the plot\nmyPlot.Axes.Margins(0, 0, 0, 0.1);\n\n// add group labels\ndouble[] positions = [0.5, 1.5, 2.5, 3.5];\nstring[] labels = { \u0022Alfred\u0022, \u0022Ralph\u0022, \u0022Don\u0022, \u0022James\u0022 };\nmyPlot.Axes.Bottom.SetTicks(positions, labels);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "StackedLineChart",
      "anchorUrl": "/cookbook/5.0/Shapes#StackedLineChart",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/StackedLineChart",
      "imageUrl": "/cookbook/5.0/images/StackedLineChart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Arc",
      "description": "An arc is a curve along the partial circumference of a circle. The circle starts at the far right and extends counter-clockwise.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble radius = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar circle = myPlot.Add.Circle(center, radius);\ncircle.FillColor = Colors.Blue.WithAlpha(.2);\ncircle.LineWidth = 0;\n\nvar arc = myPlot.Add.Arc(center, radius, start, sweep);\narc.LineWidth = 5;\narc.LineColor = Colors.Black;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "Arc",
      "anchorUrl": "/cookbook/5.0/Shapes#Arc",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/Arc",
      "imageUrl": "/cookbook/5.0/images/Arc.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Elliptical Arc",
      "description": "An elliptical arc is a curve along the partial circumference of an ellipse. The ellipse starts at the far right and extends counter-clockwise.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble radiusX = 2.0;\ndouble radiusY = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar ellipse = myPlot.Add.Ellipse(center, radiusX, radiusY);\nellipse.FillColor = Colors.Blue.WithAlpha(.2);\nellipse.LineWidth = 0;\n\nvar arc = myPlot.Add.EllipticalArc(center, radiusX, radiusY, start, sweep);\narc.LineWidth = 5;\narc.LineColor = Colors.Black;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "EllipticalArc",
      "anchorUrl": "/cookbook/5.0/Shapes#EllipticalArc",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/EllipticalArc",
      "imageUrl": "/cookbook/5.0/images/EllipticalArc.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Circle Sector",
      "description": "A circle sector is the 2D shape formed by the area inside a circle between an arc around its circumference and its center point.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble radius = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar cs = myPlot.Add.CircleSector(center, radius, start, sweep);\ncs.FillColor = Colors.Blue.WithAlpha(.2);\ncs.LineColor = Colors.Black;\ncs.LineWidth = 5;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "CircleSector",
      "anchorUrl": "/cookbook/5.0/Shapes#CircleSector",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/CircleSector",
      "imageUrl": "/cookbook/5.0/images/CircleSector.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Ellipse Sector",
      "description": "An ellipse sector is the 2D shape formed by the area inside an ellipse between an arc around its edge and its center point.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble radiusX = 2.0;\ndouble radiusY = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar cs = myPlot.Add.EllipticalSector(center, radiusX, radiusY, start, sweep);\ncs.FillColor = Colors.Blue.WithAlpha(.2);\ncs.LineColor = Colors.Black;\ncs.LineWidth = 5;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "EllipseSector",
      "anchorUrl": "/cookbook/5.0/Shapes#EllipseSector",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/EllipseSector",
      "imageUrl": "/cookbook/5.0/images/EllipseSector.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Annular Sector",
      "description": "An annular sector is the 2D shape between two circles (like a donut) and may be sliced to contain only the area between two angles relative to the center point.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble outerRadius = 2.0;\ndouble innerRadius = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar cs = myPlot.Add.AnnularSector(center, outerRadius, innerRadius, start, sweep);\ncs.FillColor = Colors.Blue.WithAlpha(.2);\ncs.LineColor = Colors.Black;\ncs.LineWidth = 5;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "AnnularSector",
      "anchorUrl": "/cookbook/5.0/Shapes#AnnularSector",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/AnnularSector",
      "imageUrl": "/cookbook/5.0/images/AnnularSector.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Shapes",
      "name": "Annular Elliptical Sector",
      "description": "An annular elliptical sector is the 2D shape between two ellipses and may be sliced to contain only the area between two angles relative to the center point.",
      "source": "ScottPlot.Plot myPlot = new();\n\nCoordinates center = new(0, 0);\ndouble outerRadiusX = 4.0;\ndouble outerRadiusY = 2.0;\ndouble innerRadiusX = 2.0;\ndouble innerRadiusY = 1.0;\nAngle start = Angle.FromDegrees(45);\nAngle sweep = Angle.FromDegrees(135);\n\nvar cs = myPlot.Add.AnnularEllipticalSector(center, outerRadiusX, outerRadiusY, innerRadiusX, innerRadiusY, start, sweep);\ncs.FillColor = Colors.Blue.WithAlpha(.2);\ncs.LineColor = Colors.Black;\ncs.LineWidth = 5;\n\nmyPlot.Axes.SquareUnits(); // use square units so circles are not stretched\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Shapes",
      "recipeClassName": "AnnularEllipticalSector",
      "anchorUrl": "/cookbook/5.0/Shapes#AnnularEllipticalSector",
      "categoryUrl": "/cookbook/5.0/Shapes",
      "recipeUrl": "/cookbook/5.0/Shapes/AnnularEllipticalSector",
      "imageUrl": "/cookbook/5.0/images/AnnularEllipticalSector.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Shapes.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Plot Quickstart",
      "description": "Signal plots are best for extremely large datasets. They use render using special optimizations that allow highspeed interactivity with plots containing millions of data points.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.RandomWalk(1_000_000);\n\nmyPlot.Add.Signal(values);\n\nmyPlot.Title(\u0022Signal Plot with 1 Million Points\u0022);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalQuickstart",
      "anchorUrl": "/cookbook/5.0/Signal#SignalQuickstart",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Plot Styling",
      "description": "Signal plots can be styled in a variety of ways.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Sin());\nsig1.Color = Colors.Magenta;\nsig1.LineWidth = 10;\nsig1.LegendText = \u0022Sine\u0022;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig2.Color = Colors.Green;\nsig2.LineWidth = 5;\nsig2.LegendText = \u0022Cosine\u0022;\n\nmyPlot.ShowLegend();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalStyling",
      "anchorUrl": "/cookbook/5.0/Signal#SignalStyling",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalStyling",
      "imageUrl": "/cookbook/5.0/images/SignalStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Offset",
      "description": "Signal plots can be offset by a given X and Y value.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = ScottPlot.Generate.Sin(51);\n\nvar sig1 = myPlot.Add.Signal(values);\nsig1.LegendText = \u0022Default\u0022;\n\nvar sig2 = myPlot.Add.Signal(values);\nsig2.Data.XOffset = 10;\nsig2.Data.YOffset = .25;\nsig2.LegendText = \u0022Offset\u0022;\n\nmyPlot.Legend.IsVisible = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalOffset",
      "anchorUrl": "/cookbook/5.0/Signal#SignalOffset",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalOffset",
      "imageUrl": "/cookbook/5.0/images/SignalOffset.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Scaling",
      "description": "Signal plots can be scaled vertically according to a user-defined amount.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot values between -1 and 1\ndouble[] values = ScottPlot.Generate.Sin(51);\nvar signal = myPlot.Add.Signal(values);\n\n// increase the vertical scaling\nsignal.Data.YScale = 500;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalScaleY",
      "anchorUrl": "/cookbook/5.0/Signal#SignalScaleY",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalScaleY",
      "imageUrl": "/cookbook/5.0/images/SignalScaleY.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Marker Size",
      "description": "Signal plots can have markers displayed at each point which are only visible when the plot is zoomed in.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar sig1 = myPlot.Add.Signal(Generate.Cos());\nsig1.LegendText = \u0022Default\u0022;\nsig1.Data.YOffset = 3;\n\nvar sig2 = myPlot.Add.Signal(Generate.Cos());\nsig2.LegendText = \u0022Large Markers\u0022;\nsig2.MaximumMarkerSize = 20;\nsig2.Data.YOffset = 2;\n\nvar sig3 = myPlot.Add.Signal(Generate.Cos());\nsig3.LegendText = \u0022Hidden Markers\u0022;\nsig3.MaximumMarkerSize = 0;\nsig3.Data.YOffset = 1;\n\nmyPlot.Legend.IsVisible = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalMarkerSize",
      "anchorUrl": "/cookbook/5.0/Signal#SignalMarkerSize",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalMarkerSize",
      "imageUrl": "/cookbook/5.0/images/SignalMarkerSize.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Partial Signal Rendering",
      "description": "Even if a signal plot references a large array of data, rendering can be limited to a range of values. If set,only the range of data between the minimum and maximum render indexes will be displayed.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] values = Generate.RandomWalk(1000);\n\nvar sigAll = myPlot.Add.Signal(values);\nsigAll.LegendText = \u0022Full\u0022;\nsigAll.Data.YOffset = 80;\n\nvar sigLeft = myPlot.Add.Signal(values);\nsigLeft.LegendText = \u0022Left\u0022;\nsigLeft.Data.YOffset = 60;\nsigLeft.Data.MaximumIndex = 700;\n\nvar sigRight = myPlot.Add.Signal(values);\nsigRight.LegendText = \u0022Right\u0022;\nsigRight.Data.YOffset = 40;\nsigRight.Data.MinimumIndex = 300;\n\nvar sigMid = myPlot.Add.Signal(values);\nsigMid.LegendText = \u0022Mid\u0022;\nsigMid.Data.YOffset = 20;\nsigMid.Data.MinimumIndex = 300;\nsigMid.Data.MaximumIndex = 700;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\nmyPlot.Axes.Margins(top: .5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalRenderIndexes",
      "anchorUrl": "/cookbook/5.0/Signal#SignalRenderIndexes",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalRenderIndexes",
      "imageUrl": "/cookbook/5.0/images/SignalRenderIndexes.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal Generic",
      "description": "Signal plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\nint[] values = Generate.RandomIntegers(1000, -100, 100);\n\nmyPlot.Add.Signal(values);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalGeneric",
      "anchorUrl": "/cookbook/5.0/Signal#SignalGeneric",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalGeneric",
      "imageUrl": "/cookbook/5.0/images/SignalGeneric.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Signal Plot",
      "name": "Signal DateTime",
      "description": "A signal plot may use DateTime units but be sure to setup the respective axis to display using DateTime format.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime start = new(2024, 1, 1);\ndouble[] ys = Generate.RandomWalk(200);\n\nvar sig = myPlot.Add.Signal(ys);\nsig.Data.XOffset = start.ToOADate();\nsig.Data.Period = 1.0; // one day between each point\n\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Signal",
      "recipeClassName": "SignalDateTime",
      "anchorUrl": "/cookbook/5.0/Signal#SignalDateTime",
      "categoryUrl": "/cookbook/5.0/Signal",
      "recipeUrl": "/cookbook/5.0/Signal/SignalDateTime",
      "imageUrl": "/cookbook/5.0/images/SignalDateTime.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Signal.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalConst",
      "name": "SignalConst Quickstart",
      "description": "SignalConst can display data with millions of points at high framerates, ideal for interactive manipulation of large datasets.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] data = Generate.RandomWalk(1_000_000);\nmyPlot.Add.SignalConst(data);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalConst",
      "recipeClassName": "SignalConstQuickstart",
      "anchorUrl": "/cookbook/5.0/SignalConst#SignalConstQuickstart",
      "categoryUrl": "/cookbook/5.0/SignalConst",
      "recipeUrl": "/cookbook/5.0/SignalConst/SignalConstQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalConstQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalConst.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY Quickstart",
      "description": "SignalXY plots are a high performance plot type for X/Y data where the X values are always ascending.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate sample data with gaps\nList\u003Cdouble\u003E xList = new();\nList\u003Cdouble\u003E yList = new();\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    xList.AddRange(Generate.Consecutive(1000, first: 2000 * i));\n    yList.AddRange(Generate.RandomSample(1000));\n}\ndouble[] xs = xList.ToArray();\ndouble[] ys = yList.ToArray();\n\n// add a SignalXY plot\nmyPlot.Add.SignalXY(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYQuickstart",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYQuickstart",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYQuickstart",
      "imageUrl": "/cookbook/5.0/images/SignalXYQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY Generic",
      "description": "SignalXY plots support generic data types, although double is typically the most performant.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate sample data with gaps\nList\u003Cint\u003E xList = new();\nList\u003Cfloat\u003E yList = new();\nfor (int i = 0; i \u003C 5; i\u002B\u002B)\n{\n    xList.AddRange(Generate.Consecutive(1000, first: 2000 * i).Select(x =\u003E (int)x));\n    yList.AddRange(Generate.RandomSample(1000).Select(x =\u003E (float)x));\n}\nint[] xs = xList.ToArray();\nfloat[] ys = yList.ToArray();\n\n// add a SignalXY plot\nmyPlot.Add.SignalXY(xs, ys);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYGeneric",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYGeneric",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYGeneric",
      "imageUrl": "/cookbook/5.0/images/SignalXYGeneric.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY DateTime Axis",
      "description": "SignalXY plots can display unevenly spaced time series data using a DateTime horizontal axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\nDateTime start = new(2024, 01, 01);\nDateTime[] xs = Generate.ConsecutiveDays(100, start);\n\ndouble[] ys = Generate.RandomWalk(100);\n\nmyPlot.Add.SignalXY(xs, ys);\nmyPlot.Axes.DateTimeTicksBottom();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYDateTime",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYDateTime",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYDateTime",
      "imageUrl": "/cookbook/5.0/images/SignalXYDateTime.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "Partial SignalXY Rendering",
      "description": "Even if a SignalXY plot references a large array of data, rendering can be limited to a range of values. If set,only the range of data between the minimum and maximum render indexes will be displayed.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.RandomWalk(1000);\n\nvar sigAll = myPlot.Add.SignalXY(xs, ys);\nsigAll.LegendText = \u0022Full\u0022;\nsigAll.Data.YOffset = 80;\n\nvar sigLeft = myPlot.Add.SignalXY(xs, ys);\nsigLeft.LegendText = \u0022Left\u0022;\nsigLeft.Data.YOffset = 60;\nsigLeft.Data.MaximumIndex = 700;\n\nvar sigRight = myPlot.Add.SignalXY(xs, ys);\nsigRight.LegendText = \u0022Right\u0022;\nsigRight.Data.YOffset = 40;\nsigRight.Data.MinimumIndex = 300;\n\nvar sigMid = myPlot.Add.SignalXY(xs, ys);\nsigMid.LegendText = \u0022Mid\u0022;\nsigMid.Data.YOffset = 20;\nsigMid.Data.MinimumIndex = 300;\nsigMid.Data.MaximumIndex = 700;\n\nmyPlot.ShowLegend(Alignment.UpperRight);\nmyPlot.Axes.Margins(top: .5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYRenderIndexes",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYRenderIndexes",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYRenderIndexes",
      "imageUrl": "/cookbook/5.0/images/SignalXYRenderIndexes.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY Offset",
      "description": "A fixed offset can be applied to SignalXY plots.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.Sin(1000);\n\nvar sig1 = myPlot.Add.SignalXY(xs, ys);\n\nvar sig2 = myPlot.Add.SignalXY(xs, ys);\nsig2.Data.XOffset = 250;\nsig2.Data.YOffset = .5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYOffset",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYOffset",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYOffset",
      "imageUrl": "/cookbook/5.0/images/SignalXYOffset.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY Scaling",
      "description": "SignalXY plots can be scaled vertically according to a user-defined amount.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// plot values between -1 and 1\ndouble[] values = ScottPlot.Generate.Sin(51);\ndouble[] xs = ScottPlot.Generate.Consecutive(51);\nvar signalXY = myPlot.Add.SignalXY(xs, values);\n\n// increase the vertical scaling\nsignalXY.Data.YScale = 500;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYOffsetScaleY",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYOffsetScaleY",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYOffsetScaleY",
      "imageUrl": "/cookbook/5.0/images/SignalXYOffsetScaleY.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY",
      "description": "Although SignalXY plots typically display data left-to-right, it is possible to use this plot type to display data bottom-to-top.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(1000);\ndouble[] ys = Generate.RandomWalk(1000);\n\nvar sig1 = myPlot.Add.SignalXY(xs, ys);\nsig1.Data.Rotated = true;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "VerticalSignalXY",
      "anchorUrl": "/cookbook/5.0/SignalXY#VerticalSignalXY",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/VerticalSignalXY",
      "imageUrl": "/cookbook/5.0/images/VerticalSignalXY.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY with Inverted X Axis",
      "description": "Demonstrates how to display a rotated SignalXY plot (so it goes from bottom to top) which is also displayed on an inverted horizontal axis (where positive values are on the left).",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a signal plot\ndouble[] xs = Generate.Consecutive(5_000);\ndouble[] ys = Generate.Sin(count: xs.Length, oscillations: 4);\n\n// rotate it so it is vertical\nvar signal = myPlot.Add.SignalXY(xs, ys);\nsignal.Data.Rotated = true;\n\n// invert the horizontal axis\nmyPlot.Axes.SetLimitsX(1, -1);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYVerticalInvertedX",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYVerticalInvertedX",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYVerticalInvertedX",
      "imageUrl": "/cookbook/5.0/images/SignalXYVerticalInvertedX.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "Vertical SignalXY with Inverted Y Axis",
      "description": "Demonstrates how to display a rotated SignalXY plot on an inverted vertical axis so data goes from top to bottom.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// add a signal plot\ndouble[] xs = Generate.Consecutive(5_000);\ndouble[] ys = Generate.Sin(count: xs.Length, oscillations: 4);\n\n// rotate it so it is vertical\nvar signal = myPlot.Add.SignalXY(xs, ys);\nsignal.Data.Rotated = true;\n\n// invert the vertical axis\nmyPlot.Axes.SetLimitsY(5000, 0);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYVerticalInvertedY",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYVerticalInvertedY",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYVerticalInvertedY",
      "imageUrl": "/cookbook/5.0/images/SignalXYVerticalInvertedY.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "SignalXY Plot",
      "name": "SignalXY with Markers",
      "description": "Users can enable a marker to be displayedat each data point. However, this can reduce performance for extremely large datasets.",
      "source": "ScottPlot.Plot myPlot = new();\n\ndouble[] xs = Generate.Consecutive(51);\ndouble[] ys = Generate.Sin(51);\n\nvar sig = myPlot.Add.SignalXY(xs, ys);\nsig.MarkerStyle.Shape = MarkerShape.FilledCircle;\nsig.MarkerStyle.Size = 5;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SignalXY",
      "recipeClassName": "SignalXYMarkers",
      "anchorUrl": "/cookbook/5.0/SignalXY#SignalXYMarkers",
      "categoryUrl": "/cookbook/5.0/SignalXY",
      "recipeUrl": "/cookbook/5.0/SignalXY/SignalXYMarkers",
      "imageUrl": "/cookbook/5.0/images/SignalXYMarkers.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SignalXY.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Smith Chart",
      "name": "Smith Chart Quickstart",
      "description": "Add a Smith chart to the plot and use its methods to translate impedance to Cartesian coordinates that can be used for placing other plot components.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar smith = myPlot.Add.SmithChartAxis();\n\n// translate an impedance location on the Smith chart to a 2D location on the plot\ndouble resistance = 0.2;\ndouble reactance = -0.5;\nCoordinates location = smith.GetCoordinates(resistance, reactance);\n\n// use that location to add traditional plot components\nmyPlot.Add.Marker(location, MarkerShape.FilledCircle, size: 15, Colors.Red);\nvar txt = myPlot.Add.Text(\u00220.2 - j 0.5\u0022, location);\ntxt.LabelStyle.FontSize = 24;\ntxt.LabelStyle.Bold = true;\ntxt.LabelStyle.ForeColor = Colors.Red;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "SmithChart",
      "recipeClassName": "SmithChartQuickstart",
      "anchorUrl": "/cookbook/5.0/SmithChart#SmithChartQuickstart",
      "categoryUrl": "/cookbook/5.0/SmithChart",
      "recipeUrl": "/cookbook/5.0/SmithChart/SmithChartQuickstart",
      "imageUrl": "/cookbook/5.0/images/SmithChartQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/SmithChart.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Text",
      "name": "Text Quickstart",
      "description": "Text can be placed anywhere in coordinate space.",
      "source": "ScottPlot.Plot myPlot = new();\n\nmyPlot.Add.Signal(Generate.Sin());\nmyPlot.Add.Signal(Generate.Cos());\nmyPlot.Add.Text(\u0022Hello, World\u0022, 25, 0.5);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "TextQuickstart",
      "anchorUrl": "/cookbook/5.0/Text#TextQuickstart",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/TextQuickstart",
      "imageUrl": "/cookbook/5.0/images/TextQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Text",
      "name": "Text Formatting",
      "description": "Text formatting can be extensively customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar text = myPlot.Add.Text(\u0022Hello, World\u0022, 42, 69);\ntext.LabelFontSize = 26;\ntext.LabelBold = true;\ntext.LabelRotation = -45;\ntext.LabelFontColor = Colors.Yellow;\ntext.LabelBackgroundColor = Colors.Navy.WithAlpha(.5);\ntext.LabelBorderColor = Colors.Magenta;\ntext.LabelBorderWidth = 3;\ntext.LabelPadding = 10;\ntext.LabelAlignment = Alignment.MiddleCenter;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "Formatting",
      "anchorUrl": "/cookbook/5.0/Text#Formatting",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/Formatting",
      "imageUrl": "/cookbook/5.0/images/Formatting.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Text",
      "name": "Line Height",
      "description": "Multiline labels have a default line height estimated from the typeface and font size, however line height may be manually defined by the user.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar label1 = myPlot.Add.Text($\u0022line\\nheight\u0022, 0, 0);\nlabel1.LabelLineSpacing = 0;\nlabel1.LabelFontColor = Colors.Red;\nlabel1.LabelBorderColor = Colors.Black;\n\nvar label2 = myPlot.Add.Text($\u0022can\\nbe\u0022, 1, 0);\nlabel2.LabelLineSpacing = 10;\nlabel2.LabelFontColor = Colors.Orange;\nlabel2.LabelBorderColor = Colors.Black;\n\nvar label3 = myPlot.Add.Text($\u0022automatic\\nor\u0022, 2, 0);\nlabel3.LabelLineSpacing = null;\nlabel3.LabelFontColor = Colors.Green;\nlabel3.LabelBorderColor = Colors.Black;\n\nvar label4 = myPlot.Add.Text($\u0022set\\nmanually\u0022, 3, 0);\nlabel4.LabelLineSpacing = 15;\nlabel4.LabelFontColor = Colors.Blue;\nlabel4.LabelBorderColor = Colors.Black;\n\nmyPlot.HideGrid();\nmyPlot.Axes.SetLimitsX(-.5, 4);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "LabelLineHeight",
      "anchorUrl": "/cookbook/5.0/Text#LabelLineHeight",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/LabelLineHeight",
      "imageUrl": "/cookbook/5.0/images/LabelLineHeight.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Text",
      "name": "Text Offset",
      "description": "The offset properties can be used to fine-tune text position in pixel units",
      "source": "ScottPlot.Plot myPlot = new();\n\nfor (int i = 0; i \u003C 25; i \u002B= 5)\n{\n    // place a marker at the point\n    var marker = myPlot.Add.Marker(i, 1);\n\n    // place a styled text label at the point\n    var txt = myPlot.Add.Text($\u0022{i}\u0022, i, 1);\n    txt.LabelFontSize = 16;\n    txt.LabelBorderColor = Colors.Black;\n    txt.LabelBorderWidth = 1;\n    txt.LabelPadding = 2;\n    txt.LabelBold = true;\n    txt.LabelBackgroundColor = marker.Color.WithAlpha(.5);\n\n    // offset the text label by the given number of pixels\n    txt.OffsetX = i;\n    txt.OffsetY = i;\n}\n\nmyPlot.Axes.SetLimitsX(-5, 30);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "Text",
      "recipeClassName": "TextOffset",
      "anchorUrl": "/cookbook/5.0/Text#TextOffset",
      "categoryUrl": "/cookbook/5.0/Text",
      "recipeUrl": "/cookbook/5.0/Text/TextOffset",
      "imageUrl": "/cookbook/5.0/images/TextOffset.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/Text.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Triangular Axis",
      "name": "Triangular Axis Quickstart",
      "description": "Create a triangular axis and add it to the plot to display data on a triangular grid, and interact with it to convert triangular units into Cartesian coordinates that can be used for placing any plot type on top.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Add a triangular axis to the plot\nvar ta = myPlot.Add.TriangularAxis();\n\n// Get points from various locations in triangular space\nCoordinates[] points = [\n    ta.GetCoordinates(0.50, 0.40),\n    ta.GetCoordinates(0.60, 0.40),\n    ta.GetCoordinates(0.65, 0.50),\n];\n\n// Any plot type may be added on top of the triangular axis\nmyPlot.Add.Markers(points, MarkerShape.FilledCircle, 10, Colors.Red);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "TriangularAxis",
      "recipeClassName": "TriangularAxisQuickStart",
      "anchorUrl": "/cookbook/5.0/TriangularAxis#TriangularAxisQuickStart",
      "categoryUrl": "/cookbook/5.0/TriangularAxis",
      "recipeUrl": "/cookbook/5.0/TriangularAxis/TriangularAxisQuickStart",
      "imageUrl": "/cookbook/5.0/images/TriangularAxisQuickStart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/TriangularAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Triangular Axis",
      "name": "Triangular Axis Reverse",
      "description": "Triangular axes typically ascend in a clockwise direction for general applications, but triangular plots with counterclockwise labeling are sometimes used for geological applications.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// Add a COUNTER-CLOCKWISE triangular axis to the plot\nvar ta = myPlot.Add.TriangularAxis(clockwise: false);\n\n// Get points from various locations in triangular space\nCoordinates[] points = [\n    ta.GetCoordinates(0.50, 0.40),\n    ta.GetCoordinates(0.60, 0.40),\n    ta.GetCoordinates(0.65, 0.50),\n];\n\n// Any plot type may be added on top of the triangular axis\nmyPlot.Add.Markers(points, MarkerShape.FilledCircle, 10, Colors.Red);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "TriangularAxis",
      "recipeClassName": "TriangularAxisReversed",
      "anchorUrl": "/cookbook/5.0/TriangularAxis#TriangularAxisReversed",
      "categoryUrl": "/cookbook/5.0/TriangularAxis",
      "recipeUrl": "/cookbook/5.0/TriangularAxis/TriangularAxisReversed",
      "imageUrl": "/cookbook/5.0/images/TriangularAxisReversed.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/TriangularAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Triangular Axis",
      "name": "Triangular Axis Styling",
      "description": "Triangular axis background and grid lines may be customized.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar ta = myPlot.Add.TriangularAxis();\n\n// Customize the background\nta.FillStyle.Color = Colors.Blue.WithAlpha(.1);\n\n// Customize the grid lines\nta.GridLineStyle.Color = Colors.Black.WithAlpha(.5);\nta.GridLineStyle.Pattern = LinePattern.Dotted;\n\n// Add sample data\nCoordinates[] points = [\n    ta.GetCoordinates(0.50, 0.40),\n    ta.GetCoordinates(0.60, 0.40),\n    ta.GetCoordinates(0.65, 0.50),\n];\nmyPlot.Add.Markers(points, MarkerShape.FilledCircle, 10, Colors.Red);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "TriangularAxis",
      "recipeClassName": "TriangularAxisStyling",
      "anchorUrl": "/cookbook/5.0/TriangularAxis#TriangularAxisStyling",
      "categoryUrl": "/cookbook/5.0/TriangularAxis",
      "recipeUrl": "/cookbook/5.0/TriangularAxis/TriangularAxisStyling",
      "imageUrl": "/cookbook/5.0/images/TriangularAxisStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/TriangularAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Triangular Axis",
      "name": "Triangular Axis Edge Styling",
      "description": "Styling options for edge lines, tick marks, tick labels, and title text may be customized individually for each axis.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar ta = myPlot.Add.TriangularAxis();\n\n// the edge line extends from one corner to the other\nta.Left.EdgeLineStyle.Width = 3;\nta.Left.EdgeLineStyle.Color = Colors.Blue;\n\n// tick labels and marks may be styled individually\nta.Left.TickLabelStyle.ForeColor = Colors.Blue;\nta.Left.TickMarkStyle.Color = Colors.Blue;\nta.Left.TickMarkStyle.Width = 3;\nta.Left.TickOffset = new(-10, 0);\nta.Left.TickLabelStyle.Bold = true;\nta.Left.TickLabelStyle.OffsetX = -4;\n\n// an axis title may be added and styled\nta.Left.LabelText = \u0022Hello, World\u0022;\nta.Left.LabelStyle.ForeColor = Colors.Blue;\nta.Left.LabelStyle.FontSize = 26;\nta.Left.LabelStyle.Bold = false;\nta.Left.LabelStyle.OffsetX = -20;\n\n// Add sample data\nCoordinates[] points = [\n    ta.GetCoordinates(0.50, 0.40),\n    ta.GetCoordinates(0.60, 0.40),\n    ta.GetCoordinates(0.65, 0.50),\n];\nmyPlot.Add.Markers(points, MarkerShape.FilledCircle, 10, Colors.Red);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "TriangularAxis",
      "recipeClassName": "TriangularAxisEdgeStyling",
      "anchorUrl": "/cookbook/5.0/TriangularAxis#TriangularAxisEdgeStyling",
      "categoryUrl": "/cookbook/5.0/TriangularAxis",
      "recipeUrl": "/cookbook/5.0/TriangularAxis/TriangularAxisEdgeStyling",
      "imageUrl": "/cookbook/5.0/images/TriangularAxisEdgeStyling.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/TriangularAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Triangular Axis",
      "name": "Triangular Axis Titles",
      "description": "Triangular axis edges have a helper method to easily add a title and color all the edge components similarly.",
      "source": "ScottPlot.Plot myPlot = new();\n\nvar ta = myPlot.Add.TriangularAxis();\n\n// Give each axis a title and color\nta.Bottom.Title(\u0022Methane\u0022, Colors.Red);\nta.Left.Title(\u0022Nitrogen\u0022, Colors.Green);\nta.Right.Title(\u0022Oxygen\u0022, Colors.Blue);\n\n// Add sample data\nCoordinates[] points = [\n    ta.GetCoordinates(0.50, 0.40),\n    ta.GetCoordinates(0.60, 0.40),\n    ta.GetCoordinates(0.65, 0.50),\n];\nmyPlot.Add.Markers(points, MarkerShape.FilledCircle, 10, Colors.Red);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "TriangularAxis",
      "recipeClassName": "TriangularEdgeTitle",
      "anchorUrl": "/cookbook/5.0/TriangularAxis#TriangularEdgeTitle",
      "categoryUrl": "/cookbook/5.0/TriangularAxis",
      "recipeUrl": "/cookbook/5.0/TriangularAxis/TriangularEdgeTitle",
      "imageUrl": "/cookbook/5.0/images/TriangularEdgeTitle.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/TriangularAxis.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Vector Field",
      "name": "Vector Field Quickstart",
      "description": "Vectors (representing a magnitude and direction) can be placed at specific points in coordinate space to display as a vector field.",
      "source": "ScottPlot.Plot myPlot = new();\n\n// generate a grid of positions\ndouble[] xs = Generate.Consecutive(10);\ndouble[] ys = Generate.Consecutive(10);\n\n// create a collection of vectors\nList\u003CRootedCoordinateVector\u003E vectors = new();\nfor (int i = 0; i \u003C xs.Length; i\u002B\u002B)\n{\n    for (int j = 0; j \u003C ys.Length; j\u002B\u002B)\n    {\n        // point on the grid\n        Coordinates pt = new(xs[i], ys[j]);\n\n        // direction \u0026 magnitude\n        float dX = (float)ys[j];\n        float dY = -9.81f / 0.5f * (float)Math.Sin(xs[i]);\n        System.Numerics.Vector2 v = new(dX, dY);\n\n        // add to the collection\n        RootedCoordinateVector vector = new(pt, v);\n        vectors.Add(vector);\n    }\n}\n\n// plot the collection of rooted vectors as a vector field\nmyPlot.Add.VectorField(vectors);\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "VectorField",
      "recipeClassName": "VectorFieldQuickstart",
      "anchorUrl": "/cookbook/5.0/VectorField#VectorFieldQuickstart",
      "categoryUrl": "/cookbook/5.0/VectorField",
      "recipeUrl": "/cookbook/5.0/VectorField/VectorFieldQuickstart",
      "imageUrl": "/cookbook/5.0/images/VectorFieldQuickstart.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/VectorField.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Vector Field",
      "name": "Vector Field Colormap",
      "description": "Vector field arrows can be colored according to their magnitude.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRootedCoordinateVector[] vectors = Generate.SampleVectors();\nvar vf = myPlot.Add.VectorField(vectors);\nvf.Colormap = new ScottPlot.Colormaps.Turbo();\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "VectorField",
      "recipeClassName": "VectorFieldColormap",
      "anchorUrl": "/cookbook/5.0/VectorField#VectorFieldColormap",
      "categoryUrl": "/cookbook/5.0/VectorField",
      "recipeUrl": "/cookbook/5.0/VectorField/VectorFieldColormap",
      "imageUrl": "/cookbook/5.0/images/VectorFieldColormap.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/VectorField.cs"
    },
    {
      "chapter": "Chapter.PlotTypes;",
      "category": "Vector Field",
      "name": "Vector Field Arrow Length",
      "description": "Length of arrows in a vector field may be customized by defining length (in pixel units) to display the longest vector.",
      "source": "ScottPlot.Plot myPlot = new();\n\nRootedCoordinateVector[] vectors = Generate.SampleVectors();\nvar vf = myPlot.Add.VectorField(vectors);\nvf.MaximumArrowLength = 15;\n\nmyPlot.SavePng(\u0022demo.png\u0022, 400, 300);\n",
      "categoryClassName": "VectorField",
      "recipeClassName": "VectorFieldArrowLength",
      "anchorUrl": "/cookbook/5.0/VectorField#VectorFieldArrowLength",
      "categoryUrl": "/cookbook/5.0/VectorField",
      "recipeUrl": "/cookbook/5.0/VectorField/VectorFieldArrowLength",
      "imageUrl": "/cookbook/5.0/images/VectorFieldArrowLength.png?250126165944",
      "sourceUrl": "https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot5/ScottPlot5%20Cookbook/Recipes/PlotTypes/VectorField.cs"
    }
  ]
}